diff --git src/java/org/apache/sqoop/manager/OracleManager.java src/java/org/apache/sqoop/manager/OracleManager.java
index 929b5061..61d83736 100644
--- src/java/org/apache/sqoop/manager/OracleManager.java
+++ src/java/org/apache/sqoop/manager/OracleManager.java
@@ -331,6 +331,19 @@ protected Connection makeConnection() throws SQLException {
       }
     }
 
+    try{
+      prepareConnection(connection);
+    }catch(SQLException e){
+      if (connection != null){
+        connection.close();
+      }
+      throw e;
+    }
+
+    return connection;
+  }
+
+  private void prepareConnection(Connection connection) throws SQLException {
     // We only use this for metadata queries. Loosest semantics are okay.
     connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
 
@@ -342,8 +355,6 @@ protected Connection makeConnection() throws SQLException {
     // usually done directly by SqlManager in the makeConnection method, but
     // since we are overriding it, we have to do it ourselves.
     connection.setAutoCommit(false);
-
-    return connection;
   }
 
   public static String getSessionUser(Connection conn) {
diff --git src/java/org/apache/sqoop/mapreduce/db/DBOutputFormat.java src/java/org/apache/sqoop/mapreduce/db/DBOutputFormat.java
index 730ff286..07f19bcf 100644
--- src/java/org/apache/sqoop/mapreduce/db/DBOutputFormat.java
+++ src/java/org/apache/sqoop/mapreduce/db/DBOutputFormat.java
@@ -112,8 +112,9 @@ public String constructQuery(String table, String[] fieldNames) {
       fieldNames = new String[dbConf.getOutputFieldCount()];
     }
 
+    Connection connection = null;
     try {
-      Connection connection = dbConf.getConnection();
+      connection = dbConf.getConnection();
       PreparedStatement statement = null;
 
       statement = connection.prepareStatement(
@@ -121,6 +122,13 @@ public String constructQuery(String table, String[] fieldNames) {
       return new org.apache.sqoop.mapreduce.db.DBOutputFormat.DBRecordWriter(
                      connection, statement);
     } catch (Exception ex) {
+      if (connection != null){
+        try {
+          connection.close();
+        } catch (SQLException e) {
+          throw new IOException(e);
+        }
+      }
       throw new IOException(ex);
     }
   }
