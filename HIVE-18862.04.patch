diff --git accumulo-handler/src/test/queries/positive/accumulo_custom_key.q accumulo-handler/src/test/queries/positive/accumulo_custom_key.q
index 6684fd32f6..ca7e6c74e3 100644
--- accumulo-handler/src/test/queries/positive/accumulo_custom_key.q
+++ accumulo-handler/src/test/queries/positive/accumulo_custom_key.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE accumulo_ck_1(key struct<col1:string,col2:string,col3:string>, value string)
 STORED BY 'org.apache.hadoop.hive.accumulo.AccumuloStorageHandler'
 WITH SERDEPROPERTIES (
diff --git accumulo-handler/src/test/queries/positive/accumulo_custom_key2.q accumulo-handler/src/test/queries/positive/accumulo_custom_key2.q
index 038633f0bb..615e5f83ef 100644
--- accumulo-handler/src/test/queries/positive/accumulo_custom_key2.q
+++ accumulo-handler/src/test/queries/positive/accumulo_custom_key2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE accumulo_ck_3(key struct<col1:string,col2:string,col3:string>, value string)
 STORED BY 'org.apache.hadoop.hive.accumulo.AccumuloStorageHandler'
 WITH SERDEPROPERTIES (
diff --git accumulo-handler/src/test/queries/positive/accumulo_joins.q accumulo-handler/src/test/queries/positive/accumulo_joins.q
index b72ec6ba2f..a6b09ab5b2 100644
--- accumulo-handler/src/test/queries/positive/accumulo_joins.q
+++ accumulo-handler/src/test/queries/positive/accumulo_joins.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE users;
 DROP TABLE states;
 DROP TABLE countries;
diff --git accumulo-handler/src/test/queries/positive/accumulo_predicate_pushdown.q accumulo-handler/src/test/queries/positive/accumulo_predicate_pushdown.q
index 0f064afd4a..4cb93b58c2 100644
--- accumulo-handler/src/test/queries/positive/accumulo_predicate_pushdown.q
+++ accumulo-handler/src/test/queries/positive/accumulo_predicate_pushdown.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 CREATE TABLE accumulo_pushdown(key string, value string) 
 STORED BY 'org.apache.hadoop.hive.accumulo.AccumuloStorageHandler'
 WITH SERDEPROPERTIES ("accumulo.columns.mapping" = ":rowid,cf:string");
diff --git accumulo-handler/src/test/queries/positive/accumulo_queries.q accumulo-handler/src/test/queries/positive/accumulo_queries.q
index 0aceaa0750..bc93d8ac23 100644
--- accumulo-handler/src/test/queries/positive/accumulo_queries.q
+++ accumulo-handler/src/test/queries/positive/accumulo_queries.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- remove these; after HIVE-18802 is fixed
 set hive.optimize.index.filter=false;
 set hive.optimize.ppd=false;
diff --git accumulo-handler/src/test/queries/positive/accumulo_single_sourced_multi_insert.q accumulo-handler/src/test/queries/positive/accumulo_single_sourced_multi_insert.q
index f904d3fa3b..c12f9628cc 100644
--- accumulo-handler/src/test/queries/positive/accumulo_single_sourced_multi_insert.q
+++ accumulo-handler/src/test/queries/positive/accumulo_single_sourced_multi_insert.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- HIVE-4375 Single sourced multi insert consists of native and non-native table mixed throws NPE
 CREATE TABLE src_x1(key string, value string);
 CREATE TABLE src_x2(key string, value string)
diff --git contrib/src/test/queries/clientnegative/case_with_row_sequence.q contrib/src/test/queries/clientnegative/case_with_row_sequence.q
index 910ffdaa40..99220927ff 100644
--- contrib/src/test/queries/clientnegative/case_with_row_sequence.q
+++ contrib/src/test/queries/clientnegative/case_with_row_sequence.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.submitviachild=true;
 set hive.exec.submit.local.task.via.child=true;
 
diff --git contrib/src/test/queries/clientnegative/invalid_row_sequence.q contrib/src/test/queries/clientnegative/invalid_row_sequence.q
index 1de9d9e4d8..b797fefed5 100644
--- contrib/src/test/queries/clientnegative/invalid_row_sequence.q
+++ contrib/src/test/queries/clientnegative/invalid_row_sequence.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Verify that a stateful UDF cannot be used outside of the SELECT list
 
 drop temporary function row_sequence;
diff --git contrib/src/test/queries/clientnegative/udtf_explode2.q contrib/src/test/queries/clientnegative/udtf_explode2.q
index 29217eb2a8..f202d772a5 100644
--- contrib/src/test/queries/clientnegative/udtf_explode2.q
+++ contrib/src/test/queries/clientnegative/udtf_explode2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 CREATE TEMPORARY FUNCTION explode2 AS 'org.apache.hadoop.hive.contrib.udtf.example.GenericUDTFExplode2';
diff --git contrib/src/test/queries/clientpositive/dboutput.q contrib/src/test/queries/clientpositive/dboutput.q
index 2b20738b9c..4798cb2db5 100644
--- contrib/src/test/queries/clientpositive/dboutput.q
+++ contrib/src/test/queries/clientpositive/dboutput.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 ADD JAR ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
diff --git contrib/src/test/queries/clientpositive/fileformat_base64.q contrib/src/test/queries/clientpositive/fileformat_base64.q
index 20bbfa8c72..f52669f0e5 100644
--- contrib/src/test/queries/clientpositive/fileformat_base64.q
+++ contrib/src/test/queries/clientpositive/fileformat_base64.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 DROP TABLE base64_test;
diff --git contrib/src/test/queries/clientpositive/java_mr_example.q contrib/src/test/queries/clientpositive/java_mr_example.q
index 06911dc016..3b82c18e21 100644
--- contrib/src/test/queries/clientpositive/java_mr_example.q
+++ contrib/src/test/queries/clientpositive/java_mr_example.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM (
   FROM src
    MAP value, key
diff --git contrib/src/test/queries/clientpositive/lateral_view_explode2.q contrib/src/test/queries/clientpositive/lateral_view_explode2.q
index 210946e7c9..edfff44328 100644
--- contrib/src/test/queries/clientpositive/lateral_view_explode2.q
+++ contrib/src/test/queries/clientpositive/lateral_view_explode2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 CREATE TEMPORARY FUNCTION explode2 AS 'org.apache.hadoop.hive.contrib.udtf.example.GenericUDTFExplode2';
diff --git contrib/src/test/queries/clientpositive/serde_typedbytes.q contrib/src/test/queries/clientpositive/serde_typedbytes.q
index d0765fdeb0..29e3ba1ea7 100644
--- contrib/src/test/queries/clientpositive/serde_typedbytes.q
+++ contrib/src/test/queries/clientpositive/serde_typedbytes.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 drop table dest1;
diff --git contrib/src/test/queries/clientpositive/serde_typedbytes2.q contrib/src/test/queries/clientpositive/serde_typedbytes2.q
index a70955812d..069cfd4135 100644
--- contrib/src/test/queries/clientpositive/serde_typedbytes2.q
+++ contrib/src/test/queries/clientpositive/serde_typedbytes2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 drop table dest1;
diff --git contrib/src/test/queries/clientpositive/serde_typedbytes3.q contrib/src/test/queries/clientpositive/serde_typedbytes3.q
index 492c576dd7..68917e6d9a 100644
--- contrib/src/test/queries/clientpositive/serde_typedbytes3.q
+++ contrib/src/test/queries/clientpositive/serde_typedbytes3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 drop table dest1;
diff --git contrib/src/test/queries/clientpositive/serde_typedbytes4.q contrib/src/test/queries/clientpositive/serde_typedbytes4.q
index bb1f257c53..49c9d7b408 100644
--- contrib/src/test/queries/clientpositive/serde_typedbytes4.q
+++ contrib/src/test/queries/clientpositive/serde_typedbytes4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
diff --git contrib/src/test/queries/clientpositive/serde_typedbytes5.q contrib/src/test/queries/clientpositive/serde_typedbytes5.q
index f658c46487..5978be1000 100644
--- contrib/src/test/queries/clientpositive/serde_typedbytes5.q
+++ contrib/src/test/queries/clientpositive/serde_typedbytes5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 drop table dest1;
diff --git contrib/src/test/queries/clientpositive/serde_typedbytes_null.q contrib/src/test/queries/clientpositive/serde_typedbytes_null.q
index 59b757b115..404dc65340 100644
--- contrib/src/test/queries/clientpositive/serde_typedbytes_null.q
+++ contrib/src/test/queries/clientpositive/serde_typedbytes_null.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 DROP TABLE table1;
diff --git contrib/src/test/queries/clientpositive/udaf_example_avg.q contrib/src/test/queries/clientpositive/udaf_example_avg.q
index 0f69926f41..d18b197f96 100644
--- contrib/src/test/queries/clientpositive/udaf_example_avg.q
+++ contrib/src/test/queries/clientpositive/udaf_example_avg.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
diff --git contrib/src/test/queries/clientpositive/udaf_example_group_concat.q contrib/src/test/queries/clientpositive/udaf_example_group_concat.q
index 817cf32751..56e7164ae7 100644
--- contrib/src/test/queries/clientpositive/udaf_example_group_concat.q
+++ contrib/src/test/queries/clientpositive/udaf_example_group_concat.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
diff --git contrib/src/test/queries/clientpositive/udaf_example_max.q contrib/src/test/queries/clientpositive/udaf_example_max.q
index 7db78a7040..2b727916d4 100644
--- contrib/src/test/queries/clientpositive/udaf_example_max.q
+++ contrib/src/test/queries/clientpositive/udaf_example_max.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
diff --git contrib/src/test/queries/clientpositive/udaf_example_max_n.q contrib/src/test/queries/clientpositive/udaf_example_max_n.q
index 4cc2878d44..f4e5596ad2 100644
--- contrib/src/test/queries/clientpositive/udaf_example_max_n.q
+++ contrib/src/test/queries/clientpositive/udaf_example_max_n.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
diff --git contrib/src/test/queries/clientpositive/udaf_example_min.q contrib/src/test/queries/clientpositive/udaf_example_min.q
index bd942524fa..32ae4aa4b2 100644
--- contrib/src/test/queries/clientpositive/udaf_example_min.q
+++ contrib/src/test/queries/clientpositive/udaf_example_min.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
diff --git contrib/src/test/queries/clientpositive/udaf_example_min_n.q contrib/src/test/queries/clientpositive/udaf_example_min_n.q
index 12bf1ec292..ca483ebc61 100644
--- contrib/src/test/queries/clientpositive/udaf_example_min_n.q
+++ contrib/src/test/queries/clientpositive/udaf_example_min_n.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 CREATE TEMPORARY FUNCTION example_min_n AS 'org.apache.hadoop.hive.contrib.udaf.example.UDAFExampleMinN';
diff --git contrib/src/test/queries/clientpositive/udf_example_add.q contrib/src/test/queries/clientpositive/udf_example_add.q
index fb7b5c912b..e09993555b 100644
--- contrib/src/test/queries/clientpositive/udf_example_add.q
+++ contrib/src/test/queries/clientpositive/udf_example_add.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 CREATE TEMPORARY FUNCTION example_add AS 'org.apache.hadoop.hive.contrib.udf.example.UDFExampleAdd';
diff --git contrib/src/test/queries/clientpositive/udf_example_arraymapstruct.q contrib/src/test/queries/clientpositive/udf_example_arraymapstruct.q
index 2c36520abd..3ba0e49e88 100644
--- contrib/src/test/queries/clientpositive/udf_example_arraymapstruct.q
+++ contrib/src/test/queries/clientpositive/udf_example_arraymapstruct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 CREATE TEMPORARY FUNCTION example_arraysum    AS 'org.apache.hadoop.hive.contrib.udf.example.UDFExampleArraySum';
diff --git contrib/src/test/queries/clientpositive/udf_example_format.q contrib/src/test/queries/clientpositive/udf_example_format.q
index edda00b69f..e42bab7559 100644
--- contrib/src/test/queries/clientpositive/udf_example_format.q
+++ contrib/src/test/queries/clientpositive/udf_example_format.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 CREATE TEMPORARY FUNCTION example_format AS 'org.apache.hadoop.hive.contrib.udf.example.UDFExampleFormat';
diff --git contrib/src/test/queries/clientpositive/udf_row_sequence.q contrib/src/test/queries/clientpositive/udf_row_sequence.q
index 44099b15b4..7a3a386c35 100644
--- contrib/src/test/queries/clientpositive/udf_row_sequence.q
+++ contrib/src/test/queries/clientpositive/udf_row_sequence.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- The ORDER BY on the outer query will typically have no effect,
 -- but there is really no guarantee that the ordering is preserved
 -- across various SQL operators.
diff --git contrib/src/test/queries/clientpositive/udtf_explode2.q contrib/src/test/queries/clientpositive/udtf_explode2.q
index 2bd135955c..8c306cf5e5 100644
--- contrib/src/test/queries/clientpositive/udtf_explode2.q
+++ contrib/src/test/queries/clientpositive/udtf_explode2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 CREATE TEMPORARY FUNCTION explode2 AS 'org.apache.hadoop.hive.contrib.udtf.example.GenericUDTFExplode2';
diff --git contrib/src/test/queries/clientpositive/udtf_output_on_close.q contrib/src/test/queries/clientpositive/udtf_output_on_close.q
index 87aec5e586..08762aa355 100644
--- contrib/src/test/queries/clientpositive/udtf_output_on_close.q
+++ contrib/src/test/queries/clientpositive/udtf_output_on_close.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 CREATE TEMPORARY FUNCTION udtfCount2 AS 'org.apache.hadoop.hive.contrib.udtf.example.GenericUDTFCount2';
diff --git contrib/src/test/queries/clientpositive/url_hook.q contrib/src/test/queries/clientpositive/url_hook.q
index 1d564080e6..512e579fb8 100644
--- contrib/src/test/queries/clientpositive/url_hook.q
+++ contrib/src/test/queries/clientpositive/url_hook.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 SHOW TABLES 'src';
 
diff --git data/files/datasets/alltypesorc/load.hive.sql data/files/datasets/alltypesorc/load.hive.sql
new file mode 100644
index 0000000000..87f9d5691a
--- /dev/null
+++ data/files/datasets/alltypesorc/load.hive.sql
@@ -0,0 +1,21 @@
+CREATE TABLE alltypesorc(
+    ctinyint TINYINT,
+    csmallint SMALLINT,
+    cint INT,
+    cbigint BIGINT,
+    cfloat FLOAT,
+    cdouble DOUBLE,
+    cstring1 STRING,
+    cstring2 STRING,
+    ctimestamp1 TIMESTAMP,
+    ctimestamp2 TIMESTAMP,
+    cboolean1 BOOLEAN,
+    cboolean2 BOOLEAN)
+    STORED AS ORC;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/alltypesorc"
+OVERWRITE INTO TABLE alltypesorc;
+
+ANALYZE TABLE alltypesorc COMPUTE STATISTICS;
+
+ANALYZE TABLE alltypesorc COMPUTE STATISTICS FOR COLUMNS ctinyint,csmallint,cint,cbigint,cfloat,cdouble,cstring1,cstring2,ctimestamp1,ctimestamp2,cboolean1,cboolean2;
diff --git data/files/datasets/alltypesparquet/load.hive.sql data/files/datasets/alltypesparquet/load.hive.sql
new file mode 100644
index 0000000000..45d3616ea2
--- /dev/null
+++ data/files/datasets/alltypesparquet/load.hive.sql
@@ -0,0 +1,39 @@
+CREATE TABLE alltypesorc_to_parquet(
+    ctinyint TINYINT,
+    csmallint SMALLINT,
+    cint INT,
+    cbigint BIGINT,
+    cfloat FLOAT,
+    cdouble DOUBLE,
+    cstring1 STRING,
+    cstring2 STRING,
+    ctimestamp1 TIMESTAMP,
+    ctimestamp2 TIMESTAMP,
+    cboolean1 BOOLEAN,
+    cboolean2 BOOLEAN)
+    STORED AS ORC;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/alltypesorc"
+OVERWRITE INTO TABLE alltypesorc_to_parquet;
+
+CREATE TABLE alltypesparquet(
+    ctinyint TINYINT,
+    csmallint SMALLINT,
+    cint INT,
+    cbigint BIGINT,
+    cfloat FLOAT,
+    cdouble DOUBLE,
+    cstring1 STRING,
+    cstring2 STRING,
+    ctimestamp1 TIMESTAMP,
+    ctimestamp2 TIMESTAMP,
+    cboolean1 BOOLEAN,
+    cboolean2 BOOLEAN)
+    STORED AS PARQUET;
+
+INSERT OVERWRITE TABLE alltypesparquet SELECT * FROM alltypesorc_to_parquet;
+
+ANALYZE TABLE alltypesparquet COMPUTE STATISTICS;
+
+ANALYZE TABLE alltypesparquet COMPUTE STATISTICS FOR COLUMNS ctinyint,csmallint,cint,cbigint,cfloat,cdouble,cstring1,cstring2,ctimestamp1,ctimestamp2,cboolean1,cboolean2;
+DROP TABLE alltypesorc_to_parquet;
diff --git data/files/datasets/cbo_t1/load.hive.sql data/files/datasets/cbo_t1/load.hive.sql
new file mode 100644
index 0000000000..257f0bd7e1
--- /dev/null
+++ data/files/datasets/cbo_t1/load.hive.sql
@@ -0,0 +1,8 @@
+set hive.cbo.enable=true;
+
+create table cbo_t1(key string, value string, c_int int, c_float float, c_boolean boolean)  partitioned by (dt string) row format delimited fields terminated by ',' STORED AS TEXTFILE;
+
+load data local inpath '${hiveconf:test.data.dir}/cbo_t1.txt' into table cbo_t1 partition (dt='2014');
+
+analyze table cbo_t1 partition (dt) compute statistics;
+analyze table cbo_t1 compute statistics for columns key, value, c_int, c_float, c_boolean;
diff --git data/files/datasets/cbo_t2/load.hive.sql data/files/datasets/cbo_t2/load.hive.sql
new file mode 100644
index 0000000000..293bae2f10
--- /dev/null
+++ data/files/datasets/cbo_t2/load.hive.sql
@@ -0,0 +1,8 @@
+set hive.cbo.enable=true;
+
+create table cbo_t2(key string, value string, c_int int, c_float float, c_boolean boolean)  partitioned by (dt string) row format delimited fields terminated by ',' STORED AS TEXTFILE;
+
+load data local inpath '${hiveconf:test.data.dir}/cbo_t2.txt' into table cbo_t2 partition (dt='2014');
+
+analyze table cbo_t2 partition (dt) compute statistics;
+analyze table cbo_t2 compute statistics for columns key, value, c_int, c_float, c_boolean;
diff --git data/files/datasets/cbo_t3/load.hive.sql data/files/datasets/cbo_t3/load.hive.sql
new file mode 100644
index 0000000000..6c7c3e0386
--- /dev/null
+++ data/files/datasets/cbo_t3/load.hive.sql
@@ -0,0 +1,8 @@
+set hive.cbo.enable=true;
+
+create table cbo_t3(key string, value string, c_int int, c_float float, c_boolean boolean)  row format delimited fields terminated by ',' STORED AS TEXTFILE;
+
+load data local inpath '${hiveconf:test.data.dir}/cbo_t3.txt' into table cbo_t3;
+
+analyze table cbo_t3 compute statistics;
+analyze table cbo_t3 compute statistics for columns key, value, c_int, c_float, c_boolean;
diff --git data/files/datasets/lineitem/load.hive.sql data/files/datasets/lineitem/load.hive.sql
new file mode 100644
index 0000000000..ab2f5fbaab
--- /dev/null
+++ data/files/datasets/lineitem/load.hive.sql
@@ -0,0 +1,23 @@
+CREATE TABLE lineitem (L_ORDERKEY      INT,
+                                L_PARTKEY       INT,
+                                L_SUPPKEY       INT,
+                                L_LINENUMBER    INT,
+                                L_QUANTITY      DOUBLE,
+                                L_EXTENDEDPRICE DOUBLE,
+                                L_DISCOUNT      DOUBLE,
+                                L_TAX           DOUBLE,
+                                L_RETURNFLAG    STRING,
+                                L_LINESTATUS    STRING,
+                                l_shipdate      STRING,
+                                L_COMMITDATE    STRING,
+                                L_RECEIPTDATE   STRING,
+                                L_SHIPINSTRUCT  STRING,
+                                L_SHIPMODE      STRING,
+                                L_COMMENT       STRING)
+ROW FORMAT DELIMITED
+FIELDS TERMINATED BY '|';
+
+LOAD DATA LOCAL INPATH '${hiveconf:test.data.dir}/lineitem.txt' OVERWRITE INTO TABLE lineitem;
+
+analyze table lineitem compute statistics;
+analyze table lineitem compute statistics for columns;
diff --git data/files/datasets/part/load.hive.sql data/files/datasets/part/load.hive.sql
new file mode 100644
index 0000000000..c24b505c98
--- /dev/null
+++ data/files/datasets/part/load.hive.sql
@@ -0,0 +1,16 @@
+CREATE TABLE part(
+    p_partkey INT,
+    p_name STRING,
+    p_mfgr STRING,
+    p_brand STRING,
+    p_type STRING,
+    p_size INT,
+    p_container STRING,
+    p_retailprice DOUBLE,
+    p_comment STRING
+);
+
+LOAD DATA LOCAL INPATH '${hiveconf:test.data.dir}/part_tiny.txt' overwrite into table part;
+
+analyze table part compute statistics;
+analyze table part compute statistics for columns;
diff --git data/files/datasets/src/load.hive.sql data/files/datasets/src/load.hive.sql
new file mode 100644
index 0000000000..eca7e0789f
--- /dev/null
+++ data/files/datasets/src/load.hive.sql
@@ -0,0 +1,7 @@
+CREATE TABLE src (key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt" INTO TABLE src;
+
+ANALYZE TABLE src COMPUTE STATISTICS;
+
+ANALYZE TABLE src COMPUTE STATISTICS FOR COLUMNS key,value;
diff --git data/files/datasets/src1/load.hive.sql data/files/datasets/src1/load.hive.sql
new file mode 100644
index 0000000000..b64d45fb81
--- /dev/null
+++ data/files/datasets/src1/load.hive.sql
@@ -0,0 +1,7 @@
+CREATE TABLE src1 (key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv3.txt" INTO TABLE src1;
+
+ANALYZE TABLE src1 COMPUTE STATISTICS;
+
+ANALYZE TABLE src1 COMPUTE STATISTICS FOR COLUMNS key,value;
diff --git data/files/datasets/src_cbo/load.hive.sql data/files/datasets/src_cbo/load.hive.sql
new file mode 100644
index 0000000000..5bd8c983b5
--- /dev/null
+++ data/files/datasets/src_cbo/load.hive.sql
@@ -0,0 +1,8 @@
+set hive.cbo.enable=true;
+
+CREATE TABLE src_cbo (key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt" INTO TABLE src_cbo;
+
+analyze table src_cbo compute statistics;
+analyze table src_cbo compute statistics for columns;
diff --git data/files/datasets/src_hbase/load.hive.sql data/files/datasets/src_hbase/load.hive.sql
new file mode 100644
index 0000000000..5c7b5b7380
--- /dev/null
+++ data/files/datasets/src_hbase/load.hive.sql
@@ -0,0 +1,14 @@
+CREATE TABLE src_hbase_tmp (key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt" INTO TABLE src_hbase_tmp;
+
+ANALYZE TABLE src_hbase_tmp COMPUTE STATISTICS;
+
+ANALYZE TABLE src_hbase_tmp COMPUTE STATISTICS FOR COLUMNS key,value;
+
+CREATE TABLE src_hbase (key INT, value STRING)
+STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
+WITH SERDEPROPERTIES ('hbase.columns.mapping' = ':key,cf:val')
+TBLPROPERTIES ('hbase.table.name' = 'src_hbase');
+
+INSERT OVERWRITE TABLE src_hbase SELECT * FROM src_hbase_tmp
diff --git data/files/datasets/src_json/load.hive.sql data/files/datasets/src_json/load.hive.sql
new file mode 100644
index 0000000000..13e0b96269
--- /dev/null
+++ data/files/datasets/src_json/load.hive.sql
@@ -0,0 +1,7 @@
+CREATE TABLE src_json (json STRING COMMENT 'default') STORED AS TEXTFILE;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/json.txt" INTO TABLE src_json;
+
+ANALYZE TABLE src_json COMPUTE STATISTICS;
+
+ANALYZE TABLE src_json COMPUTE STATISTICS FOR COLUMNS json;
diff --git data/files/datasets/src_sequencefile/load.hive.sql data/files/datasets/src_sequencefile/load.hive.sql
new file mode 100644
index 0000000000..6f10562caa
--- /dev/null
+++ data/files/datasets/src_sequencefile/load.hive.sql
@@ -0,0 +1,7 @@
+CREATE TABLE src_sequencefile (key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS SEQUENCEFILE;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.seq" INTO TABLE src_sequencefile;
+
+ANALYZE TABLE src_sequencefile COMPUTE STATISTICS;
+
+ANALYZE TABLE src_sequencefile COMPUTE STATISTICS FOR COLUMNS key,value;
diff --git data/files/datasets/src_thrift/load.hive.sql data/files/datasets/src_thrift/load.hive.sql
new file mode 100644
index 0000000000..1e1f1b5c82
--- /dev/null
+++ data/files/datasets/src_thrift/load.hive.sql
@@ -0,0 +1,10 @@
+CREATE TABLE src_thrift
+ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.thrift.ThriftDeserializer'
+WITH SERDEPROPERTIES (
+  'serialization.class' = 'org.apache.hadoop.hive.serde2.thrift.test.Complex',
+  'serialization.format' = 'org.apache.thrift.protocol.TBinaryProtocol')
+STORED AS SEQUENCEFILE;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/complex.seq" INTO TABLE src_thrift;
+
+ANALYZE TABLE src_thrift COMPUTE STATISTICS;
diff --git data/files/datasets/srcbucket/load.hive.sql data/files/datasets/srcbucket/load.hive.sql
new file mode 100644
index 0000000000..4008115fe3
--- /dev/null
+++ data/files/datasets/srcbucket/load.hive.sql
@@ -0,0 +1,13 @@
+CREATE TABLE srcbucket_tmp (key INT, value STRING) STORED AS TEXTFILE;
+CREATE TABLE srcbucket (key INT, value STRING)
+CLUSTERED BY (key) INTO 2 BUCKETS
+STORED AS TEXTFILE;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bucketed_files/000000_0" INTO TABLE srcbucket_tmp;
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bucketed_files/000001_0" INTO TABLE srcbucket_tmp;
+INSERT INTO srcbucket SELECT * FROM srcbucket_tmp;
+DROP TABLE srcbucket_tmp;
+
+ANALYZE TABLE srcbucket COMPUTE STATISTICS;
+
+ANALYZE TABLE srcbucket COMPUTE STATISTICS FOR COLUMNS key,value;
diff --git data/files/datasets/srcbucket2/load.hive.sql data/files/datasets/srcbucket2/load.hive.sql
new file mode 100644
index 0000000000..de00b2fbb3
--- /dev/null
+++ data/files/datasets/srcbucket2/load.hive.sql
@@ -0,0 +1,15 @@
+CREATE TABLE srcbucket_tmp (key INT, value STRING);
+CREATE TABLE srcbucket2 (key INT, value STRING)
+CLUSTERED BY (key) INTO 4 BUCKETS
+STORED AS TEXTFILE;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bmj/000000_0" INTO TABLE srcbucket_tmp;
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bmj/000001_0" INTO TABLE srcbucket_tmp;
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bmj/000002_0" INTO TABLE srcbucket_tmp;
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bmj/000003_0" INTO TABLE srcbucket_tmp;
+INSERT INTO srcbucket2 SELECT * FROM srcbucket_tmp;
+DROP TABLE srcbucket_tmp;
+
+ANALYZE TABLE srcbucket2 COMPUTE STATISTICS;
+
+ANALYZE TABLE srcbucket2 COMPUTE STATISTICS FOR COLUMNS key,value;
diff --git data/files/datasets/srcpart/load.hive.sql data/files/datasets/srcpart/load.hive.sql
new file mode 100644
index 0000000000..f94d2a36e5
--- /dev/null
+++ data/files/datasets/srcpart/load.hive.sql
@@ -0,0 +1,19 @@
+CREATE TABLE srcpart (key STRING COMMENT 'default', value STRING COMMENT 'default')
+PARTITIONED BY (ds STRING, hr STRING)
+STORED AS TEXTFILE;
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
+OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-08", hr="11");
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
+OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-08", hr="12");
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
+OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-09", hr="11");
+
+LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
+OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-09", hr="12");
+
+ANALYZE TABLE srcpart PARTITION(ds, hr) COMPUTE STATISTICS;
+
+ANALYZE TABLE srcpart PARTITION(ds, hr) COMPUTE STATISTICS FOR COLUMNS key,value;
diff --git data/scripts/q_test_druid_init.sql data/scripts/q_test_druid_init.sql
index ee025f1549..e69de29bb2 100644
--- data/scripts/q_test_druid_init.sql
+++ data/scripts/q_test_druid_init.sql
@@ -1,29 +0,0 @@
-set hive.stats.dbclass=fs;
---
--- Table alltypesorc
---
-DROP TABLE IF EXISTS alltypesorc;
-CREATE TABLE alltypesorc(
-    ctinyint TINYINT,
-    csmallint SMALLINT,
-    cint INT,
-    cbigint BIGINT,
-    cfloat FLOAT,
-    cdouble DOUBLE,
-    cstring1 STRING,
-    cstring2 STRING,
-    ctimestamp1 TIMESTAMP,
-    ctimestamp2 TIMESTAMP,
-    cboolean1 BOOLEAN,
-    cboolean2 BOOLEAN)
-    STORED AS ORC;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/alltypesorc"
-OVERWRITE INTO  TABLE alltypesorc;
-
-ANALYZE TABLE alltypesorc COMPUTE STATISTICS;
-
-ANALYZE TABLE alltypesorc COMPUTE STATISTICS FOR COLUMNS ctinyint,csmallint,cint,cbigint,cfloat,cdouble,cstring1,cstring2,ctimestamp1,ctimestamp2,cboolean1,cboolean2;
-
--- Druid Table
-
diff --git data/scripts/q_test_init.sql data/scripts/q_test_init.sql
index 5d36b6f7b9..a269c55302 100644
--- data/scripts/q_test_init.sql
+++ data/scripts/q_test_init.sql
@@ -1,224 +1,4 @@
 set hive.stats.dbclass=fs;
---
--- Table src
---
-DROP TABLE IF EXISTS src;
-
-CREATE TABLE src (key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt" INTO TABLE src;
-
-ANALYZE TABLE src COMPUTE STATISTICS;
-
-ANALYZE TABLE src COMPUTE STATISTICS FOR COLUMNS key,value;
-
---
--- Table src1
---
-DROP TABLE IF EXISTS src1;
-
-CREATE TABLE src1 (key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv3.txt" INTO TABLE src1;
-
-ANALYZE TABLE src1 COMPUTE STATISTICS;
-
-ANALYZE TABLE src1 COMPUTE STATISTICS FOR COLUMNS key,value;
-
---
--- Table src_json
---
-DROP TABLE IF EXISTS src_json;
-
-CREATE TABLE src_json (json STRING COMMENT 'default') STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/json.txt" INTO TABLE src_json;
-
-ANALYZE TABLE src_json COMPUTE STATISTICS;
-
-ANALYZE TABLE src_json COMPUTE STATISTICS FOR COLUMNS json;
-
---
--- Table src_sequencefile
---
-DROP TABLE IF EXISTS src_sequencefile;
-
-CREATE TABLE src_sequencefile (key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS SEQUENCEFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.seq" INTO TABLE src_sequencefile;
-
-ANALYZE TABLE src_sequencefile COMPUTE STATISTICS;
-
-ANALYZE TABLE src_sequencefile COMPUTE STATISTICS FOR COLUMNS key,value;
-
---
--- Table src_thrift
---
-DROP TABLE IF EXISTS src_thrift;
-
-CREATE TABLE src_thrift
-ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.thrift.ThriftDeserializer'
-WITH SERDEPROPERTIES (
-  'serialization.class' = 'org.apache.hadoop.hive.serde2.thrift.test.Complex',
-  'serialization.format' = 'org.apache.thrift.protocol.TBinaryProtocol')
-STORED AS SEQUENCEFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/complex.seq" INTO TABLE src_thrift;
-
-ANALYZE TABLE src_thrift COMPUTE STATISTICS;
-
---
--- Table srcbucket
---
-DROP TABLE IF EXISTS srcbucket_tmp;
-DROP TABLE IF EXISTS srcbucket;
-
-CREATE TABLE srcbucket_tmp (key INT, value STRING) STORED AS TEXTFILE;
-CREATE TABLE srcbucket (key INT, value STRING)
-CLUSTERED BY (key) INTO 2 BUCKETS
-STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bucketed_files/000000_0" INTO TABLE srcbucket_tmp;
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bucketed_files/000001_0" INTO TABLE srcbucket_tmp;
-INSERT INTO srcbucket SELECT * FROM srcbucket_tmp;
-DROP TABLE srcbucket_tmp;
-
-ANALYZE TABLE srcbucket COMPUTE STATISTICS;
-
-ANALYZE TABLE srcbucket COMPUTE STATISTICS FOR COLUMNS key,value;
-
---
--- Table srcbucket2
---
-DROP TABLE IF EXISTS srcbucket_tmp;
-DROP TABLE IF EXISTS srcbucket2;
-
-CREATE TABLE srcbucket_tmp (key INT, value STRING);
-CREATE TABLE srcbucket2 (key INT, value STRING)
-CLUSTERED BY (key) INTO 4 BUCKETS
-STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bmj/000000_0" INTO TABLE srcbucket_tmp;
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bmj/000001_0" INTO TABLE srcbucket_tmp;
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bmj/000002_0" INTO TABLE srcbucket_tmp;
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/bmj/000003_0" INTO TABLE srcbucket_tmp;
-INSERT INTO srcbucket2 SELECT * FROM srcbucket_tmp;
-DROP TABLE srcbucket_tmp;
-
-ANALYZE TABLE srcbucket2 COMPUTE STATISTICS;
-
-ANALYZE TABLE srcbucket2 COMPUTE STATISTICS FOR COLUMNS key,value;
-
---
--- Table srcpart
---
-DROP TABLE IF EXISTS srcpart;
-
-CREATE TABLE srcpart (key STRING COMMENT 'default', value STRING COMMENT 'default')
-PARTITIONED BY (ds STRING, hr STRING)
-STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-08", hr="11");
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-08", hr="12");
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-09", hr="11");
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-09", hr="12");
-
-ANALYZE TABLE srcpart PARTITION(ds, hr) COMPUTE STATISTICS;
-
-ANALYZE TABLE srcpart PARTITION(ds, hr) COMPUTE STATISTICS FOR COLUMNS key,value;
-
---
--- Table alltypesorc
---
-DROP TABLE IF EXISTS alltypesorc;
-CREATE TABLE alltypesorc(
-    ctinyint TINYINT,
-    csmallint SMALLINT,
-    cint INT,
-    cbigint BIGINT,
-    cfloat FLOAT,
-    cdouble DOUBLE,
-    cstring1 STRING,
-    cstring2 STRING,
-    ctimestamp1 TIMESTAMP,
-    ctimestamp2 TIMESTAMP,
-    cboolean1 BOOLEAN,
-    cboolean2 BOOLEAN)
-    STORED AS ORC;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/alltypesorc"
-OVERWRITE INTO  TABLE alltypesorc;
-
-ANALYZE TABLE alltypesorc COMPUTE STATISTICS;
-
-ANALYZE TABLE alltypesorc COMPUTE STATISTICS FOR COLUMNS ctinyint,csmallint,cint,cbigint,cfloat,cdouble,cstring1,cstring2,ctimestamp1,ctimestamp2,cboolean1,cboolean2;
-
---
--- Table alltypesparquet
---
-DROP TABLE IF EXISTS alltypesparquet;
-CREATE TABLE alltypesparquet(
-    ctinyint TINYINT,
-    csmallint SMALLINT,
-    cint INT,
-    cbigint BIGINT,
-    cfloat FLOAT,
-    cdouble DOUBLE,
-    cstring1 STRING,
-    cstring2 STRING,
-    ctimestamp1 TIMESTAMP,
-    ctimestamp2 TIMESTAMP,
-    cboolean1 BOOLEAN,
-    cboolean2 BOOLEAN)
-    STORED AS PARQUET;
-
-INSERT OVERWRITE TABLE alltypesparquet SELECT * FROM alltypesorc;
-
-ANALYZE TABLE alltypesparquet COMPUTE STATISTICS;
-
-ANALYZE TABLE alltypesparquet COMPUTE STATISTICS FOR COLUMNS ctinyint,csmallint,cint,cbigint,cfloat,cdouble,cstring1,cstring2,ctimestamp1,ctimestamp2,cboolean1,cboolean2;
-
-
---
--- Table primitives
---
-DROP TABLE IF EXISTS primitives;
-CREATE TABLE primitives (
-  id INT COMMENT 'default',
-  bool_col BOOLEAN COMMENT 'default',
-  tinyint_col TINYINT COMMENT 'default',
-  smallint_col SMALLINT COMMENT 'default',
-  int_col INT COMMENT 'default',
-  bigint_col BIGINT COMMENT 'default',
-  float_col FLOAT COMMENT 'default',
-  double_col DOUBLE COMMENT 'default',
-  date_string_col STRING COMMENT 'default',
-  string_col STRING COMMENT 'default',
-  timestamp_col TIMESTAMP COMMENT 'default')
-PARTITIONED BY (year INT COMMENT 'default', month INT COMMENT 'default')
-ROW FORMAT DELIMITED
-  FIELDS TERMINATED BY ','
-  ESCAPED BY '\\'
-STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/types/primitives/090101.txt"
-OVERWRITE INTO TABLE primitives PARTITION(year=2009, month=1);
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/types/primitives/090201.txt"
-OVERWRITE INTO TABLE primitives PARTITION(year=2009, month=2);
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/types/primitives/090301.txt"
-OVERWRITE INTO TABLE primitives PARTITION(year=2009, month=3);
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/types/primitives/090401.txt"
-OVERWRITE INTO TABLE primitives PARTITION(year=2009, month=4);
 
 --
 -- Function qtest_get_java_boolean
@@ -278,78 +58,5 @@ STORED AS
 INPUTFORMAT 'org.apache.hadoop.mapred.SequenceFileInputFormat'
 OUTPUTFORMAT 'org.apache.hadoop.mapred.SequenceFileOutputFormat';
 
-
---
--- CBO tables
---
-
-drop table if exists cbo_t1;
-drop table if exists cbo_t2;
-drop table if exists cbo_t3;
-drop table if exists src_cbo;
-drop table if exists part;
-drop table if exists lineitem;
-
-set hive.cbo.enable=true;
-
-create table cbo_t1(key string, value string, c_int int, c_float float, c_boolean boolean)  partitioned by (dt string) row format delimited fields terminated by ',' STORED AS TEXTFILE;
-create table cbo_t2(key string, value string, c_int int, c_float float, c_boolean boolean)  partitioned by (dt string) row format delimited fields terminated by ',' STORED AS TEXTFILE;
-create table cbo_t3(key string, value string, c_int int, c_float float, c_boolean boolean)  row format delimited fields terminated by ',' STORED AS TEXTFILE;
-
-load data local inpath '${hiveconf:test.data.dir}/cbo_t1.txt' into table cbo_t1 partition (dt='2014');
-load data local inpath '${hiveconf:test.data.dir}/cbo_t2.txt' into table cbo_t2 partition (dt='2014');
-load data local inpath '${hiveconf:test.data.dir}/cbo_t3.txt' into table cbo_t3;
-
-CREATE TABLE part(
-    p_partkey INT,
-    p_name STRING,
-    p_mfgr STRING,
-    p_brand STRING,
-    p_type STRING,
-    p_size INT,
-    p_container STRING,
-    p_retailprice DOUBLE,
-    p_comment STRING
-);
-
-LOAD DATA LOCAL INPATH '${hiveconf:test.data.dir}/part_tiny.txt' overwrite into table part;
-
-CREATE TABLE lineitem (L_ORDERKEY      INT,
-                                L_PARTKEY       INT,
-                                L_SUPPKEY       INT,
-                                L_LINENUMBER    INT,
-                                L_QUANTITY      DOUBLE,
-                                L_EXTENDEDPRICE DOUBLE,
-                                L_DISCOUNT      DOUBLE,
-                                L_TAX           DOUBLE,
-                                L_RETURNFLAG    STRING,
-                                L_LINESTATUS    STRING,
-                                l_shipdate      STRING,
-                                L_COMMITDATE    STRING,
-                                L_RECEIPTDATE   STRING,
-                                L_SHIPINSTRUCT  STRING,
-                                L_SHIPMODE      STRING,
-                                L_COMMENT       STRING)
-ROW FORMAT DELIMITED
-FIELDS TERMINATED BY '|';
-
-LOAD DATA LOCAL INPATH '${hiveconf:test.data.dir}/lineitem.txt' OVERWRITE INTO TABLE lineitem;
-
-create table src_cbo as select * from src;
-
-
-analyze table cbo_t1 partition (dt) compute statistics;
-analyze table cbo_t1 compute statistics for columns key, value, c_int, c_float, c_boolean;
-analyze table cbo_t2 partition (dt) compute statistics;
-analyze table cbo_t2 compute statistics for columns key, value, c_int, c_float, c_boolean;
-analyze table cbo_t3 compute statistics;
-analyze table cbo_t3 compute statistics for columns key, value, c_int, c_float, c_boolean;
-analyze table src_cbo compute statistics;
-analyze table src_cbo compute statistics for columns;
-analyze table part compute statistics;
-analyze table part compute statistics for columns;
-analyze table lineitem compute statistics;
-analyze table lineitem compute statistics for columns;
-
 reset;
 set hive.stats.dbclass=fs;
diff --git data/scripts/q_test_init_compare.sql data/scripts/q_test_init_compare.sql
index c554250291..e69de29bb2 100644
--- data/scripts/q_test_init_compare.sql
+++ data/scripts/q_test_init_compare.sql
@@ -1,26 +0,0 @@
-set hive.stats.dbclass=fs;
---
--- Table alltypesorc
---
-DROP TABLE IF EXISTS alltypesorc;
-CREATE TABLE alltypesorc(
-    ctinyint TINYINT,
-    csmallint SMALLINT,
-    cint INT,
-    cbigint BIGINT,
-    cfloat FLOAT,
-    cdouble DOUBLE,
-    cstring1 STRING,
-    cstring2 STRING,
-    ctimestamp1 TIMESTAMP,
-    ctimestamp2 TIMESTAMP,
-    cboolean1 BOOLEAN,
-    cboolean2 BOOLEAN)
-    STORED AS ORC;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/alltypesorc"
-OVERWRITE INTO  TABLE alltypesorc;
-
-ANALYZE TABLE alltypesorc COMPUTE STATISTICS;
-
-ANALYZE TABLE alltypesorc COMPUTE STATISTICS FOR COLUMNS ctinyint,csmallint,cint,cbigint,cfloat,cdouble,cstring1,cstring2,ctimestamp1,ctimestamp2,cboolean1,cboolean2;
diff --git data/scripts/q_test_init_contrib.sql data/scripts/q_test_init_contrib.sql
index b7bb5abaae..e69de29bb2 100644
--- data/scripts/q_test_init_contrib.sql
+++ data/scripts/q_test_init_contrib.sql
@@ -1,29 +0,0 @@
-set hive.stats.dbclass=fs;
---
--- Table src
---
-DROP TABLE IF EXISTS src;
-
-CREATE TABLE src (key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt" INTO TABLE src;
-
-ANALYZE TABLE src COMPUTE STATISTICS;
-
-ANALYZE TABLE src COMPUTE STATISTICS FOR COLUMNS key,value;
-
---
--- Table src_thrift
---
-DROP TABLE IF EXISTS src_thrift;
-
-CREATE TABLE src_thrift
-ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.thrift.ThriftDeserializer'
-WITH SERDEPROPERTIES (
-  'serialization.class' = 'org.apache.hadoop.hive.serde2.thrift.test.Complex',
-  'serialization.format' = 'org.apache.thrift.protocol.TBinaryProtocol')
-STORED AS SEQUENCEFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/complex.seq" INTO TABLE src_thrift;
-
-ANALYZE TABLE src_thrift COMPUTE STATISTICS;
diff --git data/scripts/q_test_init_for_minimr.sql data/scripts/q_test_init_for_minimr.sql
index ab2e1d7098..e69de29bb2 100644
--- data/scripts/q_test_init_for_minimr.sql
+++ data/scripts/q_test_init_for_minimr.sql
@@ -1,48 +0,0 @@
---
--- Table src
---
-DROP TABLE IF EXISTS src;
-
-CREATE TABLE src (key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt" INTO TABLE src;
-
---
--- Table srcpart
---
-DROP TABLE IF EXISTS srcpart;
-
-CREATE TABLE srcpart (key STRING COMMENT 'default', value STRING COMMENT 'default')
-PARTITIONED BY (ds STRING, hr STRING)
-STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-08", hr="11");
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-08", hr="12");
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-09", hr="11");
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-09", hr="12");
-
---
--- Table part
---
-drop table if exists part;
-
-CREATE TABLE part(
-    p_partkey INT,
-    p_name STRING,
-    p_mfgr STRING,
-    p_brand STRING,
-    p_type STRING,
-    p_size INT,
-    p_container STRING,
-    p_retailprice DOUBLE,
-    p_comment STRING
-);
-
-LOAD DATA LOCAL INPATH '../../data/files/part_tiny.txt' overwrite into table part;
diff --git data/scripts/q_test_init_src.sql data/scripts/q_test_init_src.sql
index 765d6c7269..e69de29bb2 100644
--- data/scripts/q_test_init_src.sql
+++ data/scripts/q_test_init_src.sql
@@ -1,9 +0,0 @@
-DROP TABLE IF EXISTS src PURGE;
-
-CREATE TABLE src(key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt" OVERWRITE INTO TABLE src;
-
-ANALYZE TABLE src COMPUTE STATISTICS;
-
-ANALYZE TABLE src COMPUTE STATISTICS FOR COLUMNS key,value;
diff --git data/scripts/q_test_init_src_with_stats.sql data/scripts/q_test_init_src_with_stats.sql
index 765d6c7269..e69de29bb2 100644
--- data/scripts/q_test_init_src_with_stats.sql
+++ data/scripts/q_test_init_src_with_stats.sql
@@ -1,9 +0,0 @@
-DROP TABLE IF EXISTS src PURGE;
-
-CREATE TABLE src(key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt" OVERWRITE INTO TABLE src;
-
-ANALYZE TABLE src COMPUTE STATISTICS;
-
-ANALYZE TABLE src COMPUTE STATISTICS FOR COLUMNS key,value;
diff --git data/scripts/q_test_init_tez.sql data/scripts/q_test_init_tez.sql
index 4e6176b836..e69de29bb2 100644
--- data/scripts/q_test_init_tez.sql
+++ data/scripts/q_test_init_tez.sql
@@ -1,78 +0,0 @@
-set hive.stats.dbclass=fs;
-
---
--- Table src
---
-DROP TABLE IF EXISTS src;
-
-CREATE TABLE src(key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt" OVERWRITE INTO TABLE src;
-
-ANALYZE TABLE src COMPUTE STATISTICS;
-
-ANALYZE TABLE src COMPUTE STATISTICS FOR COLUMNS key,value;
-
---
--- Table src1
---
-DROP TABLE IF EXISTS src1;
-
-CREATE TABLE src1 (key STRING COMMENT 'default', value STRING COMMENT 'default') STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv3.txt" INTO TABLE src1;
-
-ANALYZE TABLE src1 COMPUTE STATISTICS;
-
-ANALYZE TABLE src1 COMPUTE STATISTICS FOR COLUMNS key,value;
-
---
--- Table srcpart
---
-DROP TABLE IF EXISTS srcpart;
-
-CREATE TABLE srcpart (key STRING COMMENT 'default', value STRING COMMENT 'default')
-PARTITIONED BY (ds STRING, hr STRING)
-STORED AS TEXTFILE;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-08", hr="11");
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-08", hr="12");
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-09", hr="11");
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/kv1.txt"
-OVERWRITE INTO TABLE srcpart PARTITION (ds="2008-04-09", hr="12");
-
-ANALYZE TABLE srcpart PARTITION(ds, hr) COMPUTE STATISTICS;
-
-ANALYZE TABLE srcpart PARTITION(ds, hr) COMPUTE STATISTICS FOR COLUMNS key,value;
-
---
--- Table alltypesorc
---
-DROP TABLE IF EXISTS alltypesorc;
-CREATE TABLE alltypesorc(
-    ctinyint TINYINT,
-    csmallint SMALLINT,
-    cint INT,
-    cbigint BIGINT,
-    cfloat FLOAT,
-    cdouble DOUBLE,
-    cstring1 STRING,
-    cstring2 STRING,
-    ctimestamp1 TIMESTAMP,
-    ctimestamp2 TIMESTAMP,
-    cboolean1 BOOLEAN,
-    cboolean2 BOOLEAN)
-    STORED AS ORC;
-
-LOAD DATA LOCAL INPATH "${hiveconf:test.data.dir}/alltypesorc"
-OVERWRITE INTO  TABLE alltypesorc;
-
-ANALYZE TABLE alltypesorc COMPUTE STATISTICS;
-
-ANALYZE TABLE alltypesorc COMPUTE STATISTICS FOR COLUMNS ctinyint,csmallint,cint,cbigint,cfloat,cdouble,cstring1,cstring2,ctimestamp1,ctimestamp2,cboolean1,cboolean2;
diff --git hbase-handler/src/test/queries/negative/generatehfiles_require_family_path.q hbase-handler/src/test/queries/negative/generatehfiles_require_family_path.q
index 6844fbc94c..e6ff587791 100644
--- hbase-handler/src/test/queries/negative/generatehfiles_require_family_path.q
+++ hbase-handler/src/test/queries/negative/generatehfiles_require_family_path.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- -*- mode:sql -*-
 
 DROP TABLE IF EXISTS hbase_bulk;
diff --git hbase-handler/src/test/queries/positive/external_table_ppd.q hbase-handler/src/test/queries/positive/external_table_ppd.q
index fbef4bb578..c6f80cbcac 100644
--- hbase-handler/src/test/queries/positive/external_table_ppd.q
+++ hbase-handler/src/test/queries/positive/external_table_ppd.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE t_hbase;
 
 CREATE TABLE t_hbase(key STRING,
diff --git hbase-handler/src/test/queries/positive/hbase_binary_map_queries.q hbase-handler/src/test/queries/positive/hbase_binary_map_queries.q
index 255a2c74d2..7d9e16e0f0 100644
--- hbase-handler/src/test/queries/positive/hbase_binary_map_queries.q
+++ hbase-handler/src/test/queries/positive/hbase_binary_map_queries.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE hbase_src;
 
 CREATE TABLE hbase_src(key STRING,
diff --git hbase-handler/src/test/queries/positive/hbase_binary_map_queries_prefix.q hbase-handler/src/test/queries/positive/hbase_binary_map_queries_prefix.q
index 9ff4366753..c20521020b 100644
--- hbase-handler/src/test/queries/positive/hbase_binary_map_queries_prefix.q
+++ hbase-handler/src/test/queries/positive/hbase_binary_map_queries_prefix.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE hbase_src;
 
 CREATE TABLE hbase_src(key STRING,
diff --git hbase-handler/src/test/queries/positive/hbase_binary_storage_queries.q hbase-handler/src/test/queries/positive/hbase_binary_storage_queries.q
index b048871190..86ead914c4 100644
--- hbase-handler/src/test/queries/positive/hbase_binary_storage_queries.q
+++ hbase-handler/src/test/queries/positive/hbase_binary_storage_queries.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE t_hbase;
 
 CREATE TABLE t_hbase(key STRING,
diff --git hbase-handler/src/test/queries/positive/hbase_bulk.q hbase-handler/src/test/queries/positive/hbase_bulk.q
index 475aafc1ce..d2e62dc23a 100644
--- hbase-handler/src/test/queries/positive/hbase_bulk.q
+++ hbase-handler/src/test/queries/positive/hbase_bulk.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table hbsort;
 drop table hbpartition;
 
diff --git hbase-handler/src/test/queries/positive/hbase_custom_key.q hbase-handler/src/test/queries/positive/hbase_custom_key.q
index 9dbb2a0bf6..87fbf4a337 100644
--- hbase-handler/src/test/queries/positive/hbase_custom_key.q
+++ hbase-handler/src/test/queries/positive/hbase_custom_key.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE hbase_ck_1(key struct<col1:string,col2:string,col3:string>, value string)
 STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
 WITH SERDEPROPERTIES (
diff --git hbase-handler/src/test/queries/positive/hbase_custom_key2.q hbase-handler/src/test/queries/positive/hbase_custom_key2.q
index 9fba4f6e78..5116475334 100644
--- hbase-handler/src/test/queries/positive/hbase_custom_key2.q
+++ hbase-handler/src/test/queries/positive/hbase_custom_key2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE hbase_ck_4(key struct<col1:string,col2:string,col3:string>, value string)
 STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
 WITH SERDEPROPERTIES (
diff --git hbase-handler/src/test/queries/positive/hbase_custom_key3.q hbase-handler/src/test/queries/positive/hbase_custom_key3.q
index 22d2c9e07d..488a32f682 100644
--- hbase-handler/src/test/queries/positive/hbase_custom_key3.q
+++ hbase-handler/src/test/queries/positive/hbase_custom_key3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE hbase_ck_5(key struct<col1:string,col2:string,col3:string>, value string)
 STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
 WITH SERDEPROPERTIES (
diff --git hbase-handler/src/test/queries/positive/hbase_ddl.q hbase-handler/src/test/queries/positive/hbase_ddl.q
index a8bae75cec..dcec8d694b 100644
--- hbase-handler/src/test/queries/positive/hbase_ddl.q
+++ hbase-handler/src/test/queries/positive/hbase_ddl.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE hbase_table_1;
 CREATE TABLE hbase_table_1(key int comment 'It is a column key', value string comment 'It is the column string value')
 STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
diff --git hbase-handler/src/test/queries/positive/hbase_handler_bulk.q hbase-handler/src/test/queries/positive/hbase_handler_bulk.q
index d02a61f859..1eadfce676 100644
--- hbase-handler/src/test/queries/positive/hbase_handler_bulk.q
+++ hbase-handler/src/test/queries/positive/hbase_handler_bulk.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- -*- mode:sql -*-
 
 drop table if exists hb_target;
diff --git hbase-handler/src/test/queries/positive/hbase_handler_snapshot.q hbase-handler/src/test/queries/positive/hbase_handler_snapshot.q
index dd4fe0f278..e4290717a8 100644
--- hbase-handler/src/test/queries/positive/hbase_handler_snapshot.q
+++ hbase-handler/src/test/queries/positive/hbase_handler_snapshot.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_hbase
 set hive.stats.column.autogather=true;
 SET hive.hbase.snapshot.name=src_hbase_snapshot;
 SET hive.hbase.snapshot.restoredir=/tmp;
diff --git hbase-handler/src/test/queries/positive/hbase_joins.q hbase-handler/src/test/queries/positive/hbase_joins.q
index 1616adcd08..7be9f6a65f 100644
--- hbase-handler/src/test/queries/positive/hbase_joins.q
+++ hbase-handler/src/test/queries/positive/hbase_joins.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE users;
 DROP TABLE states;
 DROP TABLE countries;
diff --git hbase-handler/src/test/queries/positive/hbase_ppd_join.q hbase-handler/src/test/queries/positive/hbase_ppd_join.q
index 2436c19fed..b7e2a3b354 100644
--- hbase-handler/src/test/queries/positive/hbase_ppd_join.q
+++ hbase-handler/src/test/queries/positive/hbase_ppd_join.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 --create hive hbase table 1
 drop table if exists hive1_tbl_data_hbase1;
 drop table if exists hive1_tbl_data_hbase2;
diff --git hbase-handler/src/test/queries/positive/hbase_ppd_key_range.q hbase-handler/src/test/queries/positive/hbase_ppd_key_range.q
index 59e724dceb..cf1d1d407d 100644
--- hbase-handler/src/test/queries/positive/hbase_ppd_key_range.q
+++ hbase-handler/src/test/queries/positive/hbase_ppd_key_range.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 CREATE TABLE hbase_pushdown(key string, value string) 
 STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
 WITH SERDEPROPERTIES ("hbase.columns.mapping" = ":key,cf:string");
diff --git hbase-handler/src/test/queries/positive/hbase_pushdown.q hbase-handler/src/test/queries/positive/hbase_pushdown.q
index 0d29c829d0..8e366aff46 100644
--- hbase-handler/src/test/queries/positive/hbase_pushdown.q
+++ hbase-handler/src/test/queries/positive/hbase_pushdown.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 CREATE TABLE hbase_pushdown(key int, value string) 
 STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
 WITH SERDEPROPERTIES ("hbase.columns.mapping" = ":key,cf:string");
diff --git hbase-handler/src/test/queries/positive/hbase_queries.q hbase-handler/src/test/queries/positive/hbase_queries.q
index 43efd6c7d2..1a74c3fd30 100644
--- hbase-handler/src/test/queries/positive/hbase_queries.q
+++ hbase-handler/src/test/queries/positive/hbase_queries.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE hbase_table_1;
 CREATE TABLE hbase_table_1(key int comment 'It is a column key', value string comment 'It is the column string value')
 STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
diff --git hbase-handler/src/test/queries/positive/hbase_scan_params.q hbase-handler/src/test/queries/positive/hbase_scan_params.q
index 14d7d15831..522960c3d7 100644
--- hbase-handler/src/test/queries/positive/hbase_scan_params.q
+++ hbase-handler/src/test/queries/positive/hbase_scan_params.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE hbase_pushdown(key int, value string)
 STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
 WITH SERDEPROPERTIES ("hbase.columns.mapping" = ":key,cf:string",
diff --git hbase-handler/src/test/queries/positive/hbase_single_sourced_multi_insert.q hbase-handler/src/test/queries/positive/hbase_single_sourced_multi_insert.q
index 96fec0ecc6..bd4672b311 100644
--- hbase-handler/src/test/queries/positive/hbase_single_sourced_multi_insert.q
+++ hbase-handler/src/test/queries/positive/hbase_single_sourced_multi_insert.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- HIVE-4375 Single sourced multi insert consists of native and non-native table mixed throws NPE
 CREATE TABLE src_x1(key string, value string);
 CREATE TABLE src_x2(key string, value string)
diff --git hbase-handler/src/test/queries/positive/hbase_timestamp.q hbase-handler/src/test/queries/positive/hbase_timestamp.q
index 6ae2c30596..46d75291dc 100644
--- hbase-handler/src/test/queries/positive/hbase_timestamp.q
+++ hbase-handler/src/test/queries/positive/hbase_timestamp.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE hbase_table;
 CREATE TABLE hbase_table (key string, value string, `time` timestamp)
   STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
diff --git hbase-handler/src/test/queries/positive/hbase_timestamp_format.q hbase-handler/src/test/queries/positive/hbase_timestamp_format.q
index a8d5501c5e..75820e1400 100644
--- hbase-handler/src/test/queries/positive/hbase_timestamp_format.q
+++ hbase-handler/src/test/queries/positive/hbase_timestamp_format.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 create table hbase_str(rowkey string,mytime string,mystr string)
   STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
diff --git hbase-handler/src/test/queries/positive/hbasestats.q hbase-handler/src/test/queries/positive/hbasestats.q
index 52e11c9757..0185002988 100644
--- hbase-handler/src/test/queries/positive/hbasestats.q
+++ hbase-handler/src/test/queries/positive/hbasestats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE users;
 
 CREATE TABLE users(key string, state string, country string, country_id int)
diff --git hbase-handler/src/test/queries/positive/ppd_key_ranges.q hbase-handler/src/test/queries/positive/ppd_key_ranges.q
index 0497d25ffa..8b70c04be3 100644
--- hbase-handler/src/test/queries/positive/ppd_key_ranges.q
+++ hbase-handler/src/test/queries/positive/ppd_key_ranges.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE hbase_ppd_keyrange(key int, value string) 
 STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
 WITH SERDEPROPERTIES ("hbase.columns.mapping" = ":key#binary,cf:string");
diff --git itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreAccumuloCliDriver.java itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreAccumuloCliDriver.java
index d21fcaf0f8..9c9ba181fc 100644
--- itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreAccumuloCliDriver.java
+++ itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreAccumuloCliDriver.java
@@ -43,16 +43,7 @@ public CoreAccumuloCliDriver(AbstractCliConfig cliConfig) {
   @BeforeClass
   public void beforeClass() {
     setup = new AccumuloTestSetup();
-  }
-  @Override
-  @AfterClass
-  public void shutdown() throws Exception {
-    setup.tearDown();
-  }
-  @Override
-  @Before
-  public void setUp() {
-
+    
     MiniClusterType miniMR = cliConfig.getClusterType();
     String initScript = cliConfig.getInitScript();
     String cleanupScript = cliConfig.getCleanupScript();
@@ -60,14 +51,20 @@ public void setUp() {
     try {
       qt = new AccumuloQTestUtil(cliConfig.getResultsDir(), cliConfig.getLogDir(), miniMR,
           setup, initScript, cleanupScript);
+      
+      // do a one time initialization
+      qt.cleanUp();
+      qt.createSources();
     } catch (Exception e) {
       throw new RuntimeException("Unexpected exception in setUp",e);
     }
   }
-
+  
   @Override
-  @After
-  public void tearDown() {
+  @AfterClass
+  public void shutdown() throws Exception {
+    setup.tearDown();
+    
     try {
       qt.shutdown();
     }
@@ -75,6 +72,15 @@ public void tearDown() {
       throw new RuntimeException("Unexpected exception in tearDown",e);
     }
   }
+  @Override
+  @Before
+  public void setUp() {
+  }
+
+  @Override
+  @After
+  public void tearDown() {
+  }
 
   @Override
   public void runTest(String tname, String fname, String fpath) throws Exception {
@@ -89,7 +95,7 @@ public void runTest(String tname, String fname, String fpath) throws Exception {
         return;
       }
 
-      qt.cliInit(new File(fpath));
+      qt.cliInit(new File(fpath), false);
       qt.clearTestSideEffects();
       int ecode = qt.executeClient(fname);
       if (ecode != 0) {
diff --git itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBeeLineDriver.java itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBeeLineDriver.java
index 1ec1e5efa9..99748bdaf0 100644
--- itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBeeLineDriver.java
+++ itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBeeLineDriver.java
@@ -19,11 +19,27 @@
 
 import static org.junit.Assert.fail;
 
-import com.google.common.base.Strings;
+import java.io.File;
+import java.io.IOException;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.Callable;
+import java.util.stream.Stream;
+
+import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.conf.HiveConfUtil;
 import org.apache.hadoop.hive.ql.QTestProcessExecResult;
+import org.apache.hadoop.hive.ql.dataset.Dataset;
+import org.apache.hadoop.hive.ql.dataset.DatasetCollection;
+import org.apache.hadoop.hive.ql.dataset.DatasetParser;
 import org.apache.hadoop.hive.ql.hooks.PreExecutePrinter;
 import org.apache.hive.beeline.ConvertedOutputFile.Converter;
 import org.apache.hive.beeline.QFile;
@@ -34,10 +50,8 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
-import java.io.File;
-import java.io.IOException;
-import java.sql.SQLException;
-import java.util.HashMap;
+import com.google.common.base.Strings;
+import com.google.common.collect.ObjectArrays;
 
 public class CoreBeeLineDriver extends CliAdapter {
   private final File hiveRootDirectory = new File(AbstractCliConfig.HIVE_ROOT);
@@ -48,11 +62,13 @@
   private final File cleanupScript;
   private final File testDataDirectory;
   private final File testScriptDirectory;
+  private final File datasetDirectory;
   private boolean overwrite = false;
   private boolean useSharedDatabase = false;
   private MiniHS2 miniHS2;
   private QFileClientBuilder clientBuilder;
   private QFileBuilder fileBuilder;
+  private final Map<String, Set<String>> datasets = new HashMap<String, Set<String>>();
 
   public CoreBeeLineDriver(AbstractCliConfig testCliConfig) {
     super(testCliConfig);
@@ -71,6 +87,7 @@ public CoreBeeLineDriver(AbstractCliConfig testCliConfig) {
       testDataDirectory = new File(testDataDirectoryName);
     }
     testScriptDirectory = new File(hiveRootDirectory, "data" + File.separator + "scripts");
+    datasetDirectory = new File(testDataDirectory, "datasets");
     String initScriptFileName = System.getProperty("test.init.script");
     if (initScriptFileName != null) {
       initScript = new File(testScriptDirectory, initScriptFileName);
@@ -156,6 +173,23 @@ protected void runInfraScript(File script, File beeLineOutput, File log)
           + "\nCheck the following logs for details:\n - " + beeLineOutput + "\n - " + log, e);
     }
   }
+  
+  protected void runInfraScript(String[] commands, File beeLineOutput, File log)
+      throws IOException, SQLException {
+    try (QFileBeeLineClient beeLineClient = clientBuilder.getClient(beeLineOutput)) {
+      String[] preCommands =
+          new String[] { "set hive.exec.pre.hooks=" + PreExecutePrinter.class.getName() + ";",
+              "set test.data.dir=" + testDataDirectory + ";",
+              "set test.script.dir=" + testScriptDirectory + ";" };
+
+      String[] allCommands =
+          Stream.concat(Arrays.stream(preCommands), Arrays.stream(commands)).toArray(String[]::new);
+      beeLineClient.execute(allCommands, log, Converter.NONE);
+    } catch (Exception e) {
+      throw new SQLException("Error running infra commands, "
+          + "\nCheck the following logs for details:\n - " + beeLineOutput + "\n - " + log, e);
+    }
+  }
 
   @Override
   @AfterClass
@@ -167,12 +201,12 @@ public void shutdown() throws Exception {
     }
   }
 
-  public void runTest(QFile qFile) throws Exception {
+  private void runTest(QFile qFile, List<Callable<Void>> preCommands) throws Exception {
     try (QFileBeeLineClient beeLineClient = clientBuilder.getClient(qFile.getLogFile())) {
       long startTime = System.currentTimeMillis();
       System.err.println(">>> STARTED " + qFile.getName());
 
-      beeLineClient.execute(qFile);
+      beeLineClient.execute(qFile, preCommands);
 
       long queryEndTime = System.currentTimeMillis();
       System.err.println(">>> EXECUTED " + qFile.getName() + ": " + (queryEndTime - startTime)
@@ -207,6 +241,11 @@ public void runTest(QFile qFile) throws Exception {
       throw new Exception("Exception running or analyzing the results of the query file: " + qFile
           + "\n" + qFile.getDebugHint(), e);
     }
+    
+  }
+  
+  public void runTest(QFile qFile) throws Exception {
+    runTest(qFile, null);
   }
 
   @Override
@@ -220,6 +259,58 @@ public void tearDown() {
   @Override
   public void runTest(String name, String name2, String absolutePath) throws Exception {
     QFile qFile = fileBuilder.getQFile(name);
-    runTest(qFile);
+    List<Callable<Void>> commands = initDataSetForTest(qFile);
+    runTest(qFile, commands);
+  }
+
+  private List<Callable<Void>> initDataSetForTest(QFile qFile) throws Exception {
+    DatasetParser parser = new DatasetParser();
+    parser.parse(qFile.getInputFile());
+
+    List<Callable<Void>> commands = new ArrayList<>();
+
+    DatasetCollection datasets = parser.getDatasets();
+    for (String table : datasets.getTables()) {
+      Callable<Void> command = initDataset(table, qFile);
+      if (command != null) {
+        commands.add(command);
+      }
+    }
+
+    return commands;
+  }
+
+  protected Callable<Void> initDataset(String table, QFile qFile) throws Exception {
+    if (datasetInitialized(table, qFile)) {
+      return null;
+    }
+
+    Callable<Void> command = new Callable<Void>() {
+      @Override
+      public Void call() throws Exception {
+        File tableFile = new File(new File(datasetDirectory, table), Dataset.INIT_FILE_NAME);
+        List<String> datasetLines = FileUtils.readLines(tableFile);
+        String[] datasetCommands = datasetLines.toArray(new String[datasetLines.size()]);
+
+        runInfraScript(
+            ObjectArrays.concat(String.format("use %s;", qFile.getDatabaseName()), datasetCommands),
+            new File(logDirectory, "dataset.beeline"), new File(logDirectory, "dataset.raw"));
+
+        return null;
+      }
+    };
+
+    datasets.get(qFile.getDatabaseName()).add(table);
+
+    return command;
+  }
+
+  private boolean datasetInitialized(String table, QFile qFile) {
+    if (datasets.get(qFile.getDatabaseName()) == null) {
+      datasets.put(qFile.getDatabaseName(), new HashSet<String>());
+      return false;
+    }
+
+    return datasets.get(qFile.getDatabaseName()).contains(table);
   }
 }
diff --git itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreCompareCliDriver.java itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreCompareCliDriver.java
index fbca4241d4..c36d231704 100644
--- itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreCompareCliDriver.java
+++ itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreCompareCliDriver.java
@@ -133,6 +133,9 @@ public void runTest(String tname, String fname, String fpath) throws Exception {
       }
 
       int ecode = 0;
+      
+      qt.cliInit(new File(fpath), false);
+      
       List<String> outputs = new ArrayList<>(versionFiles.size());
       for (String versionFile : versionFiles) {
         // 1 for "_" after tname; 3 for ".qv" at the end. Version is in between.
diff --git itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreHBaseCliDriver.java itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreHBaseCliDriver.java
index 24bdc58cab..b40b8d7382 100644
--- itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreHBaseCliDriver.java
+++ itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreHBaseCliDriver.java
@@ -17,7 +17,6 @@
  */
 package org.apache.hadoop.hive.cli.control;
 
-import static org.apache.hadoop.hive.cli.control.AbstractCliConfig.HIVE_ROOT;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
diff --git itests/util/src/main/java/org/apache/hadoop/hive/hbase/HBaseQTestUtil.java itests/util/src/main/java/org/apache/hadoop/hive/hbase/HBaseQTestUtil.java
index 1873bfe9b8..07df0c9d1e 100644
--- itests/util/src/main/java/org/apache/hadoop/hive/hbase/HBaseQTestUtil.java
+++ itests/util/src/main/java/org/apache/hadoop/hive/hbase/HBaseQTestUtil.java
@@ -68,14 +68,7 @@ public void createSources(String tname) throws Exception {
 
     conf.setBoolean("hive.test.init.phase", true);
 
-    // create and load the input data into the hbase table
-    runCreateTableCmd(
-      "CREATE TABLE " + HBASE_SRC_NAME + "(key INT, value STRING)"
-        + "  STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'"
-        + "  WITH SERDEPROPERTIES ('hbase.columns.mapping' = ':key,cf:val')"
-        + "  TBLPROPERTIES ('hbase.table.name' = '" + HBASE_SRC_NAME + "')"
-    );
-    runCmd("INSERT OVERWRITE TABLE " + HBASE_SRC_NAME + " SELECT * FROM src");
+    initDataset(HBASE_SRC_NAME);
 
     // create a snapshot
     Admin admin = null;
@@ -93,9 +86,6 @@ public void createSources(String tname) throws Exception {
   public void cleanUp(String tname) throws Exception {
     super.cleanUp(tname);
 
-    // drop in case leftover from unsuccessful run
-    db.dropTable(Warehouse.DEFAULT_DATABASE_NAME, HBASE_SRC_NAME);
-
     Admin admin = null;
     try {
       admin = conn.getAdmin();
diff --git itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java
index 050f9d5765..51881152fc 100644
--- itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java
+++ itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java
@@ -219,7 +219,7 @@ public static void addSrcTable(String table){
     getSrcTables().add(table);
     storeSrcTables();
   }
-
+  
   public static Set<String> initSrcTables() {
     if (srcTables == null){
       initSrcTablesFromSystemProperty();
@@ -237,18 +237,12 @@ private static void initSrcTablesFromSystemProperty(){
     srcTables = new HashSet<String>();
     // FIXME: moved default value to here...for now
     // i think this features is never really used from the command line
-    String defaultTestSrcTables = "src,src1,srcbucket,srcbucket2,src_json,src_thrift," +
-        "src_sequencefile,srcpart,alltypesorc,src_hbase,cbo_t1,cbo_t2,cbo_t3,src_cbo,part," +
-        "lineitem,alltypesparquet";
-    for (String srcTable : System.getProperty(TEST_SRC_TABLES_PROPERTY, defaultTestSrcTables).trim().split(",")) {
+    for (String srcTable : System.getProperty(TEST_SRC_TABLES_PROPERTY, "").trim().split(",")) {
       srcTable = srcTable.trim();
       if (!srcTable.isEmpty()) {
         srcTables.add(srcTable);
       }
     }
-    if (srcTables.isEmpty()) {
-      throw new RuntimeException("Source tables cannot be empty");
-    }
   }
 
   private CliDriver getCliDriver() {
@@ -1183,7 +1177,7 @@ private void initDataSetForTest(File file){
     }
   }
 
-  private void initDataset(String table) {
+  protected synchronized void initDataset(String table) {
     if (getSrcTables().contains(table)){
       return;
     }
diff --git itests/util/src/main/java/org/apache/hadoop/hive/ql/parse/CoreParseNegative.java itests/util/src/main/java/org/apache/hadoop/hive/ql/parse/CoreParseNegative.java
index f087393d2b..a071689075 100644
--- itests/util/src/main/java/org/apache/hadoop/hive/ql/parse/CoreParseNegative.java
+++ itests/util/src/main/java/org/apache/hadoop/hive/ql/parse/CoreParseNegative.java
@@ -19,6 +19,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
+import java.io.File;
 import java.io.Serializable;
 import java.util.List;
 
@@ -104,6 +105,9 @@ public void runTest(String tname, String fname, String fpath) throws Exception {
         qt.init(fname);
         firstRun = false;
       }
+
+      qt.cliInit(new File(fpath), false);
+
       ASTNode tree = qt.parseQuery(fname);
       List<Task<? extends Serializable>> tasks = qt.analyzeAST(tree);
       fail("Unexpected success for query: " + fname + debugHint);
diff --git itests/util/src/main/java/org/apache/hive/beeline/QFileBeeLineClient.java itests/util/src/main/java/org/apache/hive/beeline/QFileBeeLineClient.java
index e6bf54b1e7..be4c6e89cd 100644
--- itests/util/src/main/java/org/apache/hive/beeline/QFileBeeLineClient.java
+++ itests/util/src/main/java/org/apache/hive/beeline/QFileBeeLineClient.java
@@ -28,8 +28,11 @@
 import java.sql.DatabaseMetaData;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
+import java.util.concurrent.Callable;
 import java.util.stream.Collectors;
 
 /**
@@ -189,7 +192,20 @@ private void afterExecute(QFile qFile) throws Exception {
   }
 
   public void execute(QFile qFile) throws Exception {
+    execute(qFile, null);
+  }
+
+  public void execute(QFile qFile, List<Callable<Void>> preCommands) throws Exception {
+    if (preCommands == null) {
+      preCommands = new ArrayList<Callable<Void>>();
+    }
+
     beforeExecute(qFile);
+
+    for (Callable<Void> c : preCommands) {
+      c.call();
+    }
+
     String[] commands = beeLine.getCommands(qFile.getInputFile());
     execute(qFile.filterCommands(commands), qFile.getRawOutputFile(), qFile.getConverter());
     afterExecute(qFile);
diff --git pom.xml pom.xml
index 5be30f6696..ac15ed1baa 100644
--- pom.xml
+++ pom.xml
@@ -1285,7 +1285,7 @@
             <test.warehouse.dir>${test.warehouse.scheme}${test.warehouse.dir}</test.warehouse.dir>
             <java.net.preferIPv4Stack>true</java.net.preferIPv4Stack>
             <!-- EnforceReadOnlyTables hook and QTestUtil -->
-            <test.src.tables>src,src1,srcbucket,srcbucket2,src_json,src_thrift,src_sequencefile,srcpart,alltypesorc,alltypesparquet,src_hbase,cbo_t1,cbo_t2,cbo_t3,src_cbo,part,lineitem</test.src.tables>
+            <test.src.tables></test.src.tables>
             <java.security.krb5.conf>${test.conf.dir}/krb5.conf</java.security.krb5.conf>
             <!-- Required by spark to work around SPARK-14958 -->
             <antlr.version>${antlr.version}</antlr.version>
diff --git ql/src/test/queries/clientcompare/llap_0.q ql/src/test/queries/clientcompare/llap_0.q
index 27dc1c1d5f..7bdb9e16d1 100644
--- ql/src/test/queries/clientcompare/llap_0.q
+++ ql/src/test/queries/clientcompare/llap_0.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.vectorized.execution.enabled=true;
 set hive.mapred.mode=nonstrict;
 SELECT   cfloat,
diff --git ql/src/test/queries/clientcompare/vectorized_math_funcs.q ql/src/test/queries/clientcompare/vectorized_math_funcs.q
index c640ca148b..039b18dd82 100644
--- ql/src/test/queries/clientcompare/vectorized_math_funcs.q
+++ ql/src/test/queries/clientcompare/vectorized_math_funcs.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 
 select
    cdouble
diff --git ql/src/test/queries/clientnegative/alter_partition_coltype_2columns.q ql/src/test/queries/clientnegative/alter_partition_coltype_2columns.q
index e10f77cf3f..4f0b40cea1 100644
--- ql/src/test/queries/clientnegative/alter_partition_coltype_2columns.q
+++ ql/src/test/queries/clientnegative/alter_partition_coltype_2columns.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 -- create testing table
 create table alter_coltype(key string, value string) partitioned by (dt string, ts string);
 
diff --git ql/src/test/queries/clientnegative/alter_partition_coltype_invalidcolname.q ql/src/test/queries/clientnegative/alter_partition_coltype_invalidcolname.q
index 66eba75d40..bc8d768ceb 100644
--- ql/src/test/queries/clientnegative/alter_partition_coltype_invalidcolname.q
+++ ql/src/test/queries/clientnegative/alter_partition_coltype_invalidcolname.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 -- create testing table
 create table alter_coltype(key string, value string) partitioned by (dt string, ts string);
 
diff --git ql/src/test/queries/clientnegative/alter_partition_coltype_invalidtype.q ql/src/test/queries/clientnegative/alter_partition_coltype_invalidtype.q
index ad016c5f3a..1f60651a57 100644
--- ql/src/test/queries/clientnegative/alter_partition_coltype_invalidtype.q
+++ ql/src/test/queries/clientnegative/alter_partition_coltype_invalidtype.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 -- create testing table
 create table alter_coltype(key string, value string) partitioned by (dt string, ts string);
 
diff --git ql/src/test/queries/clientnegative/alter_view_as_select_not_exist.q ql/src/test/queries/clientnegative/alter_view_as_select_not_exist.q
index 30fe4d9916..11f85cbbb4 100644
--- ql/src/test/queries/clientnegative/alter_view_as_select_not_exist.q
+++ ql/src/test/queries/clientnegative/alter_view_as_select_not_exist.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 DROP VIEW testView;
 
 -- Cannot ALTER VIEW AS SELECT if view currently does not exist
diff --git ql/src/test/queries/clientnegative/alter_view_as_select_with_partition.q ql/src/test/queries/clientnegative/alter_view_as_select_with_partition.q
index dca6770b1b..1e14240ebb 100644
--- ql/src/test/queries/clientnegative/alter_view_as_select_with_partition.q
+++ ql/src/test/queries/clientnegative/alter_view_as_select_with_partition.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 CREATE VIEW testViewPart PARTITIONED ON (value)
 AS
 SELECT key, value
diff --git ql/src/test/queries/clientnegative/alter_view_failure.q ql/src/test/queries/clientnegative/alter_view_failure.q
index 705b985095..d530910927 100644
--- ql/src/test/queries/clientnegative/alter_view_failure.q
+++ ql/src/test/queries/clientnegative/alter_view_failure.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx3;
 CREATE VIEW xxx3 AS SELECT * FROM src;
 ALTER TABLE xxx3 REPLACE COLUMNS (xyz int);
diff --git ql/src/test/queries/clientnegative/alter_view_failure2.q ql/src/test/queries/clientnegative/alter_view_failure2.q
index 26d2c4f3ad..27fc203f66 100644
--- ql/src/test/queries/clientnegative/alter_view_failure2.q
+++ ql/src/test/queries/clientnegative/alter_view_failure2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx4;
 CREATE VIEW xxx4 
 PARTITIONED ON (value)
diff --git ql/src/test/queries/clientnegative/alter_view_failure3.q ql/src/test/queries/clientnegative/alter_view_failure3.q
index 49c17a8b57..4afb60029a 100644
--- ql/src/test/queries/clientnegative/alter_view_failure3.q
+++ ql/src/test/queries/clientnegative/alter_view_failure3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:srcpart
 -- should fail:  can't use ALTER VIEW on a table
 ALTER VIEW srcpart ADD PARTITION (ds='2012-12-31', hr='23');
diff --git ql/src/test/queries/clientnegative/alter_view_failure4.q ql/src/test/queries/clientnegative/alter_view_failure4.q
index e2fad270b1..a58c0d2f3d 100644
--- ql/src/test/queries/clientnegative/alter_view_failure4.q
+++ ql/src/test/queries/clientnegative/alter_view_failure4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx5;
 CREATE VIEW xxx5
 PARTITIONED ON (value)
diff --git ql/src/test/queries/clientnegative/alter_view_failure5.q ql/src/test/queries/clientnegative/alter_view_failure5.q
index e44766e113..3208b798ca 100644
--- ql/src/test/queries/clientnegative/alter_view_failure5.q
+++ ql/src/test/queries/clientnegative/alter_view_failure5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx6;
 CREATE VIEW xxx6
 PARTITIONED ON (value)
diff --git ql/src/test/queries/clientnegative/alter_view_failure6.q ql/src/test/queries/clientnegative/alter_view_failure6.q
index e390409ce0..e6721eb4b4 100644
--- ql/src/test/queries/clientnegative/alter_view_failure6.q
+++ ql/src/test/queries/clientnegative/alter_view_failure6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false; 
 
 DROP VIEW xxx7;
diff --git ql/src/test/queries/clientnegative/alter_view_failure6_2.q ql/src/test/queries/clientnegative/alter_view_failure6_2.q
index 730a8f5ac3..7651153554 100644
--- ql/src/test/queries/clientnegative/alter_view_failure6_2.q
+++ ql/src/test/queries/clientnegative/alter_view_failure6_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false; 
 
 DROP VIEW xxx7;
diff --git ql/src/test/queries/clientnegative/alter_view_failure7.q ql/src/test/queries/clientnegative/alter_view_failure7.q
index eff04c5b47..10da27cf1c 100644
--- ql/src/test/queries/clientnegative/alter_view_failure7.q
+++ ql/src/test/queries/clientnegative/alter_view_failure7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 DROP VIEW xxx8;
 CREATE VIEW xxx8
 PARTITIONED ON (ds,hr)
diff --git ql/src/test/queries/clientnegative/alter_view_failure9.q ql/src/test/queries/clientnegative/alter_view_failure9.q
index 0f40fad90d..b6e231b88d 100644
--- ql/src/test/queries/clientnegative/alter_view_failure9.q
+++ ql/src/test/queries/clientnegative/alter_view_failure9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx4;
 CREATE VIEW xxx4 
 AS 
diff --git ql/src/test/queries/clientnegative/ambiguous_col.q ql/src/test/queries/clientnegative/ambiguous_col.q
index 866cec126f..e8f2c8d750 100644
--- ql/src/test/queries/clientnegative/ambiguous_col.q
+++ ql/src/test/queries/clientnegative/ambiguous_col.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 FROM (SELECT key, concat(value) AS key FROM src) a SELECT a.key;
diff --git ql/src/test/queries/clientnegative/analyze.q ql/src/test/queries/clientnegative/analyze.q
index 874f5bfc14..ee1d1b974e 100644
--- ql/src/test/queries/clientnegative/analyze.q
+++ ql/src/test/queries/clientnegative/analyze.q
@@ -1 +1,2 @@
+--! qt:dataset:srcpart
 analyze table srcpart compute statistics;
diff --git ql/src/test/queries/clientnegative/analyze1.q ql/src/test/queries/clientnegative/analyze1.q
index 057a1a0b48..97863f92c3 100644
--- ql/src/test/queries/clientnegative/analyze1.q
+++ ql/src/test/queries/clientnegative/analyze1.q
@@ -1 +1,2 @@
+--! qt:dataset:srcpart
 analyze table srcpart partition (key) compute statistics;
diff --git ql/src/test/queries/clientnegative/analyze_view.q ql/src/test/queries/clientnegative/analyze_view.q
index af4970f52e..37a3709a71 100644
--- ql/src/test/queries/clientnegative/analyze_view.q
+++ ql/src/test/queries/clientnegative/analyze_view.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW av;
 
 CREATE VIEW av AS SELECT * FROM src;
diff --git ql/src/test/queries/clientnegative/archive1.q ql/src/test/queries/clientnegative/archive1.q
index a4b50f5e14..a66b5e2c8c 100644
--- ql/src/test/queries/clientnegative/archive1.q
+++ ql/src/test/queries/clientnegative/archive1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to archive a partition twice.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive2.q ql/src/test/queries/clientnegative/archive2.q
index ff8dcb2485..d8796757b9 100644
--- ql/src/test/queries/clientnegative/archive2.q
+++ ql/src/test/queries/clientnegative/archive2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to unarchive a non-archived partition
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive3.q ql/src/test/queries/clientnegative/archive3.q
index 53057daa1b..c09243fdfd 100644
--- ql/src/test/queries/clientnegative/archive3.q
+++ ql/src/test/queries/clientnegative/archive3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests archiving a table
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive4.q ql/src/test/queries/clientnegative/archive4.q
index 56d6f1798d..befdc5fccf 100644
--- ql/src/test/queries/clientnegative/archive4.q
+++ ql/src/test/queries/clientnegative/archive4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests archiving multiple partitions
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive5.q ql/src/test/queries/clientnegative/archive5.q
index 4f6dc8d72c..1e67dc9534 100644
--- ql/src/test/queries/clientnegative/archive5.q
+++ ql/src/test/queries/clientnegative/archive5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests creating a partition where the partition value will collide with the
 -- a intermediate directory
diff --git ql/src/test/queries/clientnegative/archive_corrupt.q ql/src/test/queries/clientnegative/archive_corrupt.q
index ed496881bb..ab182d74a2 100644
--- ql/src/test/queries/clientnegative/archive_corrupt.q
+++ ql/src/test/queries/clientnegative/archive_corrupt.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 USE default;
 
 set hive.archive.enabled = true;
diff --git ql/src/test/queries/clientnegative/archive_insert1.q ql/src/test/queries/clientnegative/archive_insert1.q
index deaff63d67..3663634d65 100644
--- ql/src/test/queries/clientnegative/archive_insert1.q
+++ ql/src/test/queries/clientnegative/archive_insert1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to insert into archived partition.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_insert2.q ql/src/test/queries/clientnegative/archive_insert2.q
index d744f24876..c4d99fea37 100644
--- ql/src/test/queries/clientnegative/archive_insert2.q
+++ ql/src/test/queries/clientnegative/archive_insert2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to insert into archived partition.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_insert3.q ql/src/test/queries/clientnegative/archive_insert3.q
index c6cb142824..7a9f4fa0a0 100644
--- ql/src/test/queries/clientnegative/archive_insert3.q
+++ ql/src/test/queries/clientnegative/archive_insert3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to create partition inside of archived directory.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_insert4.q ql/src/test/queries/clientnegative/archive_insert4.q
index c36f3ef9e8..52428f897e 100644
--- ql/src/test/queries/clientnegative/archive_insert4.q
+++ ql/src/test/queries/clientnegative/archive_insert4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to (possible) dynamic insert into archived partition.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_multi1.q ql/src/test/queries/clientnegative/archive_multi1.q
index 8c702ed008..bf60d5d677 100644
--- ql/src/test/queries/clientnegative/archive_multi1.q
+++ ql/src/test/queries/clientnegative/archive_multi1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to archive a partition twice.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_multi2.q ql/src/test/queries/clientnegative/archive_multi2.q
index d3cfb89c98..92eff2f965 100644
--- ql/src/test/queries/clientnegative/archive_multi2.q
+++ ql/src/test/queries/clientnegative/archive_multi2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to unarchive a non-archived partition group
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_multi3.q ql/src/test/queries/clientnegative/archive_multi3.q
index 75f5dfad47..29e4a00f7f 100644
--- ql/src/test/queries/clientnegative/archive_multi3.q
+++ ql/src/test/queries/clientnegative/archive_multi3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to archive outer partition group containing other partition inside.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_multi4.q ql/src/test/queries/clientnegative/archive_multi4.q
index abe0647ae6..98d766aadc 100644
--- ql/src/test/queries/clientnegative/archive_multi4.q
+++ ql/src/test/queries/clientnegative/archive_multi4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to archive inner partition contained in archived partition group.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_multi5.q ql/src/test/queries/clientnegative/archive_multi5.q
index 71635e054a..1eeab17580 100644
--- ql/src/test/queries/clientnegative/archive_multi5.q
+++ ql/src/test/queries/clientnegative/archive_multi5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to unarchive outer partition group containing other partition inside.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_multi6.q ql/src/test/queries/clientnegative/archive_multi6.q
index 5bb1474fdc..d335db9c7e 100644
--- ql/src/test/queries/clientnegative/archive_multi6.q
+++ ql/src/test/queries/clientnegative/archive_multi6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to unarchive inner partition contained in archived partition group.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_multi7.q ql/src/test/queries/clientnegative/archive_multi7.q
index db7f392737..4c3f06e822 100644
--- ql/src/test/queries/clientnegative/archive_multi7.q
+++ ql/src/test/queries/clientnegative/archive_multi7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to archive a partition group with custom locations.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_partspec1.q ql/src/test/queries/clientnegative/archive_partspec1.q
index d83b19d9fe..ead42681b4 100644
--- ql/src/test/queries/clientnegative/archive_partspec1.q
+++ ql/src/test/queries/clientnegative/archive_partspec1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to archive a partition twice.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_partspec2.q ql/src/test/queries/clientnegative/archive_partspec2.q
index ed14bbf688..ff4581f40d 100644
--- ql/src/test/queries/clientnegative/archive_partspec2.q
+++ ql/src/test/queries/clientnegative/archive_partspec2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to archive a partition twice.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_partspec3.q ql/src/test/queries/clientnegative/archive_partspec3.q
index f27ad6d63b..ff29486114 100644
--- ql/src/test/queries/clientnegative/archive_partspec3.q
+++ ql/src/test/queries/clientnegative/archive_partspec3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to archive a partition twice.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_partspec4.q ql/src/test/queries/clientnegative/archive_partspec4.q
index 491c2ac459..f27496fac0 100644
--- ql/src/test/queries/clientnegative/archive_partspec4.q
+++ ql/src/test/queries/clientnegative/archive_partspec4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to archive a partition twice.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/archive_partspec5.q ql/src/test/queries/clientnegative/archive_partspec5.q
index bb25ef2c7e..d5df078010 100644
--- ql/src/test/queries/clientnegative/archive_partspec5.q
+++ ql/src/test/queries/clientnegative/archive_partspec5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.archive.enabled = true;
 -- Tests trying to archive a partition twice.
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.17, 0.18, 0.19)
diff --git ql/src/test/queries/clientnegative/authorization_alter_table_exchange_partition_fail.q ql/src/test/queries/clientnegative/authorization_alter_table_exchange_partition_fail.q
index d4c22bfd24..4bdc27bc14 100644
--- ql/src/test/queries/clientnegative/authorization_alter_table_exchange_partition_fail.q
+++ ql/src/test/queries/clientnegative/authorization_alter_table_exchange_partition_fail.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.test.authz.sstd.hs2.mode=true;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 set hive.security.authenticator.manager=org.apache.hadoop.hive.ql.security.SessionStateConfigUserAuthenticator;
diff --git ql/src/test/queries/clientnegative/authorization_alter_table_exchange_partition_fail2.q ql/src/test/queries/clientnegative/authorization_alter_table_exchange_partition_fail2.q
index 9a683947f6..3b7dffa1c1 100644
--- ql/src/test/queries/clientnegative/authorization_alter_table_exchange_partition_fail2.q
+++ ql/src/test/queries/clientnegative/authorization_alter_table_exchange_partition_fail2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.test.authz.sstd.hs2.mode=true;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 set hive.security.authenticator.manager=org.apache.hadoop.hive.ql.security.SessionStateConfigUserAuthenticator;
diff --git ql/src/test/queries/clientnegative/authorization_part.q ql/src/test/queries/clientnegative/authorization_part.q
index 517f5130be..821cc213c6 100644
--- ql/src/test/queries/clientnegative/authorization_part.q
+++ ql/src/test/queries/clientnegative/authorization_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 -- SORT_BEFORE_DIFF
 
diff --git ql/src/test/queries/clientnegative/authorization_view_1.q ql/src/test/queries/clientnegative/authorization_view_1.q
index d37b4064a0..d779ebce72 100644
--- ql/src/test/queries/clientnegative/authorization_view_1.q
+++ ql/src/test/queries/clientnegative/authorization_view_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientnegative/authorization_view_2.q ql/src/test/queries/clientnegative/authorization_view_2.q
index 37297c81a1..9a215ce3d6 100644
--- ql/src/test/queries/clientnegative/authorization_view_2.q
+++ ql/src/test/queries/clientnegative/authorization_view_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientnegative/authorization_view_3.q ql/src/test/queries/clientnegative/authorization_view_3.q
index abcd877778..052bd0af12 100644
--- ql/src/test/queries/clientnegative/authorization_view_3.q
+++ ql/src/test/queries/clientnegative/authorization_view_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientnegative/authorization_view_4.q ql/src/test/queries/clientnegative/authorization_view_4.q
index c51bdaebff..20eb3bccb9 100644
--- ql/src/test/queries/clientnegative/authorization_view_4.q
+++ ql/src/test/queries/clientnegative/authorization_view_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientnegative/authorization_view_5.q ql/src/test/queries/clientnegative/authorization_view_5.q
index 3b042c350d..a2ecfb29af 100644
--- ql/src/test/queries/clientnegative/authorization_view_5.q
+++ ql/src/test/queries/clientnegative/authorization_view_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientnegative/authorization_view_6.q ql/src/test/queries/clientnegative/authorization_view_6.q
index 38873a7623..665963c737 100644
--- ql/src/test/queries/clientnegative/authorization_view_6.q
+++ ql/src/test/queries/clientnegative/authorization_view_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientnegative/authorization_view_7.q ql/src/test/queries/clientnegative/authorization_view_7.q
index 3740bf930f..aa043bbe67 100644
--- ql/src/test/queries/clientnegative/authorization_view_7.q
+++ ql/src/test/queries/clientnegative/authorization_view_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientnegative/authorization_view_disable_cbo_1.q ql/src/test/queries/clientnegative/authorization_view_disable_cbo_1.q
index 7c4b343d57..23a27e06c0 100644
--- ql/src/test/queries/clientnegative/authorization_view_disable_cbo_1.q
+++ ql/src/test/queries/clientnegative/authorization_view_disable_cbo_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 set hive.cbo.enable=false;
 
diff --git ql/src/test/queries/clientnegative/authorization_view_disable_cbo_2.q ql/src/test/queries/clientnegative/authorization_view_disable_cbo_2.q
index 37297c81a1..9a215ce3d6 100644
--- ql/src/test/queries/clientnegative/authorization_view_disable_cbo_2.q
+++ ql/src/test/queries/clientnegative/authorization_view_disable_cbo_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientnegative/authorization_view_disable_cbo_3.q ql/src/test/queries/clientnegative/authorization_view_disable_cbo_3.q
index 954072d517..ee4906fe1c 100644
--- ql/src/test/queries/clientnegative/authorization_view_disable_cbo_3.q
+++ ql/src/test/queries/clientnegative/authorization_view_disable_cbo_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 set hive.cbo.enable=false;
 
diff --git ql/src/test/queries/clientnegative/authorization_view_disable_cbo_4.q ql/src/test/queries/clientnegative/authorization_view_disable_cbo_4.q
index 11cedcfdcc..53dad35032 100644
--- ql/src/test/queries/clientnegative/authorization_view_disable_cbo_4.q
+++ ql/src/test/queries/clientnegative/authorization_view_disable_cbo_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 set hive.cbo.enable=false;
 
diff --git ql/src/test/queries/clientnegative/authorization_view_disable_cbo_5.q ql/src/test/queries/clientnegative/authorization_view_disable_cbo_5.q
index a0070c2639..8e4655cc54 100644
--- ql/src/test/queries/clientnegative/authorization_view_disable_cbo_5.q
+++ ql/src/test/queries/clientnegative/authorization_view_disable_cbo_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
diff --git ql/src/test/queries/clientnegative/authorization_view_disable_cbo_6.q ql/src/test/queries/clientnegative/authorization_view_disable_cbo_6.q
index bc0d547b4c..5cb9b24496 100644
--- ql/src/test/queries/clientnegative/authorization_view_disable_cbo_6.q
+++ ql/src/test/queries/clientnegative/authorization_view_disable_cbo_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
diff --git ql/src/test/queries/clientnegative/authorization_view_disable_cbo_7.q ql/src/test/queries/clientnegative/authorization_view_disable_cbo_7.q
index 51b453df7e..10857b6ddb 100644
--- ql/src/test/queries/clientnegative/authorization_view_disable_cbo_7.q
+++ ql/src/test/queries/clientnegative/authorization_view_disable_cbo_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
diff --git ql/src/test/queries/clientnegative/autolocal1.q ql/src/test/queries/clientnegative/autolocal1.q
index bd1c9d6e15..51f5bd5bcd 100644
--- ql/src/test/queries/clientnegative/autolocal1.q
+++ ql/src/test/queries/clientnegative/autolocal1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set mapred.job.tracker=abracadabra;
 set hive.exec.mode.local.auto.inputbytes.max=1;
 set hive.exec.mode.local.auto=true;
diff --git ql/src/test/queries/clientnegative/bad_exec_hooks.q ql/src/test/queries/clientnegative/bad_exec_hooks.q
index ee6f73f0a1..359c153a40 100644
--- ql/src/test/queries/clientnegative/bad_exec_hooks.q
+++ ql/src/test/queries/clientnegative/bad_exec_hooks.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.query.reexecution.enabled=false;
 set hive.exec.pre.hooks="org.this.is.a.bad.class";
 
diff --git ql/src/test/queries/clientnegative/bad_sample_clause.q ql/src/test/queries/clientnegative/bad_sample_clause.q
index fd6769827b..c06bb84af9 100644
--- ql/src/test/queries/clientnegative/bad_sample_clause.q
+++ ql/src/test/queries/clientnegative/bad_sample_clause.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 CREATE TABLE dest1(key INT, value STRING, dt STRING, hr STRING) STORED AS TEXTFILE;
 
 INSERT OVERWRITE TABLE dest1 SELECT s.*
diff --git ql/src/test/queries/clientnegative/cachingprintstream.q ql/src/test/queries/clientnegative/cachingprintstream.q
index d57a4517f0..a95829c17d 100644
--- ql/src/test/queries/clientnegative/cachingprintstream.q
+++ ql/src/test/queries/clientnegative/cachingprintstream.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.failure.hooks=org.apache.hadoop.hive.ql.hooks.VerifyCachingPrintStreamHook;
 set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.VerifyCachingPrintStreamHook;
 
diff --git ql/src/test/queries/clientnegative/cluster_tasklog_retrieval.q ql/src/test/queries/clientnegative/cluster_tasklog_retrieval.q
index bc980448a9..020ab86eec 100644
--- ql/src/test/queries/clientnegative/cluster_tasklog_retrieval.q
+++ ql/src/test/queries/clientnegative/cluster_tasklog_retrieval.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- TaskLog retrieval upon Null Pointer Exception in Cluster
 
 CREATE TEMPORARY FUNCTION evaluate_npe AS 'org.apache.hadoop.hive.ql.udf.generic.GenericUDFEvaluateNPE';
diff --git ql/src/test/queries/clientnegative/clusterbydistributeby.q ql/src/test/queries/clientnegative/clusterbydistributeby.q
index 4c6a9b38d7..ab221e1982 100644
--- ql/src/test/queries/clientnegative/clusterbydistributeby.q
+++ ql/src/test/queries/clientnegative/clusterbydistributeby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, ten INT, one INT, value STRING) STORED AS TEXTFILE;
 
 FROM src
diff --git ql/src/test/queries/clientnegative/clusterbyorderby.q ql/src/test/queries/clientnegative/clusterbyorderby.q
index d9ee9b9d26..1a03007aa2 100644
--- ql/src/test/queries/clientnegative/clusterbyorderby.q
+++ ql/src/test/queries/clientnegative/clusterbyorderby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM src
 MAP src.key, CAST(src.key / 10 AS INT), CAST(src.key % 10 AS INT), src.value
 USING 'cat' AS (tkey, ten, one, tvalue)
diff --git ql/src/test/queries/clientnegative/clusterbysortby.q ql/src/test/queries/clientnegative/clusterbysortby.q
index 7b4e744ba6..341580ef07 100644
--- ql/src/test/queries/clientnegative/clusterbysortby.q
+++ ql/src/test/queries/clientnegative/clusterbysortby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, ten INT, one INT, value STRING) STORED AS TEXTFILE;
 
 FROM src
diff --git ql/src/test/queries/clientnegative/clustern2.q ql/src/test/queries/clientnegative/clustern2.q
index 9ed8944d2b..b139b94052 100644
--- ql/src/test/queries/clientnegative/clustern2.q
+++ ql/src/test/queries/clientnegative/clustern2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 SELECT x.key, x.value as v1, y.*  FROM SRC x JOIN SRC y ON (x.key = y.key) CLUSTER BY key;
 
diff --git ql/src/test/queries/clientnegative/clustern3.q ql/src/test/queries/clientnegative/clustern3.q
index 23f73667ed..65a9297d3b 100644
--- ql/src/test/queries/clientnegative/clustern3.q
+++ ql/src/test/queries/clientnegative/clustern3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 EXPLAIN
 SELECT x.key as k1, x.value FROM SRC x CLUSTER BY x.key;
diff --git ql/src/test/queries/clientnegative/clustern4.q ql/src/test/queries/clientnegative/clustern4.q
index 3a9b45ca60..d063af37b9 100644
--- ql/src/test/queries/clientnegative/clustern4.q
+++ ql/src/test/queries/clientnegative/clustern4.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 EXPLAIN
 SELECT x.key as k1, x.value FROM SRC x CLUSTER BY key;
diff --git ql/src/test/queries/clientnegative/column_rename1.q ql/src/test/queries/clientnegative/column_rename1.q
index d99b821802..46488146bf 100644
--- ql/src/test/queries/clientnegative/column_rename1.q
+++ ql/src/test/queries/clientnegative/column_rename1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table tstsrc;
 create table tstsrc like src;
 insert overwrite table tstsrc
diff --git ql/src/test/queries/clientnegative/column_rename2.q ql/src/test/queries/clientnegative/column_rename2.q
index cccc8ad54e..bdeebcff0f 100644
--- ql/src/test/queries/clientnegative/column_rename2.q
+++ ql/src/test/queries/clientnegative/column_rename2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table tstsrc;
 create table tstsrc like src;
 insert overwrite table tstsrc
diff --git ql/src/test/queries/clientnegative/column_rename3.q ql/src/test/queries/clientnegative/column_rename3.q
index 91c9537a99..9a7634c558 100644
--- ql/src/test/queries/clientnegative/column_rename3.q
+++ ql/src/test/queries/clientnegative/column_rename3.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 alter table src change key key;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/column_rename4.q ql/src/test/queries/clientnegative/column_rename4.q
index dd89a5a10b..4ec8e0fcea 100644
--- ql/src/test/queries/clientnegative/column_rename4.q
+++ ql/src/test/queries/clientnegative/column_rename4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table tstsrc;
 create table tstsrc like src;
 insert overwrite table tstsrc
diff --git ql/src/test/queries/clientnegative/compare_double_bigint.q ql/src/test/queries/clientnegative/compare_double_bigint.q
index 6580d88dfd..435ea9c2c7 100644
--- ql/src/test/queries/clientnegative/compare_double_bigint.q
+++ ql/src/test/queries/clientnegative/compare_double_bigint.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false; 
 
 set hive.mapred.mode=strict;
diff --git ql/src/test/queries/clientnegative/compare_double_bigint_2.q ql/src/test/queries/clientnegative/compare_double_bigint_2.q
index bc2d7cd157..eb4db30e22 100644
--- ql/src/test/queries/clientnegative/compare_double_bigint_2.q
+++ ql/src/test/queries/clientnegative/compare_double_bigint_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false;
 
 reset hive.mapred.mode;
diff --git ql/src/test/queries/clientnegative/compare_string_bigint.q ql/src/test/queries/clientnegative/compare_string_bigint.q
index ed816379c0..7e466483fc 100644
--- ql/src/test/queries/clientnegative/compare_string_bigint.q
+++ ql/src/test/queries/clientnegative/compare_string_bigint.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false; 
 
 set hive.mapred.mode=strict;
diff --git ql/src/test/queries/clientnegative/compare_string_bigint_2.q ql/src/test/queries/clientnegative/compare_string_bigint_2.q
index a439e33a3c..ac9b3edb84 100644
--- ql/src/test/queries/clientnegative/compare_string_bigint_2.q
+++ ql/src/test/queries/clientnegative/compare_string_bigint_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false; 
 
 reset hive.mapred.mode;
diff --git ql/src/test/queries/clientnegative/create_insert_outputformat.q ql/src/test/queries/clientnegative/create_insert_outputformat.q
index a052663055..6285230528 100644
--- ql/src/test/queries/clientnegative/create_insert_outputformat.q
+++ ql/src/test/queries/clientnegative/create_insert_outputformat.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 CREATE TABLE table_test_output_format(key INT, value STRING) STORED AS
diff --git ql/src/test/queries/clientnegative/create_or_replace_view1.q ql/src/test/queries/clientnegative/create_or_replace_view1.q
index c332278b84..81632a630e 100644
--- ql/src/test/queries/clientnegative/create_or_replace_view1.q
+++ ql/src/test/queries/clientnegative/create_or_replace_view1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- Cannot add or drop partition columns with CREATE OR REPLACE VIEW if partitions currently exist (must specify partition columns)
 
 drop view v;
diff --git ql/src/test/queries/clientnegative/create_or_replace_view2.q ql/src/test/queries/clientnegative/create_or_replace_view2.q
index b53dd07ce8..532c2a6e3c 100644
--- ql/src/test/queries/clientnegative/create_or_replace_view2.q
+++ ql/src/test/queries/clientnegative/create_or_replace_view2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- Cannot add or drop partition columns with CREATE OR REPLACE VIEW if partitions currently exist
 
 drop view v;
diff --git ql/src/test/queries/clientnegative/create_or_replace_view3.q ql/src/test/queries/clientnegative/create_or_replace_view3.q
index d6fa7785df..8defe40f3c 100644
--- ql/src/test/queries/clientnegative/create_or_replace_view3.q
+++ ql/src/test/queries/clientnegative/create_or_replace_view3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 -- Existing table is not a view
 
 create or replace view src as select ds, hr from srcpart;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/create_or_replace_view4.q ql/src/test/queries/clientnegative/create_or_replace_view4.q
index 12b6059b9e..1783837e35 100644
--- ql/src/test/queries/clientnegative/create_or_replace_view4.q
+++ ql/src/test/queries/clientnegative/create_or_replace_view4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- View must have at least one non-partition column.
 
 drop view v;
diff --git ql/src/test/queries/clientnegative/create_or_replace_view5.q ql/src/test/queries/clientnegative/create_or_replace_view5.q
index 4eb9c94896..7696cd48e2 100644
--- ql/src/test/queries/clientnegative/create_or_replace_view5.q
+++ ql/src/test/queries/clientnegative/create_or_replace_view5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- Can't combine IF NOT EXISTS and OR REPLACE.
 
 drop view v;
diff --git ql/src/test/queries/clientnegative/create_or_replace_view6.q ql/src/test/queries/clientnegative/create_or_replace_view6.q
index a2f916fb26..9483f60784 100644
--- ql/src/test/queries/clientnegative/create_or_replace_view6.q
+++ ql/src/test/queries/clientnegative/create_or_replace_view6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- Can't update view to have an invalid definition
 
 drop view v;
diff --git ql/src/test/queries/clientnegative/create_or_replace_view7.q ql/src/test/queries/clientnegative/create_or_replace_view7.q
index 765a96572a..5e5ae7a589 100644
--- ql/src/test/queries/clientnegative/create_or_replace_view7.q
+++ ql/src/test/queries/clientnegative/create_or_replace_view7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- Can't update view to have a view cycle (1)
 
 drop view v;
diff --git ql/src/test/queries/clientnegative/create_or_replace_view8.q ql/src/test/queries/clientnegative/create_or_replace_view8.q
index f3a59b1d07..473fcde367 100644
--- ql/src/test/queries/clientnegative/create_or_replace_view8.q
+++ ql/src/test/queries/clientnegative/create_or_replace_view8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- Can't update view to have a view cycle (2)
 
 drop view v;
diff --git ql/src/test/queries/clientnegative/create_table_failure1.q ql/src/test/queries/clientnegative/create_table_failure1.q
index e87c12b8a1..aebbecd94c 100644
--- ql/src/test/queries/clientnegative/create_table_failure1.q
+++ ql/src/test/queries/clientnegative/create_table_failure1.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 create table table_in_database_creation_not_exist.test as select * from src limit 1;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/create_table_failure2.q ql/src/test/queries/clientnegative/create_table_failure2.q
index 0bddae0664..e873f3469f 100644
--- ql/src/test/queries/clientnegative/create_table_failure2.q
+++ ql/src/test/queries/clientnegative/create_table_failure2.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 create table `table_in_database_creation_not_exist.test` as select * from src limit 1;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/create_udaf_failure.q ql/src/test/queries/clientnegative/create_udaf_failure.q
index e0bb408a64..a436c6285f 100644
--- ql/src/test/queries/clientnegative/create_udaf_failure.q
+++ ql/src/test/queries/clientnegative/create_udaf_failure.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TEMPORARY FUNCTION test_udaf AS 'org.apache.hadoop.hive.ql.udf.UDAFWrongArgLengthForTestCase';
 
 EXPLAIN
diff --git ql/src/test/queries/clientnegative/create_view_failure1.q ql/src/test/queries/clientnegative/create_view_failure1.q
index c9060c6766..3498a70e86 100644
--- ql/src/test/queries/clientnegative/create_view_failure1.q
+++ ql/src/test/queries/clientnegative/create_view_failure1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 DROP VIEW xxx12;
 
diff --git ql/src/test/queries/clientnegative/create_view_failure2.q ql/src/test/queries/clientnegative/create_view_failure2.q
index 6fdcd4a9d3..c450e4231e 100644
--- ql/src/test/queries/clientnegative/create_view_failure2.q
+++ ql/src/test/queries/clientnegative/create_view_failure2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 DROP VIEW xxx4;
 
diff --git ql/src/test/queries/clientnegative/create_view_failure3.q ql/src/test/queries/clientnegative/create_view_failure3.q
index ad5fc499ed..eae3521c64 100644
--- ql/src/test/queries/clientnegative/create_view_failure3.q
+++ ql/src/test/queries/clientnegative/create_view_failure3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx13;
 
 -- number of explicit view column defs must match underlying SELECT
diff --git ql/src/test/queries/clientnegative/create_view_failure4.q ql/src/test/queries/clientnegative/create_view_failure4.q
index eecde65e11..8c8ecae5e0 100644
--- ql/src/test/queries/clientnegative/create_view_failure4.q
+++ ql/src/test/queries/clientnegative/create_view_failure4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx5;
 
 -- duplicate column names are illegal
diff --git ql/src/test/queries/clientnegative/create_view_failure5.q ql/src/test/queries/clientnegative/create_view_failure5.q
index f720899168..92613e7d2e 100644
--- ql/src/test/queries/clientnegative/create_view_failure5.q
+++ ql/src/test/queries/clientnegative/create_view_failure5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx14;
 
 -- Ideally (and according to SQL:200n), this should actually be legal,
diff --git ql/src/test/queries/clientnegative/create_view_failure6.q ql/src/test/queries/clientnegative/create_view_failure6.q
index 57f52a8af1..8fc35038d0 100644
--- ql/src/test/queries/clientnegative/create_view_failure6.q
+++ ql/src/test/queries/clientnegative/create_view_failure6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx15;
 
 -- should fail:  baz is not a column
diff --git ql/src/test/queries/clientnegative/create_view_failure7.q ql/src/test/queries/clientnegative/create_view_failure7.q
index 00d7f9fbf4..5bd28fabda 100644
--- ql/src/test/queries/clientnegative/create_view_failure7.q
+++ ql/src/test/queries/clientnegative/create_view_failure7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx16;
 
 -- should fail:  must have at least one non-partitioning column
diff --git ql/src/test/queries/clientnegative/create_view_failure8.q ql/src/test/queries/clientnegative/create_view_failure8.q
index 08291826d9..d8e673ad48 100644
--- ql/src/test/queries/clientnegative/create_view_failure8.q
+++ ql/src/test/queries/clientnegative/create_view_failure8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx17;
 
 -- should fail:  partitioning key must be at end
diff --git ql/src/test/queries/clientnegative/create_view_failure9.q ql/src/test/queries/clientnegative/create_view_failure9.q
index d7d44a49c3..440ce3769a 100644
--- ql/src/test/queries/clientnegative/create_view_failure9.q
+++ ql/src/test/queries/clientnegative/create_view_failure9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx18;
 
 -- should fail:  partitioning columns out of order
diff --git ql/src/test/queries/clientnegative/ctas.q ql/src/test/queries/clientnegative/ctas.q
index 507a7a76b1..548ad050ca 100644
--- ql/src/test/queries/clientnegative/ctas.q
+++ ql/src/test/queries/clientnegative/ctas.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 create external table nzhang_ctas4 as select key, value from src;
diff --git ql/src/test/queries/clientnegative/ctas_noemptyfolder.q ql/src/test/queries/clientnegative/ctas_noemptyfolder.q
index 18c9086af3..3c79bae3de 100644
--- ql/src/test/queries/clientnegative/ctas_noemptyfolder.q
+++ ql/src/test/queries/clientnegative/ctas_noemptyfolder.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table ctas1 
 location 'file:${system:test.tmp.dir}/ctastmpfolder' 
 as 
diff --git ql/src/test/queries/clientnegative/ctasnullcol.q ql/src/test/queries/clientnegative/ctasnullcol.q
index 8b505ce05f..b0b7a0254a 100644
--- ql/src/test/queries/clientnegative/ctasnullcol.q
+++ ql/src/test/queries/clientnegative/ctasnullcol.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table if exists orc_table_with_null;
 CREATE TABLE orc_table_with_null STORED AS ORC AS SELECT key, null FROM src; 
diff --git ql/src/test/queries/clientnegative/date_literal2.q ql/src/test/queries/clientnegative/date_literal2.q
index 711dc9e0fd..021d20c2df 100644
--- ql/src/test/queries/clientnegative/date_literal2.q
+++ ql/src/test/queries/clientnegative/date_literal2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- Not in YYYY-MM-DD format
 SELECT DATE '2001/01/01' FROM src LIMIT 2;
diff --git ql/src/test/queries/clientnegative/date_literal3.q ql/src/test/queries/clientnegative/date_literal3.q
index 9483509b6b..e5a241db32 100644
--- ql/src/test/queries/clientnegative/date_literal3.q
+++ ql/src/test/queries/clientnegative/date_literal3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- Invalid date value
 SELECT DATE '2001-01-32' FROM src;
diff --git ql/src/test/queries/clientnegative/delete_non_acid_table.q ql/src/test/queries/clientnegative/delete_non_acid_table.q
index 201e32276d..38fd0ff84d 100644
--- ql/src/test/queries/clientnegative/delete_non_acid_table.q
+++ ql/src/test/queries/clientnegative/delete_non_acid_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientnegative/desc_failure2.q ql/src/test/queries/clientnegative/desc_failure2.q
index f28b610466..57e58969d9 100644
--- ql/src/test/queries/clientnegative/desc_failure2.q
+++ ql/src/test/queries/clientnegative/desc_failure2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:srcpart
 DESC srcpart;
 DESC srcpart PARTITION(ds='2012-04-08', hr='15');
diff --git ql/src/test/queries/clientnegative/desc_failure3.q ql/src/test/queries/clientnegative/desc_failure3.q
index bee0ea5788..3ec6965028 100644
--- ql/src/test/queries/clientnegative/desc_failure3.q
+++ ql/src/test/queries/clientnegative/desc_failure3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 CREATE DATABASE db1;
 CREATE TABLE db1.t1(key1 INT, value1 STRING) PARTITIONED BY (ds STRING, part STRING);
 
diff --git ql/src/test/queries/clientnegative/describe_xpath1.q ql/src/test/queries/clientnegative/describe_xpath1.q
index 84a848e895..4787f5bd96 100644
--- ql/src/test/queries/clientnegative/describe_xpath1.q
+++ ql/src/test/queries/clientnegative/describe_xpath1.q
@@ -1 +1,2 @@
+--! qt:dataset:src_thrift
 describe src_thrift $elem$;
diff --git ql/src/test/queries/clientnegative/describe_xpath2.q ql/src/test/queries/clientnegative/describe_xpath2.q
index e223939915..6bd7f086a5 100644
--- ql/src/test/queries/clientnegative/describe_xpath2.q
+++ ql/src/test/queries/clientnegative/describe_xpath2.q
@@ -1 +1,2 @@
+--! qt:dataset:src_thrift
 describe src_thrift $key$;
diff --git ql/src/test/queries/clientnegative/describe_xpath3.q ql/src/test/queries/clientnegative/describe_xpath3.q
index 8400b9cb47..ec6a111661 100644
--- ql/src/test/queries/clientnegative/describe_xpath3.q
+++ ql/src/test/queries/clientnegative/describe_xpath3.q
@@ -1 +1,2 @@
+--! qt:dataset:src_thrift
 describe src_thrift lint.abc;
diff --git ql/src/test/queries/clientnegative/describe_xpath4.q ql/src/test/queries/clientnegative/describe_xpath4.q
index 27d3fea3e6..22c7e119dc 100644
--- ql/src/test/queries/clientnegative/describe_xpath4.q
+++ ql/src/test/queries/clientnegative/describe_xpath4.q
@@ -1 +1,2 @@
+--! qt:dataset:src_thrift
 describe src_thrift mStringString.abc;
diff --git ql/src/test/queries/clientnegative/disallow_incompatible_type_change_on1.q ql/src/test/queries/clientnegative/disallow_incompatible_type_change_on1.q
index cec9a0d50d..1fc833c541 100644
--- ql/src/test/queries/clientnegative/disallow_incompatible_type_change_on1.q
+++ ql/src/test/queries/clientnegative/disallow_incompatible_type_change_on1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.metastore.disallow.incompatible.col.type.changes=false;
 SELECT * FROM src LIMIT 1;
 CREATE TABLE test_table123 (a INT, b MAP<STRING, STRING>) PARTITIONED BY (ds STRING) STORED AS SEQUENCEFILE;
diff --git ql/src/test/queries/clientnegative/disallow_incompatible_type_change_on2.q ql/src/test/queries/clientnegative/disallow_incompatible_type_change_on2.q
index 4460c3edd7..6fdecae2b3 100644
--- ql/src/test/queries/clientnegative/disallow_incompatible_type_change_on2.q
+++ ql/src/test/queries/clientnegative/disallow_incompatible_type_change_on2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.metastore.disallow.incompatible.col.type.changes=true;
 SELECT * FROM src LIMIT 1;
 CREATE TABLE test_table123 (a INT, b STRING) PARTITIONED BY (ds STRING) STORED AS SEQUENCEFILE;
diff --git ql/src/test/queries/clientnegative/drop_table_failure2.q ql/src/test/queries/clientnegative/drop_table_failure2.q
index 631e4ffba7..b899bed3ba 100644
--- ql/src/test/queries/clientnegative/drop_table_failure2.q
+++ ql/src/test/queries/clientnegative/drop_table_failure2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE VIEW xxx6 AS SELECT key FROM src;
 -- Can't use DROP TABLE on a view
 DROP TABLE xxx6;
diff --git ql/src/test/queries/clientnegative/duplicate_alias_in_transform.q ql/src/test/queries/clientnegative/duplicate_alias_in_transform.q
index b2e8567f09..46547cc34c 100644
--- ql/src/test/queries/clientnegative/duplicate_alias_in_transform.q
+++ ql/src/test/queries/clientnegative/duplicate_alias_in_transform.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 FROM src SELECT TRANSFORM (key, value) USING "awk -F'\001' '{print $0}'" AS (foo, foo);
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/duplicate_alias_in_transform_schema.q ql/src/test/queries/clientnegative/duplicate_alias_in_transform_schema.q
index dabbc351bc..64620418c2 100644
--- ql/src/test/queries/clientnegative/duplicate_alias_in_transform_schema.q
+++ ql/src/test/queries/clientnegative/duplicate_alias_in_transform_schema.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 FROM src SELECT TRANSFORM (key, value) USING "awk -F'\001' '{print $0}'" AS (foo STRING, foo STRING);
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/duplicate_insert1.q ql/src/test/queries/clientnegative/duplicate_insert1.q
index fcbc7d5444..04452e21be 100644
--- ql/src/test/queries/clientnegative/duplicate_insert1.q
+++ ql/src/test/queries/clientnegative/duplicate_insert1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 create table dest1_din1(key int, value string);
 
diff --git ql/src/test/queries/clientnegative/duplicate_insert2.q ql/src/test/queries/clientnegative/duplicate_insert2.q
index 4f79a0352f..3b27c9dd04 100644
--- ql/src/test/queries/clientnegative/duplicate_insert2.q
+++ ql/src/test/queries/clientnegative/duplicate_insert2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 create table dest1_din2(key int, value string) partitioned by (ds string);
 
diff --git ql/src/test/queries/clientnegative/duplicate_insert3.q ql/src/test/queries/clientnegative/duplicate_insert3.q
index 7b271a56d1..41061a6972 100644
--- ql/src/test/queries/clientnegative/duplicate_insert3.q
+++ ql/src/test/queries/clientnegative/duplicate_insert3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 from src
 insert overwrite directory '${system:test.tmp.dir}/dest1' select key, value
diff --git ql/src/test/queries/clientnegative/dyn_part1.q ql/src/test/queries/clientnegative/dyn_part1.q
index 9f0b6c7a0c..200b68d442 100644
--- ql/src/test/queries/clientnegative/dyn_part1.q
+++ ql/src/test/queries/clientnegative/dyn_part1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nostrict;
 set hive.exec.max.dynamic.partitions=2;
diff --git ql/src/test/queries/clientnegative/dyn_part2.q ql/src/test/queries/clientnegative/dyn_part2.q
index 00a92783c0..787f2b06e2 100644
--- ql/src/test/queries/clientnegative/dyn_part2.q
+++ ql/src/test/queries/clientnegative/dyn_part2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 
 create table nzhang_part1 (key string, value string) partitioned by (ds string, hr string);
 
diff --git ql/src/test/queries/clientnegative/dyn_part3.q ql/src/test/queries/clientnegative/dyn_part3.q
index 7a8c58a6b2..adfa5966d3 100644
--- ql/src/test/queries/clientnegative/dyn_part3.q
+++ ql/src/test/queries/clientnegative/dyn_part3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.max.dynamic.partitions=600;
 set hive.exec.max.dynamic.partitions.pernode=600;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientnegative/dyn_part4.q ql/src/test/queries/clientnegative/dyn_part4.q
index 9aff7aa631..6f69821c66 100644
--- ql/src/test/queries/clientnegative/dyn_part4.q
+++ ql/src/test/queries/clientnegative/dyn_part4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 create table nzhang_part4 (key string) partitioned by (ds string, hr string, value string);
 
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientnegative/dyn_part_max.q ql/src/test/queries/clientnegative/dyn_part_max.q
index 6a7a6255b9..990d1c9ad4 100644
--- ql/src/test/queries/clientnegative/dyn_part_max.q
+++ ql/src/test/queries/clientnegative/dyn_part_max.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 USE default;
 
 -- Test of hive.exec.max.dynamic.partitions
diff --git ql/src/test/queries/clientnegative/dyn_part_max_per_node.q ql/src/test/queries/clientnegative/dyn_part_max_per_node.q
index a411ec520b..835a3d9fc1 100644
--- ql/src/test/queries/clientnegative/dyn_part_max_per_node.q
+++ ql/src/test/queries/clientnegative/dyn_part_max_per_node.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 USE default;
 
 -- Test of hive.exec.max.dynamic.partitions.pernode
diff --git ql/src/test/queries/clientnegative/dynamic_partitions_with_whitelist.q ql/src/test/queries/clientnegative/dynamic_partitions_with_whitelist.q
index 5d37c743ba..28fce6ff8a 100644
--- ql/src/test/queries/clientnegative/dynamic_partitions_with_whitelist.q
+++ ql/src/test/queries/clientnegative/dynamic_partitions_with_whitelist.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientnegative/exchange_partition.q ql/src/test/queries/clientnegative/exchange_partition.q
index 7dc4f57598..440c8b7ace 100644
--- ql/src/test/queries/clientnegative/exchange_partition.q
+++ ql/src/test/queries/clientnegative/exchange_partition.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 dfs ${system:test.dfs.mkdir} ${system:test.tmp.dir}/ex_table1;
 dfs ${system:test.dfs.mkdir} ${system:test.tmp.dir}/ex_table1/part=part1;
 CREATE EXTERNAL TABLE ex_table1 ( key INT, value STRING)
diff --git ql/src/test/queries/clientnegative/exchange_partition_neg_with_fullacid_table.q ql/src/test/queries/clientnegative/exchange_partition_neg_with_fullacid_table.q
index e94492d5a4..657efc4c9c 100644
--- ql/src/test/queries/clientnegative/exchange_partition_neg_with_fullacid_table.q
+++ ql/src/test/queries/clientnegative/exchange_partition_neg_with_fullacid_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 
diff --git ql/src/test/queries/clientnegative/fileformat_void_input.q ql/src/test/queries/clientnegative/fileformat_void_input.q
index c514562b24..d592d10fcb 100644
--- ql/src/test/queries/clientnegative/fileformat_void_input.q
+++ ql/src/test/queries/clientnegative/fileformat_void_input.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, value STRING) STORED AS
   INPUTFORMAT 'java.lang.Void'
   OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat';
diff --git ql/src/test/queries/clientnegative/fileformat_void_output.q ql/src/test/queries/clientnegative/fileformat_void_output.q
index a9cef1eada..07b751a96f 100644
--- ql/src/test/queries/clientnegative/fileformat_void_output.q
+++ ql/src/test/queries/clientnegative/fileformat_void_output.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, value STRING) STORED AS
   INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat'
   OUTPUTFORMAT 'java.lang.Void';
diff --git ql/src/test/queries/clientnegative/fs_default_name2.q ql/src/test/queries/clientnegative/fs_default_name2.q
index 4b9efda193..126e1fe444 100644
--- ql/src/test/queries/clientnegative/fs_default_name2.q
+++ ql/src/test/queries/clientnegative/fs_default_name2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 set fs.default.name='http://www.example.com';
 SELECT * FROM src;
diff --git ql/src/test/queries/clientnegative/gby_star.q ql/src/test/queries/clientnegative/gby_star.q
index 477c77c0aa..972212b0ff 100644
--- ql/src/test/queries/clientnegative/gby_star.q
+++ ql/src/test/queries/clientnegative/gby_star.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select *, count(value) from src group by key;
diff --git ql/src/test/queries/clientnegative/gby_star2.q ql/src/test/queries/clientnegative/gby_star2.q
index 7348e72a07..1910577e50 100644
--- ql/src/test/queries/clientnegative/gby_star2.q
+++ ql/src/test/queries/clientnegative/gby_star2.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select *, sum(key) from src;
diff --git ql/src/test/queries/clientnegative/groupby2_map_skew_multi_distinct.q ql/src/test/queries/clientnegative/groupby2_map_skew_multi_distinct.q
index cecd9c6bd8..44da334027 100644
--- ql/src/test/queries/clientnegative/groupby2_map_skew_multi_distinct.q
+++ ql/src/test/queries/clientnegative/groupby2_map_skew_multi_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
 set mapred.reduce.tasks=31;
diff --git ql/src/test/queries/clientnegative/groupby2_multi_distinct.q ql/src/test/queries/clientnegative/groupby2_multi_distinct.q
index e3b0066112..0626da1fff 100644
--- ql/src/test/queries/clientnegative/groupby2_multi_distinct.q
+++ ql/src/test/queries/clientnegative/groupby2_multi_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 set hive.groupby.skewindata=true;
 
diff --git ql/src/test/queries/clientnegative/groupby3_map_skew_multi_distinct.q ql/src/test/queries/clientnegative/groupby3_map_skew_multi_distinct.q
index 168aeb1261..51c22bed10 100644
--- ql/src/test/queries/clientnegative/groupby3_map_skew_multi_distinct.q
+++ ql/src/test/queries/clientnegative/groupby3_map_skew_multi_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
 set mapred.reduce.tasks=31;
diff --git ql/src/test/queries/clientnegative/groupby3_multi_distinct.q ql/src/test/queries/clientnegative/groupby3_multi_distinct.q
index 1a28477918..1304985b85 100644
--- ql/src/test/queries/clientnegative/groupby3_multi_distinct.q
+++ ql/src/test/queries/clientnegative/groupby3_multi_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 set hive.groupby.skewindata=true;
 
diff --git ql/src/test/queries/clientnegative/groupby_cube1.q ql/src/test/queries/clientnegative/groupby_cube1.q
index a0bc177ad6..16d910bf8e 100644
--- ql/src/test/queries/clientnegative/groupby_cube1.q
+++ ql/src/test/queries/clientnegative/groupby_cube1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 
 SELECT key, count(distinct value) FROM src GROUP BY key with cube;
diff --git ql/src/test/queries/clientnegative/groupby_cube2.q ql/src/test/queries/clientnegative/groupby_cube2.q
index f8ecb6a2d4..34a02aa555 100644
--- ql/src/test/queries/clientnegative/groupby_cube2.q
+++ ql/src/test/queries/clientnegative/groupby_cube2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 
 SELECT key, value, count(distinct value) FROM src GROUP BY key, value with cube;
diff --git ql/src/test/queries/clientnegative/groupby_cube_multi_gby.q ql/src/test/queries/clientnegative/groupby_cube_multi_gby.q
index cddbe1a031..e0d8ef4e7b 100644
--- ql/src/test/queries/clientnegative/groupby_cube_multi_gby.q
+++ ql/src/test/queries/clientnegative/groupby_cube_multi_gby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table t1 like src;
 create table t2 like src;
 
diff --git ql/src/test/queries/clientnegative/groupby_invalid_position.q ql/src/test/queries/clientnegative/groupby_invalid_position.q
index 173a752e35..55536c6ee7 100644
--- ql/src/test/queries/clientnegative/groupby_invalid_position.q
+++ ql/src/test/queries/clientnegative/groupby_invalid_position.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.groupby.orderby.position.alias=true;
 
 -- invalid position alias in group by
diff --git ql/src/test/queries/clientnegative/groupby_key.q ql/src/test/queries/clientnegative/groupby_key.q
index 20970152c3..eb529e842d 100644
--- ql/src/test/queries/clientnegative/groupby_key.q
+++ ql/src/test/queries/clientnegative/groupby_key.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT concat(value, concat(value)) FROM src GROUP BY concat(value);
diff --git ql/src/test/queries/clientnegative/groupby_rollup1.q ql/src/test/queries/clientnegative/groupby_rollup1.q
index 6366744276..bce1f88720 100644
--- ql/src/test/queries/clientnegative/groupby_rollup1.q
+++ ql/src/test/queries/clientnegative/groupby_rollup1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 
 SELECT key, value, count(1) FROM src GROUP BY key, value with rollup;
diff --git ql/src/test/queries/clientnegative/groupby_rollup2.q ql/src/test/queries/clientnegative/groupby_rollup2.q
index aa19b523e9..ad4cf1d7ca 100644
--- ql/src/test/queries/clientnegative/groupby_rollup2.q
+++ ql/src/test/queries/clientnegative/groupby_rollup2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 
 SELECT key, value, count(key) FROM src GROUP BY key, value with rollup;
diff --git ql/src/test/queries/clientnegative/having1.q ql/src/test/queries/clientnegative/having1.q
index 71f4fd13a0..ced3158358 100644
--- ql/src/test/queries/clientnegative/having1.q
+++ ql/src/test/queries/clientnegative/having1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 EXPLAIN SELECT * FROM src HAVING key > 300;
 SELECT * FROM src HAVING key > 300;
diff --git ql/src/test/queries/clientnegative/illegal_partition_type.q ql/src/test/queries/clientnegative/illegal_partition_type.q
index 1ab828c8be..08c248d51c 100644
--- ql/src/test/queries/clientnegative/illegal_partition_type.q
+++ ql/src/test/queries/clientnegative/illegal_partition_type.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- begin part(string, int) pass(string, string)
 CREATE TABLE tab1 (id1 int,id2 string) PARTITIONED BY(month string,day int) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' ;
 LOAD DATA LOCAL INPATH '../../data/files/T1.txt' overwrite into table tab1 PARTITION(month='June', day='second');
diff --git ql/src/test/queries/clientnegative/input1.q ql/src/test/queries/clientnegative/input1.q
index 92a6791acb..485e24e0e8 100644
--- ql/src/test/queries/clientnegative/input1.q
+++ ql/src/test/queries/clientnegative/input1.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT a.* FROM src; 
diff --git ql/src/test/queries/clientnegative/input2.q ql/src/test/queries/clientnegative/input2.q
index 0fe907d9d8..241bf7fd4b 100644
--- ql/src/test/queries/clientnegative/input2.q
+++ ql/src/test/queries/clientnegative/input2.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT a.key FROM src; 
diff --git ql/src/test/queries/clientnegative/input4.q ql/src/test/queries/clientnegative/input4.q
index 03cf127fb4..f4023c8e99 100644
--- ql/src/test/queries/clientnegative/input4.q
+++ ql/src/test/queries/clientnegative/input4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false; 
 
 set hive.mapred.mode=strict;
diff --git ql/src/test/queries/clientnegative/input41.q ql/src/test/queries/clientnegative/input41.q
index 872ab10148..06fb2d2d20 100644
--- ql/src/test/queries/clientnegative/input41.q
+++ ql/src/test/queries/clientnegative/input41.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 select * from 
   (select * from src 
     union all
diff --git ql/src/test/queries/clientnegative/input4_2.q ql/src/test/queries/clientnegative/input4_2.q
index ca8bcda6d7..6cf3349bd8 100644
--- ql/src/test/queries/clientnegative/input4_2.q
+++ ql/src/test/queries/clientnegative/input4_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false; 
 
 reset hive.mapred.mode;
diff --git ql/src/test/queries/clientnegative/input_part0_neg.q ql/src/test/queries/clientnegative/input_part0_neg.q
index 14f947c4cc..5a80a26232 100644
--- ql/src/test/queries/clientnegative/input_part0_neg.q
+++ ql/src/test/queries/clientnegative/input_part0_neg.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false; 
 
 set hive.mapred.mode=strict;
diff --git ql/src/test/queries/clientnegative/input_part0_neg_2.q ql/src/test/queries/clientnegative/input_part0_neg_2.q
index 91707448e2..4e192bc03d 100644
--- ql/src/test/queries/clientnegative/input_part0_neg_2.q
+++ ql/src/test/queries/clientnegative/input_part0_neg_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false; 
 
 reset hive.mapred.mode;
diff --git ql/src/test/queries/clientnegative/insert_into1.q ql/src/test/queries/clientnegative/insert_into1.q
index 8c19767021..e667b10348 100644
--- ql/src/test/queries/clientnegative/insert_into1.q
+++ ql/src/test/queries/clientnegative/insert_into1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.lock.numretries=5;
 set hive.lock.sleep.between.retries=5;
 
diff --git ql/src/test/queries/clientnegative/insert_into2.q ql/src/test/queries/clientnegative/insert_into2.q
index 73a3b6ff13..8735401b76 100644
--- ql/src/test/queries/clientnegative/insert_into2.q
+++ ql/src/test/queries/clientnegative/insert_into2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.lock.numretries=5;
 set hive.lock.sleep.between.retries=5;
 
diff --git ql/src/test/queries/clientnegative/insert_into3.q ql/src/test/queries/clientnegative/insert_into3.q
index 4d048b337e..0907cddb54 100644
--- ql/src/test/queries/clientnegative/insert_into3.q
+++ ql/src/test/queries/clientnegative/insert_into3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.lock.numretries=5;
 set hive.lock.sleep.between.retries=5;
 
diff --git ql/src/test/queries/clientnegative/insert_into4.q ql/src/test/queries/clientnegative/insert_into4.q
index b8944e742b..134ca7b781 100644
--- ql/src/test/queries/clientnegative/insert_into4.q
+++ ql/src/test/queries/clientnegative/insert_into4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.lock.numretries=5;
 set hive.lock.sleep.between.retries=5;
 
diff --git ql/src/test/queries/clientnegative/insert_into5.q ql/src/test/queries/clientnegative/insert_into5.q
index c20c168a88..695e1dfdc3 100644
--- ql/src/test/queries/clientnegative/insert_into5.q
+++ ql/src/test/queries/clientnegative/insert_into5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE if exists insert_into5_neg;
 
 CREATE TABLE insert_into5_neg (key int, value string) TBLPROPERTIES ("immutable"="true");
diff --git ql/src/test/queries/clientnegative/insert_into6.q ql/src/test/queries/clientnegative/insert_into6.q
index 588cf86470..49cee7cc84 100644
--- ql/src/test/queries/clientnegative/insert_into6.q
+++ ql/src/test/queries/clientnegative/insert_into6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 DROP TABLE IF EXISTS insert_into6_neg;
diff --git ql/src/test/queries/clientnegative/insert_multi_into_notnull.q ql/src/test/queries/clientnegative/insert_multi_into_notnull.q
index 2c4ec1eff2..7206ede798 100644
--- ql/src/test/queries/clientnegative/insert_multi_into_notnull.q
+++ ql/src/test/queries/clientnegative/insert_multi_into_notnull.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table src_multi1 (a STRING NOT NULL ENFORCED, b STRING);
 create table src_multi2 (i STRING, j STRING NOT NULL ENFORCED);
 
diff --git ql/src/test/queries/clientnegative/insert_view_failure.q ql/src/test/queries/clientnegative/insert_view_failure.q
index 1f5e139062..52d5863eec 100644
--- ql/src/test/queries/clientnegative/insert_view_failure.q
+++ ql/src/test/queries/clientnegative/insert_view_failure.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx2;
 CREATE VIEW xxx2 AS SELECT * FROM src;
 INSERT OVERWRITE TABLE xxx2
diff --git ql/src/test/queries/clientnegative/insertexternal1.q ql/src/test/queries/clientnegative/insertexternal1.q
index 01ebae1022..6650c081a1 100644
--- ql/src/test/queries/clientnegative/insertexternal1.q
+++ ql/src/test/queries/clientnegative/insertexternal1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.insert.into.external.tables=false;
 
 
diff --git ql/src/test/queries/clientnegative/insertover_dynapart_ifnotexists.q ql/src/test/queries/clientnegative/insertover_dynapart_ifnotexists.q
index 01fdb87ff7..9743fee721 100644
--- ql/src/test/queries/clientnegative/insertover_dynapart_ifnotexists.q
+++ ql/src/test/queries/clientnegative/insertover_dynapart_ifnotexists.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false;
 
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientnegative/insertsel_fail.q ql/src/test/queries/clientnegative/insertsel_fail.q
index c14fefd565..b5d8ecf658 100644
--- ql/src/test/queries/clientnegative/insertsel_fail.q
+++ ql/src/test/queries/clientnegative/insertsel_fail.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 insert overwrite directory 'target/warehouse/aret.out' select a.key src a;
diff --git ql/src/test/queries/clientnegative/interval_1.q ql/src/test/queries/clientnegative/interval_1.q
index 0db864d3e0..6da3ad25fb 100644
--- ql/src/test/queries/clientnegative/interval_1.q
+++ ql/src/test/queries/clientnegative/interval_1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- year-month/day-time intervals not compatible
 select interval_day_time(interval '1' year) from src limit 1;
diff --git ql/src/test/queries/clientnegative/interval_2.q ql/src/test/queries/clientnegative/interval_2.q
index 0af08ac0ef..1eff403b8e 100644
--- ql/src/test/queries/clientnegative/interval_2.q
+++ ql/src/test/queries/clientnegative/interval_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- year-month/day-time intervals not compatible
 select interval '1' year - interval '365' day from src limit 1;
 
diff --git ql/src/test/queries/clientnegative/interval_3.q ql/src/test/queries/clientnegative/interval_3.q
index 1e2252ff34..8cd3070f6b 100644
--- ql/src/test/queries/clientnegative/interval_3.q
+++ ql/src/test/queries/clientnegative/interval_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- year-month/day-time intervals not compatible
 select interval '1' year + interval '365' day from src limit 1;
 
diff --git ql/src/test/queries/clientnegative/invalid_avg_syntax.q ql/src/test/queries/clientnegative/invalid_avg_syntax.q
index d5b58e0765..15cbf66e9f 100644
--- ql/src/test/queries/clientnegative/invalid_avg_syntax.q
+++ ql/src/test/queries/clientnegative/invalid_avg_syntax.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT avg(*) FROM src;
diff --git ql/src/test/queries/clientnegative/invalid_cast_to_binary_1.q ql/src/test/queries/clientnegative/invalid_cast_to_binary_1.q
index 00cd98ed13..317e0814e7 100644
--- ql/src/test/queries/clientnegative/invalid_cast_to_binary_1.q
+++ ql/src/test/queries/clientnegative/invalid_cast_to_binary_1.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select cast (2 as binary) from src limit 1;
diff --git ql/src/test/queries/clientnegative/invalid_cast_to_binary_2.q ql/src/test/queries/clientnegative/invalid_cast_to_binary_2.q
index f31344f835..116776d516 100644
--- ql/src/test/queries/clientnegative/invalid_cast_to_binary_2.q
+++ ql/src/test/queries/clientnegative/invalid_cast_to_binary_2.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select cast(cast (2 as smallint) as binary) from src limit 1;
diff --git ql/src/test/queries/clientnegative/invalid_cast_to_binary_3.q ql/src/test/queries/clientnegative/invalid_cast_to_binary_3.q
index af23d29f4e..5797773380 100644
--- ql/src/test/queries/clientnegative/invalid_cast_to_binary_3.q
+++ ql/src/test/queries/clientnegative/invalid_cast_to_binary_3.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select cast(cast (2 as tinyint) as binary)  from src limit 1;
diff --git ql/src/test/queries/clientnegative/invalid_cast_to_binary_4.q ql/src/test/queries/clientnegative/invalid_cast_to_binary_4.q
index 91abe1e6b8..0decaad16c 100644
--- ql/src/test/queries/clientnegative/invalid_cast_to_binary_4.q
+++ ql/src/test/queries/clientnegative/invalid_cast_to_binary_4.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select cast(cast (2 as bigint) as binary) from src limit 1;
diff --git ql/src/test/queries/clientnegative/invalid_cast_to_binary_5.q ql/src/test/queries/clientnegative/invalid_cast_to_binary_5.q
index afd99be976..b4087b64da 100644
--- ql/src/test/queries/clientnegative/invalid_cast_to_binary_5.q
+++ ql/src/test/queries/clientnegative/invalid_cast_to_binary_5.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select cast(cast (2 as float) as binary)  from src limit 1;
diff --git ql/src/test/queries/clientnegative/invalid_cast_to_binary_6.q ql/src/test/queries/clientnegative/invalid_cast_to_binary_6.q
index c2143c5c9e..22f51f5e56 100644
--- ql/src/test/queries/clientnegative/invalid_cast_to_binary_6.q
+++ ql/src/test/queries/clientnegative/invalid_cast_to_binary_6.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select cast(cast (2 as double) as binary)  from src limit 1;
diff --git ql/src/test/queries/clientnegative/invalid_char_length_2.q ql/src/test/queries/clientnegative/invalid_char_length_2.q
index 866b43d312..bdeae7b5f4 100644
--- ql/src/test/queries/clientnegative/invalid_char_length_2.q
+++ ql/src/test/queries/clientnegative/invalid_char_length_2.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select cast(value as char(100000)) from src limit 1;
diff --git ql/src/test/queries/clientnegative/invalid_distinct1.q ql/src/test/queries/clientnegative/invalid_distinct1.q
index 6f688e386e..07ae6c05e3 100644
--- ql/src/test/queries/clientnegative/invalid_distinct1.q
+++ ql/src/test/queries/clientnegative/invalid_distinct1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 explain select hash(distinct value) from src;
diff --git ql/src/test/queries/clientnegative/invalid_distinct2.q ql/src/test/queries/clientnegative/invalid_distinct2.q
index b01218eb00..0305d62c81 100644
--- ql/src/test/queries/clientnegative/invalid_distinct2.q
+++ ql/src/test/queries/clientnegative/invalid_distinct2.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 explain select explode(distinct value) from src;
diff --git ql/src/test/queries/clientnegative/invalid_distinct3.q ql/src/test/queries/clientnegative/invalid_distinct3.q
index e05acca097..a93c6666b0 100644
--- ql/src/test/queries/clientnegative/invalid_distinct3.q
+++ ql/src/test/queries/clientnegative/invalid_distinct3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 explain select hash(upper(distinct value)) from src;
diff --git ql/src/test/queries/clientnegative/invalid_mapjoin1.q ql/src/test/queries/clientnegative/invalid_mapjoin1.q
index a6efd447a3..3a3f81c0dd 100644
--- ql/src/test/queries/clientnegative/invalid_mapjoin1.q
+++ ql/src/test/queries/clientnegative/invalid_mapjoin1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 select /*+ MAPJOIN(a) ,MAPJOIN(b)*/ * from src a join src b on (a.key=b.key and a.value=b.value);
diff --git ql/src/test/queries/clientnegative/invalid_max_syntax.q ql/src/test/queries/clientnegative/invalid_max_syntax.q
index 2003373409..e404969bd3 100644
--- ql/src/test/queries/clientnegative/invalid_max_syntax.q
+++ ql/src/test/queries/clientnegative/invalid_max_syntax.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT max(*) FROM src;
diff --git ql/src/test/queries/clientnegative/invalid_min_syntax.q ql/src/test/queries/clientnegative/invalid_min_syntax.q
index 584283a08a..07f4ce6ab2 100644
--- ql/src/test/queries/clientnegative/invalid_min_syntax.q
+++ ql/src/test/queries/clientnegative/invalid_min_syntax.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT min(*) FROM src;
diff --git ql/src/test/queries/clientnegative/invalid_select_fn.q ql/src/test/queries/clientnegative/invalid_select_fn.q
index b01d29bc1a..1c5064e583 100644
--- ql/src/test/queries/clientnegative/invalid_select_fn.q
+++ ql/src/test/queries/clientnegative/invalid_select_fn.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 explain create table src_invalid as select average(key) as key_avg from src group by value;
diff --git ql/src/test/queries/clientnegative/invalid_std_syntax.q ql/src/test/queries/clientnegative/invalid_std_syntax.q
index 13104198a6..90a630993a 100644
--- ql/src/test/queries/clientnegative/invalid_std_syntax.q
+++ ql/src/test/queries/clientnegative/invalid_std_syntax.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT std(*) FROM src;
diff --git ql/src/test/queries/clientnegative/invalid_stddev_samp_syntax.q ql/src/test/queries/clientnegative/invalid_stddev_samp_syntax.q
index c6a1252655..ad5c2afdd6 100644
--- ql/src/test/queries/clientnegative/invalid_stddev_samp_syntax.q
+++ ql/src/test/queries/clientnegative/invalid_stddev_samp_syntax.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT stddev_samp(*) FROM src;
diff --git ql/src/test/queries/clientnegative/invalid_sum_syntax.q ql/src/test/queries/clientnegative/invalid_sum_syntax.q
index 2d591baa24..b211561571 100644
--- ql/src/test/queries/clientnegative/invalid_sum_syntax.q
+++ ql/src/test/queries/clientnegative/invalid_sum_syntax.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT sum(*) FROM src;
diff --git ql/src/test/queries/clientnegative/invalid_t_transform.q ql/src/test/queries/clientnegative/invalid_t_transform.q
index dfc4864acf..395dffffc0 100644
--- ql/src/test/queries/clientnegative/invalid_t_transform.q
+++ ql/src/test/queries/clientnegative/invalid_t_transform.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT TRANSFORM(*) USING 'cat' AS (key DATETIME) FROM src;
diff --git ql/src/test/queries/clientnegative/invalid_var_samp_syntax.q ql/src/test/queries/clientnegative/invalid_var_samp_syntax.q
index ce2a8c4769..3a6e826107 100644
--- ql/src/test/queries/clientnegative/invalid_var_samp_syntax.q
+++ ql/src/test/queries/clientnegative/invalid_var_samp_syntax.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT var_samp(*) FROM src;
diff --git ql/src/test/queries/clientnegative/invalid_varchar_length_2.q ql/src/test/queries/clientnegative/invalid_varchar_length_2.q
index 3c199d31e7..c2f76e7c87 100644
--- ql/src/test/queries/clientnegative/invalid_varchar_length_2.q
+++ ql/src/test/queries/clientnegative/invalid_varchar_length_2.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select cast(value as varchar(100000)) from src limit 1;
diff --git ql/src/test/queries/clientnegative/invalid_variance_syntax.q ql/src/test/queries/clientnegative/invalid_variance_syntax.q
index 5b47829931..80f5f9ec20 100644
--- ql/src/test/queries/clientnegative/invalid_variance_syntax.q
+++ ql/src/test/queries/clientnegative/invalid_variance_syntax.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT variance(*) FROM src;
diff --git ql/src/test/queries/clientnegative/join2.q ql/src/test/queries/clientnegative/join2.q
index aad29c7cbb..71d9c3c84d 100644
--- ql/src/test/queries/clientnegative/join2.q
+++ ql/src/test/queries/clientnegative/join2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.cbo.enable=false;
 SELECT /*+ MAPJOIN(x) */ x.key, x.value, y.value
 FROM src1 x LEFT OUTER JOIN src y ON (x.key = y.key);
diff --git ql/src/test/queries/clientnegative/join28.q ql/src/test/queries/clientnegative/join28.q
index a3fbb4ef52..0ffdd5699a 100644
--- ql/src/test/queries/clientnegative/join28.q
+++ ql/src/test/queries/clientnegative/join28.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 CREATE TABLE dest_j1(key STRING, value STRING) STORED AS TEXTFILE;
 set hive.cbo.enable=false;
 -- Mapjoin followed by mapjoin is not supported.
diff --git ql/src/test/queries/clientnegative/join29.q ql/src/test/queries/clientnegative/join29.q
index 72aa1adff7..fd47a11dda 100644
--- ql/src/test/queries/clientnegative/join29.q
+++ ql/src/test/queries/clientnegative/join29.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 CREATE TABLE dest_j1(key STRING, cnt1 INT, cnt2 INT);
 set hive.cbo.enable=false;
 -- Mapjoin followed by group by is not supported.
diff --git ql/src/test/queries/clientnegative/join32.q ql/src/test/queries/clientnegative/join32.q
index f0547ecf72..8c9391451b 100644
--- ql/src/test/queries/clientnegative/join32.q
+++ ql/src/test/queries/clientnegative/join32.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.cbo.enable=false;
 CREATE TABLE dest_j1(key STRING, value STRING, val2 STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientnegative/join35.q ql/src/test/queries/clientnegative/join35.q
index bd9e8bb2c3..252f66b1e4 100644
--- ql/src/test/queries/clientnegative/join35.q
+++ ql/src/test/queries/clientnegative/join35.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 CREATE TABLE dest_j1(key STRING, value STRING, val2 INT) STORED AS TEXTFILE;
 set hive.cbo.enable=false;
 -- Mapjoin followed by union is not supported.
diff --git ql/src/test/queries/clientnegative/join_alt_syntax_comma_on.q ql/src/test/queries/clientnegative/join_alt_syntax_comma_on.q
index e39a38e2fc..21782686fe 100644
--- ql/src/test/queries/clientnegative/join_alt_syntax_comma_on.q
+++ ql/src/test/queries/clientnegative/join_alt_syntax_comma_on.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain select *
 from src s1 , 
 src s2 on s1.key = s2.key;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/join_cond_unqual_ambiguous.q ql/src/test/queries/clientnegative/join_cond_unqual_ambiguous.q
index 0c58f58b1d..5e10c6daa1 100644
--- ql/src/test/queries/clientnegative/join_cond_unqual_ambiguous.q
+++ ql/src/test/queries/clientnegative/join_cond_unqual_ambiguous.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientnegative/join_cond_unqual_ambiguous_vc.q ql/src/test/queries/clientnegative/join_cond_unqual_ambiguous_vc.q
index 3db7aa6dd4..3b5c6cd27b 100644
--- ql/src/test/queries/clientnegative/join_cond_unqual_ambiguous_vc.q
+++ ql/src/test/queries/clientnegative/join_cond_unqual_ambiguous_vc.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 explain select s1.key, s2.key
diff --git ql/src/test/queries/clientnegative/joinneg.q ql/src/test/queries/clientnegative/joinneg.q
index a4967fd5df..9f965b424b 100644
--- ql/src/test/queries/clientnegative/joinneg.q
+++ ql/src/test/queries/clientnegative/joinneg.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN FROM 
 (SELECT src.* FROM src) x
 JOIN 
diff --git ql/src/test/queries/clientnegative/lateral_view_alias.q ql/src/test/queries/clientnegative/lateral_view_alias.q
index 50d535e6e1..3b44d43634 100644
--- ql/src/test/queries/clientnegative/lateral_view_alias.q
+++ ql/src/test/queries/clientnegative/lateral_view_alias.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Check alias count for LATERAL VIEW syntax:
 -- explode returns a table with only 1 col - should be an error if query specifies >1 col aliases
 SELECT * FROM src LATERAL VIEW explode(array(1,2,3)) myTable AS myCol1, myCol2 LIMIT 3;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/lateral_view_join.q ql/src/test/queries/clientnegative/lateral_view_join.q
index 818754ecbf..e33663e638 100644
--- ql/src/test/queries/clientnegative/lateral_view_join.q
+++ ql/src/test/queries/clientnegative/lateral_view_join.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT src.key FROM src LATERAL VIEW explode(array(1,2,3)) AS myTable JOIN src b ON src.key;
diff --git ql/src/test/queries/clientnegative/load_view_failure.q ql/src/test/queries/clientnegative/load_view_failure.q
index 64182eac83..7c43541afa 100644
--- ql/src/test/queries/clientnegative/load_view_failure.q
+++ ql/src/test/queries/clientnegative/load_view_failure.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW xxx11;
 CREATE VIEW xxx11 AS SELECT * FROM src;
 LOAD DATA LOCAL INPATH '../../data/files/kv1.txt' INTO TABLE xxx11;
diff --git ql/src/test/queries/clientnegative/local_mapred_error_cache.q ql/src/test/queries/clientnegative/local_mapred_error_cache.q
index ed9e21dd8a..8ee1358cbd 100644
--- ql/src/test/queries/clientnegative/local_mapred_error_cache.q
+++ ql/src/test/queries/clientnegative/local_mapred_error_cache.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.mode.local.auto=true;
 set hive.exec.failure.hooks=org.apache.hadoop.hive.ql.hooks.VerifySessionStateLocalErrorsHook;
 
diff --git ql/src/test/queries/clientnegative/lockneg1.q ql/src/test/queries/clientnegative/lockneg1.q
index e1b58fca80..90a23c4e30 100644
--- ql/src/test/queries/clientnegative/lockneg1.q
+++ ql/src/test/queries/clientnegative/lockneg1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table tstsrc;
 create table tstsrc like src;
 insert overwrite table tstsrc select key, value from src;
diff --git ql/src/test/queries/clientnegative/lockneg2.q ql/src/test/queries/clientnegative/lockneg2.q
index a4604cd470..e073b624a2 100644
--- ql/src/test/queries/clientnegative/lockneg2.q
+++ ql/src/test/queries/clientnegative/lockneg2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table tstsrc;
 create table tstsrc like src;
 insert overwrite table tstsrc select key, value from src;
diff --git ql/src/test/queries/clientnegative/lockneg3.q ql/src/test/queries/clientnegative/lockneg3.q
index f2252f7bdf..a606d62bbf 100644
--- ql/src/test/queries/clientnegative/lockneg3.q
+++ ql/src/test/queries/clientnegative/lockneg3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 drop table tstsrcpart;
 create table tstsrcpart like srcpart;
 
diff --git ql/src/test/queries/clientnegative/lockneg4.q ql/src/test/queries/clientnegative/lockneg4.q
index b47644cca3..021832beee 100644
--- ql/src/test/queries/clientnegative/lockneg4.q
+++ ql/src/test/queries/clientnegative/lockneg4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 drop table tstsrcpart;
 create table tstsrcpart like srcpart;
 
diff --git ql/src/test/queries/clientnegative/lockneg_query_tbl_in_locked_db.q ql/src/test/queries/clientnegative/lockneg_query_tbl_in_locked_db.q
index 6ccdae30da..b68e7121e2 100644
--- ql/src/test/queries/clientnegative/lockneg_query_tbl_in_locked_db.q
+++ ql/src/test/queries/clientnegative/lockneg_query_tbl_in_locked_db.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.compute.query.using.stats=false;
 create database lockneg1;
 use lockneg1;
diff --git ql/src/test/queries/clientnegative/lockneg_try_lock_db_in_use.q ql/src/test/queries/clientnegative/lockneg_try_lock_db_in_use.q
index 85bd4252cb..cbb1e836ad 100644
--- ql/src/test/queries/clientnegative/lockneg_try_lock_db_in_use.q
+++ ql/src/test/queries/clientnegative/lockneg_try_lock_db_in_use.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.lock.numretries=0;
 
 create database lockneg2;
diff --git ql/src/test/queries/clientnegative/mapreduce_stack_trace.q ql/src/test/queries/clientnegative/mapreduce_stack_trace.q
index 76c7ae94d4..3d66bc2c49 100644
--- ql/src/test/queries/clientnegative/mapreduce_stack_trace.q
+++ ql/src/test/queries/clientnegative/mapreduce_stack_trace.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.mode.local.auto=false;
 set hive.exec.job.debug.capture.stacktraces=true;
 set hive.exec.failure.hooks=org.apache.hadoop.hive.ql.hooks.VerifySessionStateStackTracesHook;
diff --git ql/src/test/queries/clientnegative/mapreduce_stack_trace_turnoff.q ql/src/test/queries/clientnegative/mapreduce_stack_trace_turnoff.q
index c93aedb313..5d00ef99f7 100644
--- ql/src/test/queries/clientnegative/mapreduce_stack_trace_turnoff.q
+++ ql/src/test/queries/clientnegative/mapreduce_stack_trace_turnoff.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.mode.local.auto=false;
 set hive.exec.job.debug.capture.stacktraces=false;
 set hive.exec.failure.hooks=org.apache.hadoop.hive.ql.hooks.VerifySessionStateStackTracesHook;
diff --git ql/src/test/queries/clientnegative/merge_negative_2.q ql/src/test/queries/clientnegative/merge_negative_2.q
index a4fab1c8b8..2c31e8c339 100644
--- ql/src/test/queries/clientnegative/merge_negative_2.q
+++ ql/src/test/queries/clientnegative/merge_negative_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table srcpart2 (key int, value string) partitioned by (ds string);
 insert overwrite table srcpart2 partition (ds='2011') select * from src;
 alter table srcpart2 concatenate;
diff --git ql/src/test/queries/clientnegative/merge_negative_3.q ql/src/test/queries/clientnegative/merge_negative_3.q
index f5eb231dff..1664b9cafd 100644
--- ql/src/test/queries/clientnegative/merge_negative_3.q
+++ ql/src/test/queries/clientnegative/merge_negative_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 
diff --git ql/src/test/queries/clientnegative/merge_negative_4.q ql/src/test/queries/clientnegative/merge_negative_4.q
index c2b9254474..07b6d143d1 100644
--- ql/src/test/queries/clientnegative/merge_negative_4.q
+++ ql/src/test/queries/clientnegative/merge_negative_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 
diff --git ql/src/test/queries/clientnegative/merge_negative_5.q ql/src/test/queries/clientnegative/merge_negative_5.q
index 8039676a7b..93d00a07f5 100644
--- ql/src/test/queries/clientnegative/merge_negative_5.q
+++ ql/src/test/queries/clientnegative/merge_negative_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientnegative/minimr_broken_pipe.q ql/src/test/queries/clientnegative/minimr_broken_pipe.q
index 8dda9cdf4a..4960089d56 100644
--- ql/src/test/queries/clientnegative/minimr_broken_pipe.q
+++ ql/src/test/queries/clientnegative/minimr_broken_pipe.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 set hive.exec.script.allow.partial.consumption = false;
 -- Tests exception in ScriptOperator.close() by passing to the operator a small amount of data
diff --git ql/src/test/queries/clientnegative/mismatch_columns_insertion.q ql/src/test/queries/clientnegative/mismatch_columns_insertion.q
index dad1ec11bd..046a77133b 100644
--- ql/src/test/queries/clientnegative/mismatch_columns_insertion.q
+++ ql/src/test/queries/clientnegative/mismatch_columns_insertion.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 
 create table mismatch_columns(key string, value string);
 
diff --git ql/src/test/queries/clientnegative/mm_concatenate.q ql/src/test/queries/clientnegative/mm_concatenate.q
index 4b13c60f30..c825258e54 100644
--- ql/src/test/queries/clientnegative/mm_concatenate.q
+++ ql/src/test/queries/clientnegative/mm_concatenate.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 
diff --git ql/src/test/queries/clientnegative/no_matching_udf.q ql/src/test/queries/clientnegative/no_matching_udf.q
index 0c24b1626a..6cbac9e3c9 100644
--- ql/src/test/queries/clientnegative/no_matching_udf.q
+++ ql/src/test/queries/clientnegative/no_matching_udf.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT percentile(3.5, 0.99) FROM src;
diff --git ql/src/test/queries/clientnegative/nonkey_groupby.q ql/src/test/queries/clientnegative/nonkey_groupby.q
index 431e04efd9..d887282a86 100644
--- ql/src/test/queries/clientnegative/nonkey_groupby.q
+++ ql/src/test/queries/clientnegative/nonkey_groupby.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 EXPLAIN SELECT key, count(1) FROM src;
diff --git ql/src/test/queries/clientnegative/nopart_insert.q ql/src/test/queries/clientnegative/nopart_insert.q
index 6669bf62d8..d44ae11192 100644
--- ql/src/test/queries/clientnegative/nopart_insert.q
+++ ql/src/test/queries/clientnegative/nopart_insert.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 CREATE TABLE nopart_insert(a STRING, b STRING) PARTITIONED BY (ds STRING);
 
diff --git ql/src/test/queries/clientnegative/notable_alias4.q ql/src/test/queries/clientnegative/notable_alias4.q
index e7ad6b79d3..155e2aa33f 100644
--- ql/src/test/queries/clientnegative/notable_alias4.q
+++ ql/src/test/queries/clientnegative/notable_alias4.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 EXPLAIN
 SELECT key from src JOIN src1 on src1.key=src.key;
 
diff --git ql/src/test/queries/clientnegative/orderby_invalid_position.q ql/src/test/queries/clientnegative/orderby_invalid_position.q
index 4dbf2a6d56..87015a48b6 100644
--- ql/src/test/queries/clientnegative/orderby_invalid_position.q
+++ ql/src/test/queries/clientnegative/orderby_invalid_position.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.groupby.orderby.position.alias=true;
 
 -- invalid position alias in order by
diff --git ql/src/test/queries/clientnegative/orderby_position_unsupported.q ql/src/test/queries/clientnegative/orderby_position_unsupported.q
index 01e897d5ee..8ad824e33f 100644
--- ql/src/test/queries/clientnegative/orderby_position_unsupported.q
+++ ql/src/test/queries/clientnegative/orderby_position_unsupported.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.groupby.orderby.position.alias=true;
 
 SELECT src.* FROM src ORDER BY 3;
diff --git ql/src/test/queries/clientnegative/orderbysortby.q ql/src/test/queries/clientnegative/orderbysortby.q
index 5dff69fdbb..a876561474 100644
--- ql/src/test/queries/clientnegative/orderbysortby.q
+++ ql/src/test/queries/clientnegative/orderbysortby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, ten INT, one INT, value STRING) STORED AS TEXTFILE;
 
 FROM src
diff --git ql/src/test/queries/clientnegative/ptf_negative_AggrFuncsWithNoGBYNoPartDef.q ql/src/test/queries/clientnegative/ptf_negative_AggrFuncsWithNoGBYNoPartDef.q
index acaae78172..bc0daf6530 100644
--- ql/src/test/queries/clientnegative/ptf_negative_AggrFuncsWithNoGBYNoPartDef.q
+++ ql/src/test/queries/clientnegative/ptf_negative_AggrFuncsWithNoGBYNoPartDef.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- testAggrFuncsWithNoGBYNoPartDef
 select p_mfgr, 
 sum(p_retailprice) as s1  
diff --git ql/src/test/queries/clientnegative/ptf_negative_AmbiguousWindowDefn.q ql/src/test/queries/clientnegative/ptf_negative_AmbiguousWindowDefn.q
index 512857609d..3458401642 100644
--- ql/src/test/queries/clientnegative/ptf_negative_AmbiguousWindowDefn.q
+++ ql/src/test/queries/clientnegative/ptf_negative_AmbiguousWindowDefn.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- testAmbiguousWindowDefn
 select p_mfgr, p_name, p_size, 
 sum(p_size) over (w1) as s1, 
diff --git ql/src/test/queries/clientnegative/ptf_negative_DistributeByOrderBy.q ql/src/test/queries/clientnegative/ptf_negative_DistributeByOrderBy.q
index 2536e1e084..0a86abbff7 100644
--- ql/src/test/queries/clientnegative/ptf_negative_DistributeByOrderBy.q
+++ ql/src/test/queries/clientnegative/ptf_negative_DistributeByOrderBy.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- testPartitonBySortBy
 select p_mfgr, p_name, p_size,
 sum(p_retailprice) over (distribute by p_mfgr order by p_mfgr) as s1
diff --git ql/src/test/queries/clientnegative/ptf_negative_DuplicateWindowAlias.q ql/src/test/queries/clientnegative/ptf_negative_DuplicateWindowAlias.q
index c8631303ce..f8b13731c1 100644
--- ql/src/test/queries/clientnegative/ptf_negative_DuplicateWindowAlias.q
+++ ql/src/test/queries/clientnegative/ptf_negative_DuplicateWindowAlias.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- testDuplicateWindowAlias
 select p_mfgr, p_name, p_size, 
 sum(p_size) over (w1) as s1, 
diff --git ql/src/test/queries/clientnegative/ptf_negative_HavingLeadWithNoGBYNoWindowing.q ql/src/test/queries/clientnegative/ptf_negative_HavingLeadWithNoGBYNoWindowing.q
index d9378d263c..abe0bac6a7 100644
--- ql/src/test/queries/clientnegative/ptf_negative_HavingLeadWithNoGBYNoWindowing.q
+++ ql/src/test/queries/clientnegative/ptf_negative_HavingLeadWithNoGBYNoWindowing.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- testHavingLeadWithNoGBYNoWindowing
 select  p_mfgr,p_name, p_size 
 from part 
diff --git ql/src/test/queries/clientnegative/ptf_negative_HavingLeadWithPTF.q ql/src/test/queries/clientnegative/ptf_negative_HavingLeadWithPTF.q
index 93f72dc05f..7f32401808 100644
--- ql/src/test/queries/clientnegative/ptf_negative_HavingLeadWithPTF.q
+++ ql/src/test/queries/clientnegative/ptf_negative_HavingLeadWithPTF.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- testHavingLeadWithPTF
 select  p_mfgr,p_name, p_size 
 from noop(on part 
diff --git ql/src/test/queries/clientnegative/ptf_negative_InvalidValueBoundary.q ql/src/test/queries/clientnegative/ptf_negative_InvalidValueBoundary.q
index 91be988877..5443554253 100644
--- ql/src/test/queries/clientnegative/ptf_negative_InvalidValueBoundary.q
+++ ql/src/test/queries/clientnegative/ptf_negative_InvalidValueBoundary.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 -- testInvalidValueBoundary
 
diff --git ql/src/test/queries/clientnegative/ptf_negative_JoinWithAmbigousAlias.q ql/src/test/queries/clientnegative/ptf_negative_JoinWithAmbigousAlias.q
index 66305a8943..0850336e89 100644
--- ql/src/test/queries/clientnegative/ptf_negative_JoinWithAmbigousAlias.q
+++ ql/src/test/queries/clientnegative/ptf_negative_JoinWithAmbigousAlias.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- testJoinWithAmbigousAlias
 select abc.* 
 from noop(on part
diff --git ql/src/test/queries/clientnegative/ptf_negative_NoWindowDefn.q ql/src/test/queries/clientnegative/ptf_negative_NoWindowDefn.q
index 99932cd110..214b143b06 100644
--- ql/src/test/queries/clientnegative/ptf_negative_NoWindowDefn.q
+++ ql/src/test/queries/clientnegative/ptf_negative_NoWindowDefn.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- testNoWindowDefn
 select p_mfgr, p_name, p_size,
 sum(p_size) over (w1) as s1,
diff --git ql/src/test/queries/clientnegative/ptf_negative_PartitionBySortBy.q ql/src/test/queries/clientnegative/ptf_negative_PartitionBySortBy.q
index 647a319d75..334e2c6e68 100644
--- ql/src/test/queries/clientnegative/ptf_negative_PartitionBySortBy.q
+++ ql/src/test/queries/clientnegative/ptf_negative_PartitionBySortBy.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- testPartitonBySortBy
 select p_mfgr, p_name, p_size,
 sum(p_retailprice) over (partition by p_mfgr sort by p_mfgr) as s1
diff --git ql/src/test/queries/clientnegative/ptf_negative_WhereWithRankCond.q ql/src/test/queries/clientnegative/ptf_negative_WhereWithRankCond.q
index 2c52383845..47583a845a 100644
--- ql/src/test/queries/clientnegative/ptf_negative_WhereWithRankCond.q
+++ ql/src/test/queries/clientnegative/ptf_negative_WhereWithRankCond.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- testWhereWithRankCond
 select  p_mfgr,p_name, p_size, 
 rank() over() as r 
diff --git ql/src/test/queries/clientnegative/ptf_window_boundaries.q ql/src/test/queries/clientnegative/ptf_window_boundaries.q
index c2fc041a32..33760dae9a 100644
--- ql/src/test/queries/clientnegative/ptf_window_boundaries.q
+++ ql/src/test/queries/clientnegative/ptf_window_boundaries.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 select p_mfgr, p_name, p_size,
     sum(p_retailprice) over (rows unbounded following) as s1 
      from part distribute by p_mfgr sort by p_name;
diff --git ql/src/test/queries/clientnegative/ptf_window_boundaries2.q ql/src/test/queries/clientnegative/ptf_window_boundaries2.q
index 873eda86e0..6e96a67ab2 100644
--- ql/src/test/queries/clientnegative/ptf_window_boundaries2.q
+++ ql/src/test/queries/clientnegative/ptf_window_boundaries2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 select p_mfgr, p_name, p_size,
     sum(p_retailprice) over (range unbounded following) as s1
      from part distribute by p_mfgr sort by p_name;
diff --git ql/src/test/queries/clientnegative/regex_col_1.q ql/src/test/queries/clientnegative/regex_col_1.q
index a171961a68..181abc9506 100644
--- ql/src/test/queries/clientnegative/regex_col_1.q
+++ ql/src/test/queries/clientnegative/regex_col_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.support.quoted.identifiers=none;
 EXPLAIN
 SELECT `+++` FROM srcpart;
diff --git ql/src/test/queries/clientnegative/regex_col_2.q ql/src/test/queries/clientnegative/regex_col_2.q
index 7bac1c7755..18993f5872 100644
--- ql/src/test/queries/clientnegative/regex_col_2.q
+++ ql/src/test/queries/clientnegative/regex_col_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.support.quoted.identifiers=none;
 EXPLAIN
 SELECT `.a.` FROM srcpart;
diff --git ql/src/test/queries/clientnegative/regex_col_groupby.q ql/src/test/queries/clientnegative/regex_col_groupby.q
index 300d145508..afb0a18670 100644
--- ql/src/test/queries/clientnegative/regex_col_groupby.q
+++ ql/src/test/queries/clientnegative/regex_col_groupby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.support.quoted.identifiers=none;
 EXPLAIN
 SELECT `..`, count(1) FROM srcpart GROUP BY `..`;
diff --git ql/src/test/queries/clientnegative/right_side_join.q ql/src/test/queries/clientnegative/right_side_join.q
index 78771c83bf..6450c3a0b6 100644
--- ql/src/test/queries/clientnegative/right_side_join.q
+++ ql/src/test/queries/clientnegative/right_side_join.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.cbo.enable=false;
 
 explain  
diff --git ql/src/test/queries/clientnegative/sample.q ql/src/test/queries/clientnegative/sample.q
index 0086352f8c..7f51f0bcdd 100644
--- ql/src/test/queries/clientnegative/sample.q
+++ ql/src/test/queries/clientnegative/sample.q
@@ -1 +1,2 @@
+--! qt:dataset:srcbucket
 explain extended SELECT s.* FROM srcbucket TABLESAMPLE (BUCKET 5 OUT OF 4 on key) s
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/script_broken_pipe2.q ql/src/test/queries/clientnegative/script_broken_pipe2.q
index 1c3093c0e7..52b6b3c696 100644
--- ql/src/test/queries/clientnegative/script_broken_pipe2.q
+++ ql/src/test/queries/clientnegative/script_broken_pipe2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.script.allow.partial.consumption = false;
 -- Tests exception in ScriptOperator.processOp() by passing extra data needed to fill pipe buffer
 SELECT TRANSFORM(key, value, key, value, key, value, key, value, key, value, key, value, key, value, key, value, key, value, key, value, key, value, key, value) USING 'true' as a,b,c,d FROM src;
diff --git ql/src/test/queries/clientnegative/script_broken_pipe3.q ql/src/test/queries/clientnegative/script_broken_pipe3.q
index 60f93d2098..9aac02e813 100644
--- ql/src/test/queries/clientnegative/script_broken_pipe3.q
+++ ql/src/test/queries/clientnegative/script_broken_pipe3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.script.allow.partial.consumption = true;
 -- Test to ensure that a script with a bad error code still fails even with partial consumption
 SELECT TRANSFORM(*) USING 'false' AS a, b FROM (SELECT TRANSFORM(*) USING 'echo' AS a, b FROM src LIMIT 1) tmp;
diff --git ql/src/test/queries/clientnegative/script_error.q ql/src/test/queries/clientnegative/script_error.q
index 8ca849b82d..557195c53a 100644
--- ql/src/test/queries/clientnegative/script_error.q
+++ ql/src/test/queries/clientnegative/script_error.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 SELECT TRANSFORM(src.key, src.value) USING '../../data/scripts/error_script' AS (tkey, tvalue)
 FROM src;
diff --git ql/src/test/queries/clientnegative/selectDistinctStarNeg_1.q ql/src/test/queries/clientnegative/selectDistinctStarNeg_1.q
index 63647d8433..68bf6613d4 100644
--- ql/src/test/queries/clientnegative/selectDistinctStarNeg_1.q
+++ ql/src/test/queries/clientnegative/selectDistinctStarNeg_1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- Duplicate column name: key
 
 drop view if exists v;
diff --git ql/src/test/queries/clientnegative/selectDistinctStarNeg_2.q ql/src/test/queries/clientnegative/selectDistinctStarNeg_2.q
index b38f06597c..cf0ac4bdfb 100644
--- ql/src/test/queries/clientnegative/selectDistinctStarNeg_2.q
+++ ql/src/test/queries/clientnegative/selectDistinctStarNeg_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SELECT DISTINCT and GROUP BY can not be in the same query. Error encountered near token ‘key’
 
 select distinct * from src group by key;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/selectDistinctWithoutAggr.q ql/src/test/queries/clientnegative/selectDistinctWithoutAggr.q
index d031513f42..d17b71bbcb 100644
--- ql/src/test/queries/clientnegative/selectDistinctWithoutAggr.q
+++ ql/src/test/queries/clientnegative/selectDistinctWithoutAggr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Distinct without an aggregation is unsupported
 
 select hash(distinct key) from src;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/select_star_suffix.q ql/src/test/queries/clientnegative/select_star_suffix.q
index 6fbb8c5b01..142d020a95 100644
--- ql/src/test/queries/clientnegative/select_star_suffix.q
+++ ql/src/test/queries/clientnegative/select_star_suffix.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Check SELECT * syntax.
 -- Check that there should not be any identifier after STAR.
 select *abcdef from src;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/semijoin1.q ql/src/test/queries/clientnegative/semijoin1.q
index 06e6cad34b..65040c1d74 100644
--- ql/src/test/queries/clientnegative/semijoin1.q
+++ ql/src/test/queries/clientnegative/semijoin1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- reference rhs of semijoin in select-clause
 select b.value from src a left semi join src b on (b.key = a.key and b.key = '100');
diff --git ql/src/test/queries/clientnegative/semijoin2.q ql/src/test/queries/clientnegative/semijoin2.q
index 46faae6416..025f80074e 100644
--- ql/src/test/queries/clientnegative/semijoin2.q
+++ ql/src/test/queries/clientnegative/semijoin2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- rhs table reference in the where clause
 select a.value from src a left semi join src b on a.key = b.key where b.value = 'val_18';
diff --git ql/src/test/queries/clientnegative/semijoin3.q ql/src/test/queries/clientnegative/semijoin3.q
index 35b455a729..c8d4dbf471 100644
--- ql/src/test/queries/clientnegative/semijoin3.q
+++ ql/src/test/queries/clientnegative/semijoin3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- rhs table reference in group by
 select * from src a left semi join src b on a.key = b.key group by b.value;
diff --git ql/src/test/queries/clientnegative/semijoin4.q ql/src/test/queries/clientnegative/semijoin4.q
index 4e52ebfb3c..d244db7da3 100644
--- ql/src/test/queries/clientnegative/semijoin4.q
+++ ql/src/test/queries/clientnegative/semijoin4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- rhs table is a view and reference the view in where clause
 select a.value from src a left semi join (select key , value from src where key > 100) b on a.key = b.key where b.value = 'val_108' ;
 
diff --git ql/src/test/queries/clientnegative/semijoin5.q ql/src/test/queries/clientnegative/semijoin5.q
index f8056045cc..ba7f5833e4 100644
--- ql/src/test/queries/clientnegative/semijoin5.q
+++ ql/src/test/queries/clientnegative/semijoin5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table t1 as select cast(key as int) key, value from src where key <= 10;
 
 create table t5 as select cast(key as int) key1, value value1 from src where key <= 100;
diff --git ql/src/test/queries/clientnegative/set_hiveconf_internal_variable0.q ql/src/test/queries/clientnegative/set_hiveconf_internal_variable0.q
index b6393e4804..6484f7f3b4 100644
--- ql/src/test/queries/clientnegative/set_hiveconf_internal_variable0.q
+++ ql/src/test/queries/clientnegative/set_hiveconf_internal_variable0.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- should fail: for some internal variables which should not be settable via set command
 desc src;
 
diff --git ql/src/test/queries/clientnegative/set_hiveconf_internal_variable1.q ql/src/test/queries/clientnegative/set_hiveconf_internal_variable1.q
index 0038f36795..84d92a5fb8 100644
--- ql/src/test/queries/clientnegative/set_hiveconf_internal_variable1.q
+++ ql/src/test/queries/clientnegative/set_hiveconf_internal_variable1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- should fail: hive.conf.internal.variable.list is in restricted list
 desc src;
 
diff --git ql/src/test/queries/clientnegative/set_hiveconf_validation0.q ql/src/test/queries/clientnegative/set_hiveconf_validation0.q
index 4cb48664b6..e7cf827c72 100644
--- ql/src/test/queries/clientnegative/set_hiveconf_validation0.q
+++ ql/src/test/queries/clientnegative/set_hiveconf_validation0.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- should fail: hive.join.cache.size accepts int type
 desc src;
 
diff --git ql/src/test/queries/clientnegative/set_hiveconf_validation1.q ql/src/test/queries/clientnegative/set_hiveconf_validation1.q
index 330aafd198..c28306edb1 100644
--- ql/src/test/queries/clientnegative/set_hiveconf_validation1.q
+++ ql/src/test/queries/clientnegative/set_hiveconf_validation1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- should fail: hive.map.aggr.hash.min.reduction accepts float type
 desc src;
 
diff --git ql/src/test/queries/clientnegative/set_hiveconf_validation2.q ql/src/test/queries/clientnegative/set_hiveconf_validation2.q
index ad14c0c6ac..cd7afd52db 100644
--- ql/src/test/queries/clientnegative/set_hiveconf_validation2.q
+++ ql/src/test/queries/clientnegative/set_hiveconf_validation2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- should fail: hive.fetch.task.conversion accepts none, minimal or more
 desc src;
 
diff --git ql/src/test/queries/clientnegative/show_tablestatus_not_existing_part.q ql/src/test/queries/clientnegative/show_tablestatus_not_existing_part.q
index 242e165285..92fd1f188c 100644
--- ql/src/test/queries/clientnegative/show_tablestatus_not_existing_part.q
+++ ql/src/test/queries/clientnegative/show_tablestatus_not_existing_part.q
@@ -1 +1,2 @@
+--! qt:dataset:srcpart
 SHOW TABLE EXTENDED LIKE `srcpart` PARTITION(ds='2008-14-08', hr=11);
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/smb_bucketmapjoin.q ql/src/test/queries/clientnegative/smb_bucketmapjoin.q
index 1cd7066320..8948b4a26e 100644
--- ql/src/test/queries/clientnegative/smb_bucketmapjoin.q
+++ ql/src/test/queries/clientnegative/smb_bucketmapjoin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 set hive.exec.reducers.max = 1;
diff --git ql/src/test/queries/clientnegative/smb_mapjoin_14.q ql/src/test/queries/clientnegative/smb_mapjoin_14.q
index 58a406c9e4..77f1cad838 100644
--- ql/src/test/queries/clientnegative/smb_mapjoin_14.q
+++ ql/src/test/queries/clientnegative/smb_mapjoin_14.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.reducers.max = 1;
 
diff --git ql/src/test/queries/clientnegative/sortmerge_mapjoin_mismatch_1.q ql/src/test/queries/clientnegative/sortmerge_mapjoin_mismatch_1.q
index aac6983f02..50aff4904c 100644
--- ql/src/test/queries/clientnegative/sortmerge_mapjoin_mismatch_1.q
+++ ql/src/test/queries/clientnegative/sortmerge_mapjoin_mismatch_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table table_asc(key int, value string) CLUSTERED BY (key) SORTED BY (key asc) 
 INTO 1 BUCKETS STORED AS RCFILE; 
 create table table_desc(key int, value string) CLUSTERED BY (key) SORTED BY (key desc) 
diff --git ql/src/test/queries/clientnegative/spark_job_max_tasks.q ql/src/test/queries/clientnegative/spark_job_max_tasks.q
index a638f83cc2..24a2fd7b89 100644
--- ql/src/test/queries/clientnegative/spark_job_max_tasks.q
+++ ql/src/test/queries/clientnegative/spark_job_max_tasks.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.spark.job.max.tasks=2;
 
 add file ../../data/scripts/sleep.py;
diff --git ql/src/test/queries/clientnegative/spark_stage_max_tasks.q ql/src/test/queries/clientnegative/spark_stage_max_tasks.q
index fd43b67cb6..31b11b672e 100644
--- ql/src/test/queries/clientnegative/spark_stage_max_tasks.q
+++ ql/src/test/queries/clientnegative/spark_stage_max_tasks.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.spark.stage.max.tasks=1;
 
 add file ../../data/scripts/sleep.py;
diff --git ql/src/test/queries/clientnegative/split_sample_out_of_range.q ql/src/test/queries/clientnegative/split_sample_out_of_range.q
index 66af1fd7da..4e567dc6fd 100644
--- ql/src/test/queries/clientnegative/split_sample_out_of_range.q
+++ ql/src/test/queries/clientnegative/split_sample_out_of_range.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
 select key from src tablesample(105 percent);
diff --git ql/src/test/queries/clientnegative/split_sample_wrong_format.q ql/src/test/queries/clientnegative/split_sample_wrong_format.q
index f71cc44879..5e668a28bc 100644
--- ql/src/test/queries/clientnegative/split_sample_wrong_format.q
+++ ql/src/test/queries/clientnegative/split_sample_wrong_format.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 
 select key from src tablesample(1 percent);
diff --git ql/src/test/queries/clientnegative/split_sample_wrong_format2.q ql/src/test/queries/clientnegative/split_sample_wrong_format2.q
index 1a13c0ff4c..496cba9fb5 100644
--- ql/src/test/queries/clientnegative/split_sample_wrong_format2.q
+++ ql/src/test/queries/clientnegative/split_sample_wrong_format2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 
 select key from src tablesample(1K);
diff --git ql/src/test/queries/clientnegative/stats_aggregator_error_1.q ql/src/test/queries/clientnegative/stats_aggregator_error_1.q
index 1b2872d3d7..69918c9bff 100644
--- ql/src/test/queries/clientnegative/stats_aggregator_error_1.q
+++ ql/src/test/queries/clientnegative/stats_aggregator_error_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- In this test, there is a dummy stats aggregator which throws an error when the
 -- method connect is called (as indicated by the parameter hive.test.dummystats.aggregator)
 -- If stats need not be reliable, the statement succeeds. However, if stats are supposed
diff --git ql/src/test/queries/clientnegative/stats_aggregator_error_2.q ql/src/test/queries/clientnegative/stats_aggregator_error_2.q
index 0fa9ff6820..bdf24f800e 100644
--- ql/src/test/queries/clientnegative/stats_aggregator_error_2.q
+++ ql/src/test/queries/clientnegative/stats_aggregator_error_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- In this test, the stats aggregator does not exists.
 -- If stats need not be reliable, the statement succeeds. However, if stats are supposed
 -- to be reliable (by setting hive.stats.reliable to true), the insert statement fails
diff --git ql/src/test/queries/clientnegative/stats_publisher_error_1.q ql/src/test/queries/clientnegative/stats_publisher_error_1.q
index be7c4f72fe..b02659a5c1 100644
--- ql/src/test/queries/clientnegative/stats_publisher_error_1.q
+++ ql/src/test/queries/clientnegative/stats_publisher_error_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- In this test, there is a dummy stats publisher which throws an error when the
 -- method connect is called (as indicated by the parameter hive.test.dummystats.publisher)
 -- If stats need not be reliable, the statement succeeds. However, if stats are supposed
diff --git ql/src/test/queries/clientnegative/stats_publisher_error_2.q ql/src/test/queries/clientnegative/stats_publisher_error_2.q
index 652afe7c5b..2fa0d016b8 100644
--- ql/src/test/queries/clientnegative/stats_publisher_error_2.q
+++ ql/src/test/queries/clientnegative/stats_publisher_error_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- In this test, the stats publisher does not exists.
 -- If stats need not be reliable, the statement succeeds. However, if stats are supposed
 -- to be reliable (by setting hive.stats.reliable to true), the insert statement fails
diff --git ql/src/test/queries/clientnegative/strict_join.q ql/src/test/queries/clientnegative/strict_join.q
index 66b5963191..14cdfb33d7 100644
--- ql/src/test/queries/clientnegative/strict_join.q
+++ ql/src/test/queries/clientnegative/strict_join.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false; 
 
 set hive.mapred.mode=strict;
diff --git ql/src/test/queries/clientnegative/strict_join_2.q ql/src/test/queries/clientnegative/strict_join_2.q
index dc5f87b733..a9dd1a1082 100644
--- ql/src/test/queries/clientnegative/strict_join_2.q
+++ ql/src/test/queries/clientnegative/strict_join_2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false; 
 
 reset hive.mapred.mode;
diff --git ql/src/test/queries/clientnegative/strict_orderby.q ql/src/test/queries/clientnegative/strict_orderby.q
index 928b067e21..e94cb514aa 100644
--- ql/src/test/queries/clientnegative/strict_orderby.q
+++ ql/src/test/queries/clientnegative/strict_orderby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false; 
 
 set hive.mapred.mode=strict;
diff --git ql/src/test/queries/clientnegative/strict_orderby_2.q ql/src/test/queries/clientnegative/strict_orderby_2.q
index 0a93af722d..7dc0651b9f 100644
--- ql/src/test/queries/clientnegative/strict_orderby_2.q
+++ ql/src/test/queries/clientnegative/strict_orderby_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 reset hive.mapred.mode;
 set hive.strict.checks.orderby.no.limit=true;
 
diff --git ql/src/test/queries/clientnegative/strict_pruning.q ql/src/test/queries/clientnegative/strict_pruning.q
index 834ee82c34..137fd7b15b 100644
--- ql/src/test/queries/clientnegative/strict_pruning.q
+++ ql/src/test/queries/clientnegative/strict_pruning.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false; 
 
 set hive.mapred.mode=strict;
diff --git ql/src/test/queries/clientnegative/strict_pruning_2.q ql/src/test/queries/clientnegative/strict_pruning_2.q
index 718566d4c9..3a11218cfb 100644
--- ql/src/test/queries/clientnegative/strict_pruning_2.q
+++ ql/src/test/queries/clientnegative/strict_pruning_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 reset hive.mapred.mode;
 set hive.strict.checks.no.partition.filter=true;
 
diff --git ql/src/test/queries/clientnegative/subq_insert.q ql/src/test/queries/clientnegative/subq_insert.q
index 0bc9e24e48..1725e791b0 100644
--- ql/src/test/queries/clientnegative/subq_insert.q
+++ ql/src/test/queries/clientnegative/subq_insert.q
@@ -1,2 +1,4 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 EXPLAIN
 SELECT * FROM (INSERT OVERWRITE TABLE src1 SELECT * FROM src ) y;
diff --git ql/src/test/queries/clientnegative/subquery_corr_from.q ql/src/test/queries/clientnegative/subquery_corr_from.q
index 7df52c9312..8fc0d92b15 100644
--- ql/src/test/queries/clientnegative/subquery_corr_from.q
+++ ql/src/test/queries/clientnegative/subquery_corr_from.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- corr var are only supported in where/having clause
 
 select * from part po where p_size IN (select p_size from (select p_size, p_type from part pp where pp.p_brand = po.p_brand) p where p.p_type=po.p_type) ;
diff --git ql/src/test/queries/clientnegative/subquery_corr_grandparent.q ql/src/test/queries/clientnegative/subquery_corr_grandparent.q
index 3519c5bd5e..3938e7ad5b 100644
--- ql/src/test/queries/clientnegative/subquery_corr_grandparent.q
+++ ql/src/test/queries/clientnegative/subquery_corr_grandparent.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- inner query can only refer to it's parent query columns
 select *
 from part x 
diff --git ql/src/test/queries/clientnegative/subquery_corr_select.q ql/src/test/queries/clientnegative/subquery_corr_select.q
index a47cee1e87..c4d5adf881 100644
--- ql/src/test/queries/clientnegative/subquery_corr_select.q
+++ ql/src/test/queries/clientnegative/subquery_corr_select.q
@@ -1,2 +1,3 @@
+--! qt:dataset:part
 -- correlated var is only allowed in where/having
 explain select * from part po where p_size IN (select po.p_size from part p where p.p_type=po.p_type) ;
diff --git ql/src/test/queries/clientnegative/subquery_exists_implicit_gby.q ql/src/test/queries/clientnegative/subquery_exists_implicit_gby.q
index 497f3c2e32..6650dc23ad 100644
--- ql/src/test/queries/clientnegative/subquery_exists_implicit_gby.q
+++ ql/src/test/queries/clientnegative/subquery_exists_implicit_gby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 select *
diff --git ql/src/test/queries/clientnegative/subquery_in_groupby.q ql/src/test/queries/clientnegative/subquery_in_groupby.q
index a9bc6ee6a3..74e9a07d2f 100644
--- ql/src/test/queries/clientnegative/subquery_in_groupby.q
+++ ql/src/test/queries/clientnegative/subquery_in_groupby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 select count(*) 
diff --git ql/src/test/queries/clientnegative/subquery_in_lhs.q ql/src/test/queries/clientnegative/subquery_in_lhs.q
index 087c3f3772..e24de1e64c 100644
--- ql/src/test/queries/clientnegative/subquery_in_lhs.q
+++ ql/src/test/queries/clientnegative/subquery_in_lhs.q
@@ -1,2 +1,3 @@
+--! qt:dataset:part
 
 select * from part where (select max(p_size) from part) IN (select p_size from part);
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/subquery_in_on.q ql/src/test/queries/clientnegative/subquery_in_on.q
index 5f44f72fb6..fb30d447c6 100644
--- ql/src/test/queries/clientnegative/subquery_in_on.q
+++ ql/src/test/queries/clientnegative/subquery_in_on.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- subquery in ON clause
 explain SELECT p1.p_name FROM part p1 LEFT JOIN (select p_type as p_col from part ) p2
     ON (select pp1.p_type as p_col from part pp1 where pp1.p_partkey = p2.p_col);
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/subquery_multiple_cols_in_select.q ql/src/test/queries/clientnegative/subquery_multiple_cols_in_select.q
index 6805c5b16b..c7a53e0d1f 100644
--- ql/src/test/queries/clientnegative/subquery_multiple_cols_in_select.q
+++ ql/src/test/queries/clientnegative/subquery_multiple_cols_in_select.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 explain
diff --git ql/src/test/queries/clientnegative/subquery_notexists_implicit_gby.q ql/src/test/queries/clientnegative/subquery_notexists_implicit_gby.q
index 57c72d2026..63847bfb14 100644
--- ql/src/test/queries/clientnegative/subquery_notexists_implicit_gby.q
+++ ql/src/test/queries/clientnegative/subquery_notexists_implicit_gby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 select *
diff --git ql/src/test/queries/clientnegative/subquery_scalar_corr_multi_rows.q ql/src/test/queries/clientnegative/subquery_scalar_corr_multi_rows.q
index e71a60d662..47fb51330a 100644
--- ql/src/test/queries/clientnegative/subquery_scalar_corr_multi_rows.q
+++ ql/src/test/queries/clientnegative/subquery_scalar_corr_multi_rows.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- inner query produces more than one row
 select * from part where p_size >
     (select count(*) from part p where p.p_mfgr = part.p_mfgr group by p_type);
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/subquery_scalar_multi_columns.q ql/src/test/queries/clientnegative/subquery_scalar_multi_columns.q
index 1f6ad1a59a..948ed0ea4a 100644
--- ql/src/test/queries/clientnegative/subquery_scalar_multi_columns.q
+++ ql/src/test/queries/clientnegative/subquery_scalar_multi_columns.q
@@ -1,2 +1,3 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 select p_name from part where p_size > (select p_size, p_type from part);
diff --git ql/src/test/queries/clientnegative/subquery_scalar_multi_rows.q ql/src/test/queries/clientnegative/subquery_scalar_multi_rows.q
index 14b68b9057..77f4f085c7 100644
--- ql/src/test/queries/clientnegative/subquery_scalar_multi_rows.q
+++ ql/src/test/queries/clientnegative/subquery_scalar_multi_rows.q
@@ -1,2 +1,3 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 select p_name from part where p_size > (select p_size from part);
diff --git ql/src/test/queries/clientnegative/subquery_select_aggregate.q ql/src/test/queries/clientnegative/subquery_select_aggregate.q
index 8da8521521..8bd44608ed 100644
--- ql/src/test/queries/clientnegative/subquery_select_aggregate.q
+++ ql/src/test/queries/clientnegative/subquery_select_aggregate.q
@@ -1,2 +1,3 @@
+--! qt:dataset:part
 -- subqueries in UDFs are not allowed
 explain SELECT count((SELECT max(p_size) FROM part p WHERE p.p_type = part.p_type)) from part;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/subquery_select_distinct.q ql/src/test/queries/clientnegative/subquery_select_distinct.q
index 5682ae7583..34ee8cbd39 100644
--- ql/src/test/queries/clientnegative/subquery_select_distinct.q
+++ ql/src/test/queries/clientnegative/subquery_select_distinct.q
@@ -1,2 +1,3 @@
+--! qt:dataset:part
 -- subqueries in UDFs are not allowed
 explain SELECT distinct (SELECT max(p_size) FROM part p WHERE p.p_type = part.p_type) from part;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/subquery_select_distinct2.q ql/src/test/queries/clientnegative/subquery_select_distinct2.q
index 90c05884f9..060dd3a116 100644
--- ql/src/test/queries/clientnegative/subquery_select_distinct2.q
+++ ql/src/test/queries/clientnegative/subquery_select_distinct2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:part
 -- subqueries in UDFs are not allowed
 explain SELECT distinct p_size, (SELECT max(p_size) FROM part p WHERE p.p_type = part.p_type) from part;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/subquery_subquery_chain.q ql/src/test/queries/clientnegative/subquery_subquery_chain.q
index 8ea94c5fc6..a969d37d18 100644
--- ql/src/test/queries/clientnegative/subquery_subquery_chain.q
+++ ql/src/test/queries/clientnegative/subquery_subquery_chain.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 explain
 select * 
diff --git ql/src/test/queries/clientnegative/subquery_subquery_chain_exists.q ql/src/test/queries/clientnegative/subquery_subquery_chain_exists.q
index 0a771e2499..497a5486ad 100644
--- ql/src/test/queries/clientnegative/subquery_subquery_chain_exists.q
+++ ql/src/test/queries/clientnegative/subquery_subquery_chain_exists.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain
 select *
 from src
diff --git ql/src/test/queries/clientnegative/subquery_windowing_corr.q ql/src/test/queries/clientnegative/subquery_windowing_corr.q
index ac15310181..86cad1e333 100644
--- ql/src/test/queries/clientnegative/subquery_windowing_corr.q
+++ ql/src/test/queries/clientnegative/subquery_windowing_corr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- corr and windowing 
 select p_mfgr, p_name, p_size 
 from part a 
diff --git ql/src/test/queries/clientnegative/touch1.q ql/src/test/queries/clientnegative/touch1.q
index 9efbba0082..8cc2b91363 100644
--- ql/src/test/queries/clientnegative/touch1.q
+++ ql/src/test/queries/clientnegative/touch1.q
@@ -1 +1,2 @@
+--! qt:dataset:srcpart
 ALTER TABLE srcpart TOUCH PARTITION (ds='2008-04-08', hr='13');
diff --git ql/src/test/queries/clientnegative/touch2.q ql/src/test/queries/clientnegative/touch2.q
index 923a171e04..c96ba4274c 100644
--- ql/src/test/queries/clientnegative/touch2.q
+++ ql/src/test/queries/clientnegative/touch2.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 ALTER TABLE src TOUCH PARTITION (ds='2008-04-08', hr='12');
diff --git ql/src/test/queries/clientnegative/truncate_bucketed_column.q ql/src/test/queries/clientnegative/truncate_bucketed_column.q
index e53665695a..955802e46a 100644
--- ql/src/test/queries/clientnegative/truncate_bucketed_column.q
+++ ql/src/test/queries/clientnegative/truncate_bucketed_column.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Tests truncating a bucketed column
 
 CREATE TABLE test_tab (key STRING, value STRING) CLUSTERED BY (key) INTO 2 BUCKETS STORED AS RCFILE;
diff --git ql/src/test/queries/clientnegative/truncate_column_list_bucketing.q ql/src/test/queries/clientnegative/truncate_column_list_bucketing.q
index 90f6cf7000..70cbce865a 100644
--- ql/src/test/queries/clientnegative/truncate_column_list_bucketing.q
+++ ql/src/test/queries/clientnegative/truncate_column_list_bucketing.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set mapred.input.dir.recursive=true;
 
 -- Tests truncating a column on which a table is list bucketed
diff --git ql/src/test/queries/clientnegative/truncate_column_seqfile.q ql/src/test/queries/clientnegative/truncate_column_seqfile.q
index 903540dae8..4e429357f4 100644
--- ql/src/test/queries/clientnegative/truncate_column_seqfile.q
+++ ql/src/test/queries/clientnegative/truncate_column_seqfile.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Tests truncating a column from a table stored as a sequence file
 
 CREATE TABLE test_tab (key STRING, value STRING) STORED AS SEQUENCEFILE;
diff --git ql/src/test/queries/clientnegative/truncate_nonexistant_column.q ql/src/test/queries/clientnegative/truncate_nonexistant_column.q
index 5509552811..08d07e5f2c 100644
--- ql/src/test/queries/clientnegative/truncate_nonexistant_column.q
+++ ql/src/test/queries/clientnegative/truncate_nonexistant_column.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Tests attempting to truncate a column in a table that doesn't exist
 
 CREATE TABLE test_tab (key STRING, value STRING) STORED AS RCFILE;
diff --git ql/src/test/queries/clientnegative/truncate_partition_column.q ql/src/test/queries/clientnegative/truncate_partition_column.q
index 134743ac13..40b8735456 100644
--- ql/src/test/queries/clientnegative/truncate_partition_column.q
+++ ql/src/test/queries/clientnegative/truncate_partition_column.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 -- Tests truncating a partition column
 
 CREATE TABLE test_tab (key STRING, value STRING) PARTITIONED BY (part STRING) STORED AS RCFILE;
diff --git ql/src/test/queries/clientnegative/truncate_partition_column2.q ql/src/test/queries/clientnegative/truncate_partition_column2.q
index 47635208a7..e90db9b787 100644
--- ql/src/test/queries/clientnegative/truncate_partition_column2.q
+++ ql/src/test/queries/clientnegative/truncate_partition_column2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 -- Tests truncating a partition column
 
 CREATE TABLE test_tab (key STRING, value STRING) PARTITIONED BY (part STRING) STORED AS RCFILE;
diff --git ql/src/test/queries/clientnegative/truncate_table_failure1.q ql/src/test/queries/clientnegative/truncate_table_failure1.q
index f6cfa44bbb..ac59138a54 100644
--- ql/src/test/queries/clientnegative/truncate_table_failure1.q
+++ ql/src/test/queries/clientnegative/truncate_table_failure1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- partition spec for non-partitioned table
 TRUNCATE TABLE src partition (ds='2008-04-08', hr='11');
diff --git ql/src/test/queries/clientnegative/truncate_table_failure2.q ql/src/test/queries/clientnegative/truncate_table_failure2.q
index 1137d893eb..2959b1d46b 100644
--- ql/src/test/queries/clientnegative/truncate_table_failure2.q
+++ ql/src/test/queries/clientnegative/truncate_table_failure2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:srcpart
 -- full partition spec for not existing partition
 TRUNCATE TABLE srcpart partition (ds='2012-12-17', hr='15');
diff --git ql/src/test/queries/clientnegative/udaf_collect_set_unsupported.q ql/src/test/queries/clientnegative/udaf_collect_set_unsupported.q
index ed03620a67..9ba443ec9b 100644
--- ql/src/test/queries/clientnegative/udaf_collect_set_unsupported.q
+++ ql/src/test/queries/clientnegative/udaf_collect_set_unsupported.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SELECT key, collect_set(create_union(value))
 FROM src
 GROUP BY key ORDER BY key limit 20;
diff --git ql/src/test/queries/clientnegative/udaf_invalid_place.q ql/src/test/queries/clientnegative/udaf_invalid_place.q
index f37ce72ae4..3411aa2676 100644
--- ql/src/test/queries/clientnegative/udaf_invalid_place.q
+++ ql/src/test/queries/clientnegative/udaf_invalid_place.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select distinct key, sum(key) from src;
diff --git ql/src/test/queries/clientnegative/udf_array_contains_wrong1.q ql/src/test/queries/clientnegative/udf_array_contains_wrong1.q
index c2a132d4db..edc8369dd8 100644
--- ql/src/test/queries/clientnegative/udf_array_contains_wrong1.q
+++ ql/src/test/queries/clientnegative/udf_array_contains_wrong1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid first argument
 SELECT array_contains(1, 2) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_array_contains_wrong2.q ql/src/test/queries/clientnegative/udf_array_contains_wrong2.q
index 36f85d34a6..f7c0e7438e 100644
--- ql/src/test/queries/clientnegative/udf_array_contains_wrong2.q
+++ ql/src/test/queries/clientnegative/udf_array_contains_wrong2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid second argument
 SELECT array_contains(array(1, 2, 3), '2') FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_assert_true.q ql/src/test/queries/clientnegative/udf_assert_true.q
index 73b3f9654f..1b5b2a022a 100644
--- ql/src/test/queries/clientnegative/udf_assert_true.q
+++ ql/src/test/queries/clientnegative/udf_assert_true.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DESCRIBE FUNCTION ASSERT_TRUE;
 
 EXPLAIN SELECT ASSERT_TRUE(x > 0) FROM src LATERAL VIEW EXPLODE(ARRAY(1, 2)) a AS x LIMIT 2;
diff --git ql/src/test/queries/clientnegative/udf_assert_true2.q ql/src/test/queries/clientnegative/udf_assert_true2.q
index 4b62220764..738ff3b93a 100644
--- ql/src/test/queries/clientnegative/udf_assert_true2.q
+++ ql/src/test/queries/clientnegative/udf_assert_true2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 EXPLAIN SELECT 1 + ASSERT_TRUE(x < 2) FROM src LATERAL VIEW EXPLODE(ARRAY(1, 2)) a AS x LIMIT 2;
 SELECT 1 + ASSERT_TRUE(x < 2) FROM src LATERAL VIEW EXPLODE(ARRAY(1, 2)) a AS x LIMIT 2;
diff --git ql/src/test/queries/clientnegative/udf_coalesce.q ql/src/test/queries/clientnegative/udf_coalesce.q
index 7405e387ca..bb4718e648 100644
--- ql/src/test/queries/clientnegative/udf_coalesce.q
+++ ql/src/test/queries/clientnegative/udf_coalesce.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT COALESCE(array('a', 'b'), '2.0') FROM src LIMIT 1; 
diff --git ql/src/test/queries/clientnegative/udf_concat_ws_wrong1.q ql/src/test/queries/clientnegative/udf_concat_ws_wrong1.q
index 8c2017bc63..6aca60f70d 100644
--- ql/src/test/queries/clientnegative/udf_concat_ws_wrong1.q
+++ ql/src/test/queries/clientnegative/udf_concat_ws_wrong1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument number
 SELECT concat_ws('-') FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_concat_ws_wrong2.q ql/src/test/queries/clientnegative/udf_concat_ws_wrong2.q
index c49e7868bb..dc65846611 100644
--- ql/src/test/queries/clientnegative/udf_concat_ws_wrong2.q
+++ ql/src/test/queries/clientnegative/udf_concat_ws_wrong2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument type
 SELECT concat_ws('[]', array(100, 200, 50)) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_concat_ws_wrong3.q ql/src/test/queries/clientnegative/udf_concat_ws_wrong3.q
index 72b86271f5..0356cd82a2 100644
--- ql/src/test/queries/clientnegative/udf_concat_ws_wrong3.q
+++ ql/src/test/queries/clientnegative/udf_concat_ws_wrong3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument type
 SELECT concat_ws(1234, array('www', 'facebook', 'com')) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_elt_wrong_args_len.q ql/src/test/queries/clientnegative/udf_elt_wrong_args_len.q
index fbe4902d64..4c3e64d001 100644
--- ql/src/test/queries/clientnegative/udf_elt_wrong_args_len.q
+++ ql/src/test/queries/clientnegative/udf_elt_wrong_args_len.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT elt(3) FROM src;
diff --git ql/src/test/queries/clientnegative/udf_elt_wrong_type.q ql/src/test/queries/clientnegative/udf_elt_wrong_type.q
index bb1fdbf789..8581dbb65d 100644
--- ql/src/test/queries/clientnegative/udf_elt_wrong_type.q
+++ ql/src/test/queries/clientnegative/udf_elt_wrong_type.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 FROM src_thrift
 SELECT elt(1, src_thrift.lintstring)
 WHERE src_thrift.lintstring IS NOT NULL;
diff --git ql/src/test/queries/clientnegative/udf_field_wrong_args_len.q ql/src/test/queries/clientnegative/udf_field_wrong_args_len.q
index 9703c82d8a..2bed0ec20f 100644
--- ql/src/test/queries/clientnegative/udf_field_wrong_args_len.q
+++ ql/src/test/queries/clientnegative/udf_field_wrong_args_len.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT field(3) FROM src;
diff --git ql/src/test/queries/clientnegative/udf_field_wrong_type.q ql/src/test/queries/clientnegative/udf_field_wrong_type.q
index 61b2cd0649..5b9c58e7e8 100644
--- ql/src/test/queries/clientnegative/udf_field_wrong_type.q
+++ ql/src/test/queries/clientnegative/udf_field_wrong_type.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 FROM src_thrift
 SELECT field(1, src_thrift.lintstring)
 WHERE src_thrift.lintstring IS NOT NULL;
diff --git ql/src/test/queries/clientnegative/udf_format_number_wrong1.q ql/src/test/queries/clientnegative/udf_format_number_wrong1.q
index 18c985c606..03b4a296f4 100644
--- ql/src/test/queries/clientnegative/udf_format_number_wrong1.q
+++ ql/src/test/queries/clientnegative/udf_format_number_wrong1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument length
 SELECT format_number(12332.123456) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_format_number_wrong2.q ql/src/test/queries/clientnegative/udf_format_number_wrong2.q
index 7959c20b28..4ccadafc05 100644
--- ql/src/test/queries/clientnegative/udf_format_number_wrong2.q
+++ ql/src/test/queries/clientnegative/udf_format_number_wrong2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument length
 SELECT format_number(12332.123456, 2, 3) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_format_number_wrong3.q ql/src/test/queries/clientnegative/udf_format_number_wrong3.q
index 7d90ef86da..583750278c 100644
--- ql/src/test/queries/clientnegative/udf_format_number_wrong3.q
+++ ql/src/test/queries/clientnegative/udf_format_number_wrong3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument(second argument should be >= 0)
 SELECT format_number(12332.123456, -4) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_format_number_wrong4.q ql/src/test/queries/clientnegative/udf_format_number_wrong4.q
index e545f4aa14..0ac54c0cfa 100644
--- ql/src/test/queries/clientnegative/udf_format_number_wrong4.q
+++ ql/src/test/queries/clientnegative/udf_format_number_wrong4.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument type
 SELECT format_number(12332.123456, 4.01) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_format_number_wrong5.q ql/src/test/queries/clientnegative/udf_format_number_wrong5.q
index a6f71778f1..79355627f7 100644
--- ql/src/test/queries/clientnegative/udf_format_number_wrong5.q
+++ ql/src/test/queries/clientnegative/udf_format_number_wrong5.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument type
 SELECT format_number(array(12332.123456, 321.23), 5) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_format_number_wrong7.q ql/src/test/queries/clientnegative/udf_format_number_wrong7.q
index aa4a3a4475..17b888d245 100644
--- ql/src/test/queries/clientnegative/udf_format_number_wrong7.q
+++ ql/src/test/queries/clientnegative/udf_format_number_wrong7.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument type(format_number returns the result as a string)
 SELECT format_number(format_number(12332.123456, 4), 2) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_greatest_error_1.q ql/src/test/queries/clientnegative/udf_greatest_error_1.q
index e3347ed303..2927be59e2 100644
--- ql/src/test/queries/clientnegative/udf_greatest_error_1.q
+++ ql/src/test/queries/clientnegative/udf_greatest_error_1.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT GREATEST(array('a', 'b'), '2.0') FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_greatest_error_2.q ql/src/test/queries/clientnegative/udf_greatest_error_2.q
index ae6d9281d9..ba993471fb 100644
--- ql/src/test/queries/clientnegative/udf_greatest_error_2.q
+++ ql/src/test/queries/clientnegative/udf_greatest_error_2.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT GREATEST(1) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_if_not_bool.q ql/src/test/queries/clientnegative/udf_if_not_bool.q
index 74458d0c3d..6052d49eee 100644
--- ql/src/test/queries/clientnegative/udf_if_not_bool.q
+++ ql/src/test/queries/clientnegative/udf_if_not_bool.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT IF('STRING', 1, 1) FROM src;
diff --git ql/src/test/queries/clientnegative/udf_if_wrong_args_len.q ql/src/test/queries/clientnegative/udf_if_wrong_args_len.q
index ad19364c33..ef97f0b1db 100644
--- ql/src/test/queries/clientnegative/udf_if_wrong_args_len.q
+++ ql/src/test/queries/clientnegative/udf_if_wrong_args_len.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT IF(TRUE, 1) FROM src;
diff --git ql/src/test/queries/clientnegative/udf_in.q ql/src/test/queries/clientnegative/udf_in.q
index ce9ce54fac..9ede1563fc 100644
--- ql/src/test/queries/clientnegative/udf_in.q
+++ ql/src/test/queries/clientnegative/udf_in.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT 3 IN (array(1,2,3)) FROM src;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/udf_instr_wrong_args_len.q ql/src/test/queries/clientnegative/udf_instr_wrong_args_len.q
index ac8253fb1e..302a3ee8cd 100644
--- ql/src/test/queries/clientnegative/udf_instr_wrong_args_len.q
+++ ql/src/test/queries/clientnegative/udf_instr_wrong_args_len.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT instr('abcd') FROM src;
diff --git ql/src/test/queries/clientnegative/udf_instr_wrong_type.q ql/src/test/queries/clientnegative/udf_instr_wrong_type.q
index 9ac3ed6614..b9f7807bef 100644
--- ql/src/test/queries/clientnegative/udf_instr_wrong_type.q
+++ ql/src/test/queries/clientnegative/udf_instr_wrong_type.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 FROM src_thrift
 SELECT instr('abcd', src_thrift.lintstring)
 WHERE src_thrift.lintstring IS NOT NULL;
diff --git ql/src/test/queries/clientnegative/udf_invalid.q ql/src/test/queries/clientnegative/udf_invalid.q
index 68050fd95c..b10ac780b6 100644
--- ql/src/test/queries/clientnegative/udf_invalid.q
+++ ql/src/test/queries/clientnegative/udf_invalid.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select default.nonexistfunc() from src;
diff --git ql/src/test/queries/clientnegative/udf_likeall_wrong1.q ql/src/test/queries/clientnegative/udf_likeall_wrong1.q
index 2578ee232e..055a4ec789 100644
--- ql/src/test/queries/clientnegative/udf_likeall_wrong1.q
+++ ql/src/test/queries/clientnegative/udf_likeall_wrong1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 SELECT 120 like all ('a%','%bc%','%c')
 FROM src WHERE src.key = 86;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/udf_likeany_wrong1.q ql/src/test/queries/clientnegative/udf_likeany_wrong1.q
index fcc0905925..50b161ca45 100644
--- ql/src/test/queries/clientnegative/udf_likeany_wrong1.q
+++ ql/src/test/queries/clientnegative/udf_likeany_wrong1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 SELECT 120 like any ('a%','%bc%','%c')
 FROM src WHERE src.key = 86;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/udf_locate_wrong_args_len.q ql/src/test/queries/clientnegative/udf_locate_wrong_args_len.q
index ca7caad54d..38492b9b24 100644
--- ql/src/test/queries/clientnegative/udf_locate_wrong_args_len.q
+++ ql/src/test/queries/clientnegative/udf_locate_wrong_args_len.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT locate('a', 'b', 1, 2) FROM src;
diff --git ql/src/test/queries/clientnegative/udf_locate_wrong_type.q ql/src/test/queries/clientnegative/udf_locate_wrong_type.q
index 4bbf79a310..b59bd8af5c 100644
--- ql/src/test/queries/clientnegative/udf_locate_wrong_type.q
+++ ql/src/test/queries/clientnegative/udf_locate_wrong_type.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 FROM src_thrift
 SELECT locate('abcd', src_thrift.lintstring)
 WHERE src_thrift.lintstring IS NOT NULL;
diff --git ql/src/test/queries/clientnegative/udf_map_keys_arg_num.q ql/src/test/queries/clientnegative/udf_map_keys_arg_num.q
index ebb6c2ab41..be00af1c03 100644
--- ql/src/test/queries/clientnegative/udf_map_keys_arg_num.q
+++ ql/src/test/queries/clientnegative/udf_map_keys_arg_num.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT map_keys(map("a", "1"), map("b", "2")) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_map_keys_arg_type.q ql/src/test/queries/clientnegative/udf_map_keys_arg_type.q
index 0757d1494f..a3cafe74ab 100644
--- ql/src/test/queries/clientnegative/udf_map_keys_arg_type.q
+++ ql/src/test/queries/clientnegative/udf_map_keys_arg_type.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT map_keys(array(1, 2, 3)) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_map_values_arg_num.q ql/src/test/queries/clientnegative/udf_map_values_arg_num.q
index c97476a126..e9c0ec508d 100644
--- ql/src/test/queries/clientnegative/udf_map_values_arg_num.q
+++ ql/src/test/queries/clientnegative/udf_map_values_arg_num.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT map_values(map("a", "1"), map("b", "2")) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_map_values_arg_type.q ql/src/test/queries/clientnegative/udf_map_values_arg_type.q
index cc060ea0f0..1e25f7e178 100644
--- ql/src/test/queries/clientnegative/udf_map_values_arg_type.q
+++ ql/src/test/queries/clientnegative/udf_map_values_arg_type.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT map_values(array(1, 2, 3, 4)) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_max.q ql/src/test/queries/clientnegative/udf_max.q
index 7282e07596..d7072fa958 100644
--- ql/src/test/queries/clientnegative/udf_max.q
+++ ql/src/test/queries/clientnegative/udf_max.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 SELECT max(map("key", key, "value", value))
 FROM src;
diff --git ql/src/test/queries/clientnegative/udf_min.q ql/src/test/queries/clientnegative/udf_min.q
index b9528fa6da..6ce87bab3a 100644
--- ql/src/test/queries/clientnegative/udf_min.q
+++ ql/src/test/queries/clientnegative/udf_min.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 SELECT min(map("key", key, "value", value))
 FROM src;
diff --git ql/src/test/queries/clientnegative/udf_printf_wrong1.q ql/src/test/queries/clientnegative/udf_printf_wrong1.q
index 88ca4fefc3..3a8ea129ed 100644
--- ql/src/test/queries/clientnegative/udf_printf_wrong1.q
+++ ql/src/test/queries/clientnegative/udf_printf_wrong1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument length
 SELECT printf() FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_printf_wrong2.q ql/src/test/queries/clientnegative/udf_printf_wrong2.q
index 01ed2ffcf0..a4836cd3c7 100644
--- ql/src/test/queries/clientnegative/udf_printf_wrong2.q
+++ ql/src/test/queries/clientnegative/udf_printf_wrong2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument type
 SELECT printf(100) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_printf_wrong3.q ql/src/test/queries/clientnegative/udf_printf_wrong3.q
index 71f118b8dc..bc51d20f35 100644
--- ql/src/test/queries/clientnegative/udf_printf_wrong3.q
+++ ql/src/test/queries/clientnegative/udf_printf_wrong3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument type
 SELECT printf("Hello World %s", array("invalid", "argument")) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_printf_wrong4.q ql/src/test/queries/clientnegative/udf_printf_wrong4.q
index 71f118b8dc..bc51d20f35 100644
--- ql/src/test/queries/clientnegative/udf_printf_wrong4.q
+++ ql/src/test/queries/clientnegative/udf_printf_wrong4.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument type
 SELECT printf("Hello World %s", array("invalid", "argument")) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_reflect_neg.q ql/src/test/queries/clientnegative/udf_reflect_neg.q
index 67efb64505..fedc439e1c 100644
--- ql/src/test/queries/clientnegative/udf_reflect_neg.q
+++ ql/src/test/queries/clientnegative/udf_reflect_neg.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SELECT reflect("java.lang.StringClassThatDoesNotExist", "valueOf", 1),
        reflect("java.lang.String", "methodThatDoesNotExist"),
        reflect("java.lang.Math", "max", "overloadthatdoesnotexist", 3),
diff --git ql/src/test/queries/clientnegative/udf_size_wrong_args_len.q ql/src/test/queries/clientnegative/udf_size_wrong_args_len.q
index c628ff8aa1..69554ab3a6 100644
--- ql/src/test/queries/clientnegative/udf_size_wrong_args_len.q
+++ ql/src/test/queries/clientnegative/udf_size_wrong_args_len.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 FROM src_thrift
 SELECT size(src_thrift.lint, src_thrift.lintstring), 
        size()
diff --git ql/src/test/queries/clientnegative/udf_size_wrong_type.q ql/src/test/queries/clientnegative/udf_size_wrong_type.q
index 16695f6adc..6eecb46d9f 100644
--- ql/src/test/queries/clientnegative/udf_size_wrong_type.q
+++ ql/src/test/queries/clientnegative/udf_size_wrong_type.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT SIZE('wrong type: string') FROM src;
diff --git ql/src/test/queries/clientnegative/udf_sort_array_by_wrong1.q ql/src/test/queries/clientnegative/udf_sort_array_by_wrong1.q
index 9101c7e752..4ec26d0ded 100644
--- ql/src/test/queries/clientnegative/udf_sort_array_by_wrong1.q
+++ ql/src/test/queries/clientnegative/udf_sort_array_by_wrong1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument type for first argument
 SELECT sort_array_by(array(2, 5, 4),'col1') FROM src LIMIT 1;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/udf_sort_array_by_wrong2.q ql/src/test/queries/clientnegative/udf_sort_array_by_wrong2.q
index 241d98e63f..6f3fd8b872 100644
--- ql/src/test/queries/clientnegative/udf_sort_array_by_wrong2.q
+++ ql/src/test/queries/clientnegative/udf_sort_array_by_wrong2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid numbers of arguments
 SELECT sort_array_by(array(struct(800 ,'Foo',28,80000) , struct(100,'Boo',21,70000))) FROM src LIMIT 1;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/udf_sort_array_wrong1.q ql/src/test/queries/clientnegative/udf_sort_array_wrong1.q
index 9954f4ab4d..8f9ffefbb9 100644
--- ql/src/test/queries/clientnegative/udf_sort_array_wrong1.q
+++ ql/src/test/queries/clientnegative/udf_sort_array_wrong1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument number
 SELECT sort_array(array(2, 5, 4), 3) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_sort_array_wrong2.q ql/src/test/queries/clientnegative/udf_sort_array_wrong2.q
index 32c2645519..141403ab18 100644
--- ql/src/test/queries/clientnegative/udf_sort_array_wrong2.q
+++ ql/src/test/queries/clientnegative/udf_sort_array_wrong2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument type
 SELECT sort_array("Invalid") FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_sort_array_wrong3.q ql/src/test/queries/clientnegative/udf_sort_array_wrong3.q
index 49856ae72d..8ad8015622 100644
--- ql/src/test/queries/clientnegative/udf_sort_array_wrong3.q
+++ ql/src/test/queries/clientnegative/udf_sort_array_wrong3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- invalid argument type
 SELECT sort_array(array(create_union(0,"a"))) FROM src LIMIT 1;
diff --git ql/src/test/queries/clientnegative/udf_test_error.q ql/src/test/queries/clientnegative/udf_test_error.q
index 846f87c2e5..bd19fc5299 100644
--- ql/src/test/queries/clientnegative/udf_test_error.q
+++ ql/src/test/queries/clientnegative/udf_test_error.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TEMPORARY FUNCTION test_error AS 'org.apache.hadoop.hive.ql.udf.UDFTestErrorOnFalse';
 
 SELECT test_error(key < 125 OR key > 130) FROM src;
diff --git ql/src/test/queries/clientnegative/udf_test_error_reduce.q ql/src/test/queries/clientnegative/udf_test_error_reduce.q
index b1a06f2a07..e5c77ccd6b 100644
--- ql/src/test/queries/clientnegative/udf_test_error_reduce.q
+++ ql/src/test/queries/clientnegative/udf_test_error_reduce.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TEMPORARY FUNCTION test_error AS 'org.apache.hadoop.hive.ql.udf.UDFTestErrorOnFalse';
 
 
diff --git ql/src/test/queries/clientnegative/udf_when_type_wrong.q ql/src/test/queries/clientnegative/udf_when_type_wrong.q
index d4d2d2e485..f36ddd3fb0 100644
--- ql/src/test/queries/clientnegative/udf_when_type_wrong.q
+++ ql/src/test/queries/clientnegative/udf_when_type_wrong.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SELECT CASE
         WHEN TRUE THEN 2
         WHEN '1' THEN 4
diff --git ql/src/test/queries/clientnegative/udtf_explode_not_supported1.q ql/src/test/queries/clientnegative/udtf_explode_not_supported1.q
index 942ae5d831..678f5fdb94 100644
--- ql/src/test/queries/clientnegative/udtf_explode_not_supported1.q
+++ ql/src/test/queries/clientnegative/udtf_explode_not_supported1.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT explode(map(1,'one',2,'two',3,'three')) as (myKey,myVal) FROM src GROUP BY key;
diff --git ql/src/test/queries/clientnegative/udtf_explode_not_supported2.q ql/src/test/queries/clientnegative/udtf_explode_not_supported2.q
index 00d359a75c..f085c9e301 100644
--- ql/src/test/queries/clientnegative/udtf_explode_not_supported2.q
+++ ql/src/test/queries/clientnegative/udtf_explode_not_supported2.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT explode(map(1,'one',2,'two',3,'three')) as (myKey,myVal,myVal2) FROM src;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/udtf_explode_not_supported3.q ql/src/test/queries/clientnegative/udtf_explode_not_supported3.q
index 51df8fa862..4eed8c3a1f 100644
--- ql/src/test/queries/clientnegative/udtf_explode_not_supported3.q
+++ ql/src/test/queries/clientnegative/udtf_explode_not_supported3.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select explode(array(1),array(2)) as myCol from src;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/udtf_explode_not_supported4.q ql/src/test/queries/clientnegative/udtf_explode_not_supported4.q
index ae8dff7bad..9004d336a4 100644
--- ql/src/test/queries/clientnegative/udtf_explode_not_supported4.q
+++ ql/src/test/queries/clientnegative/udtf_explode_not_supported4.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT explode(null) as myNull FROM src GROUP BY key;
\ No newline at end of file
diff --git ql/src/test/queries/clientnegative/udtf_invalid_place.q ql/src/test/queries/clientnegative/udtf_invalid_place.q
index ab84a801e9..69a4b6cee3 100644
--- ql/src/test/queries/clientnegative/udtf_invalid_place.q
+++ ql/src/test/queries/clientnegative/udtf_invalid_place.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select distinct key, explode(key) from src;
diff --git ql/src/test/queries/clientnegative/udtf_not_supported1.q ql/src/test/queries/clientnegative/udtf_not_supported1.q
index 04e98d52c5..1fe4abe7c3 100644
--- ql/src/test/queries/clientnegative/udtf_not_supported1.q
+++ ql/src/test/queries/clientnegative/udtf_not_supported1.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT explode(array(1,2,3)) as myCol, key FROM src;
diff --git ql/src/test/queries/clientnegative/udtf_not_supported3.q ql/src/test/queries/clientnegative/udtf_not_supported3.q
index f4fe0dde3e..0cf1bd66fe 100644
--- ql/src/test/queries/clientnegative/udtf_not_supported3.q
+++ ql/src/test/queries/clientnegative/udtf_not_supported3.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 SELECT explode(array(1,2,3)) as myCol FROM src GROUP BY key;
diff --git ql/src/test/queries/clientnegative/union22.q ql/src/test/queries/clientnegative/union22.q
index 0e43cd3fdd..7d84423cb7 100644
--- ql/src/test/queries/clientnegative/union22.q
+++ ql/src/test/queries/clientnegative/union22.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create table dst_union22(k1 string, k2 string, k3 string, k4 string) partitioned by (ds string);
 create table dst_union22_delta(k0 string, k1 string, k2 string, k3 string, k4 string, k5 string) partitioned by (ds string);
diff --git ql/src/test/queries/clientnegative/unionClusterBy.q ql/src/test/queries/clientnegative/unionClusterBy.q
index f2bf83750d..e9bf95b7e8 100644
--- ql/src/test/queries/clientnegative/unionClusterBy.q
+++ ql/src/test/queries/clientnegative/unionClusterBy.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- orderByClause clusterByClause distributeByClause sortByClause limitClause
 -- can only be applied to the whole union.
 
diff --git ql/src/test/queries/clientnegative/unionDistributeBy.q ql/src/test/queries/clientnegative/unionDistributeBy.q
index fe2a5444a8..0b9b1c6acd 100644
--- ql/src/test/queries/clientnegative/unionDistributeBy.q
+++ ql/src/test/queries/clientnegative/unionDistributeBy.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- orderByClause clusterByClause distributeByClause sortByClause limitClause
 -- can only be applied to the whole union.
 
diff --git ql/src/test/queries/clientnegative/unionLimit.q ql/src/test/queries/clientnegative/unionLimit.q
index 91f2af5c46..55c2a9882e 100644
--- ql/src/test/queries/clientnegative/unionLimit.q
+++ ql/src/test/queries/clientnegative/unionLimit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- orderByClause clusterByClause distributeByClause sortByClause limitClause
 -- can only be applied to the whole union.
 
diff --git ql/src/test/queries/clientnegative/unionOrderBy.q ql/src/test/queries/clientnegative/unionOrderBy.q
index 0477e2d411..fdd5e9c27f 100644
--- ql/src/test/queries/clientnegative/unionOrderBy.q
+++ ql/src/test/queries/clientnegative/unionOrderBy.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- orderByClause clusterByClause distributeByClause sortByClause limitClause
 -- can only be applied to the whole union.
 
diff --git ql/src/test/queries/clientnegative/unionSortBy.q ql/src/test/queries/clientnegative/unionSortBy.q
index 8cf8b9063e..4cd5226e00 100644
--- ql/src/test/queries/clientnegative/unionSortBy.q
+++ ql/src/test/queries/clientnegative/unionSortBy.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- orderByClause clusterByClause distributeByClause sortByClause limitClause
 -- can only be applied to the whole union.
 
diff --git ql/src/test/queries/clientnegative/uniquejoin.q ql/src/test/queries/clientnegative/uniquejoin.q
index d6a19c397d..3a69f939f8 100644
--- ql/src/test/queries/clientnegative/uniquejoin.q
+++ ql/src/test/queries/clientnegative/uniquejoin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM UNIQUEJOIN (SELECT src.key from src WHERE src.key<4) a (a.key), PRESERVE  src b(b.key)
 SELECT a.key, b.key;
 
diff --git ql/src/test/queries/clientnegative/uniquejoin2.q ql/src/test/queries/clientnegative/uniquejoin2.q
index 6e9a082514..f14f38eaf4 100644
--- ql/src/test/queries/clientnegative/uniquejoin2.q
+++ ql/src/test/queries/clientnegative/uniquejoin2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM UNIQUEJOIN src a (a.key), PRESERVE src b (b.key, b.val)
 SELECT a.key, b.key;
 
diff --git ql/src/test/queries/clientnegative/uniquejoin3.q ql/src/test/queries/clientnegative/uniquejoin3.q
index 89a8f1b2aa..7673224a14 100644
--- ql/src/test/queries/clientnegative/uniquejoin3.q
+++ ql/src/test/queries/clientnegative/uniquejoin3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM UNIQUEJOIN src a (a.key), PRESERVE src b (b.key) JOIN src c ON c.key
 SELECT a.key;
 
diff --git ql/src/test/queries/clientnegative/unset_view_property.q ql/src/test/queries/clientnegative/unset_view_property.q
index 11131006e9..19ad44cb32 100644
--- ql/src/test/queries/clientnegative/unset_view_property.q
+++ ql/src/test/queries/clientnegative/unset_view_property.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE VIEW testView AS SELECT value FROM src WHERE key=86;
 ALTER VIEW testView SET TBLPROPERTIES ('propA'='100', 'propB'='200');
 SHOW TBLPROPERTIES testView;
diff --git ql/src/test/queries/clientnegative/updateBasicStats.q ql/src/test/queries/clientnegative/updateBasicStats.q
index b9e642d408..28be485986 100644
--- ql/src/test/queries/clientnegative/updateBasicStats.q
+++ ql/src/test/queries/clientnegative/updateBasicStats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 create table s as select * from src limit 10;
diff --git ql/src/test/queries/clientnegative/update_non_acid_table.q ql/src/test/queries/clientnegative/update_non_acid_table.q
index f588f682e4..59f01f988d 100644
--- ql/src/test/queries/clientnegative/update_non_acid_table.q
+++ ql/src/test/queries/clientnegative/update_non_acid_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientnegative/windowing_invalid_udaf.q ql/src/test/queries/clientnegative/windowing_invalid_udaf.q
index c5b593e4bb..e3a5a5a69d 100644
--- ql/src/test/queries/clientnegative/windowing_invalid_udaf.q
+++ ql/src/test/queries/clientnegative/windowing_invalid_udaf.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select nonexistfunc(key) over () from src limit 1;
diff --git ql/src/test/queries/clientnegative/windowing_leadlag_in_udaf.q ql/src/test/queries/clientnegative/windowing_leadlag_in_udaf.q
index 971f960cfe..e401b53e9c 100644
--- ql/src/test/queries/clientnegative/windowing_leadlag_in_udaf.q
+++ ql/src/test/queries/clientnegative/windowing_leadlag_in_udaf.q
@@ -1 +1,2 @@
+--! qt:dataset:part
 select sum(lead(p_retailprice,1)) as s1  from part;
diff --git ql/src/test/queries/clientnegative/windowing_ll_no_neg.q ql/src/test/queries/clientnegative/windowing_ll_no_neg.q
index 3aba793ee4..7e2a374cf2 100644
--- ql/src/test/queries/clientnegative/windowing_ll_no_neg.q
+++ ql/src/test/queries/clientnegative/windowing_ll_no_neg.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 select p_mfgr, p_name, p_size,
 min(p_retailprice),
 rank() over(distribute by p_mfgr sort by p_name)as r,
diff --git ql/src/test/queries/clientnegative/windowing_ll_no_over.q ql/src/test/queries/clientnegative/windowing_ll_no_over.q
index 6fc6df6354..c6bd63ed63 100644
--- ql/src/test/queries/clientnegative/windowing_ll_no_over.q
+++ ql/src/test/queries/clientnegative/windowing_ll_no_over.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 select p_mfgr, 
 lead(p_retailprice,1) as s1  
 from part;
diff --git ql/src/test/queries/clientnegative/wrong_column_type.q ql/src/test/queries/clientnegative/wrong_column_type.q
index 490f0c3b4d..c1a937e404 100644
--- ql/src/test/queries/clientnegative/wrong_column_type.q
+++ ql/src/test/queries/clientnegative/wrong_column_type.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(a float);
 
 INSERT OVERWRITE TABLE dest1
diff --git ql/src/test/queries/clientpositive/acid_bucket_pruning.q ql/src/test/queries/clientpositive/acid_bucket_pruning.q
index d8d59b241c..476db6d4a4 100644
--- ql/src/test/queries/clientpositive/acid_bucket_pruning.q
+++ ql/src/test/queries/clientpositive/acid_bucket_pruning.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.optimize.index.filter=true;
diff --git ql/src/test/queries/clientpositive/acid_globallimit.q ql/src/test/queries/clientpositive/acid_globallimit.q
index 233b6b4377..ed986c3189 100644
--- ql/src/test/queries/clientpositive/acid_globallimit.q
+++ ql/src/test/queries/clientpositive/acid_globallimit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/acid_no_buckets.q ql/src/test/queries/clientpositive/acid_no_buckets.q
index 189ad0889d..bcf9e0634b 100644
--- ql/src/test/queries/clientpositive/acid_no_buckets.q
+++ ql/src/test/queries/clientpositive/acid_no_buckets.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 --this has 4 groups of tests
 --Acid tables w/o bucketing
 --the tests with bucketing (make sure we get the same results)
diff --git ql/src/test/queries/clientpositive/acid_nullscan.q ql/src/test/queries/clientpositive/acid_nullscan.q
index 3c71242ea6..0d8ca2a240 100644
--- ql/src/test/queries/clientpositive/acid_nullscan.q
+++ ql/src/test/queries/clientpositive/acid_nullscan.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
diff --git ql/src/test/queries/clientpositive/acid_table_stats.q ql/src/test/queries/clientpositive/acid_table_stats.q
index 9a3d97e101..268028a8e0 100644
--- ql/src/test/queries/clientpositive/acid_table_stats.q
+++ ql/src/test/queries/clientpositive/acid_table_stats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/acid_vectorization.q ql/src/test/queries/clientpositive/acid_vectorization.q
index 4c37563a68..1d27768152 100644
--- ql/src/test/queries/clientpositive/acid_vectorization.q
+++ ql/src/test/queries/clientpositive/acid_vectorization.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/acid_vectorization_partition.q ql/src/test/queries/clientpositive/acid_vectorization_partition.q
index d912677bf9..975767cc94 100644
--- ql/src/test/queries/clientpositive/acid_vectorization_partition.q
+++ ql/src/test/queries/clientpositive/acid_vectorization_partition.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/acid_vectorization_project.q ql/src/test/queries/clientpositive/acid_vectorization_project.q
index 3725cb141b..a726470135 100644
--- ql/src/test/queries/clientpositive/acid_vectorization_project.q
+++ ql/src/test/queries/clientpositive/acid_vectorization_project.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/add_jar_with_file_removed.q ql/src/test/queries/clientpositive/add_jar_with_file_removed.q
index 95d7001c56..b45f7121cb 100644
--- ql/src/test/queries/clientpositive/add_jar_with_file_removed.q
+++ ql/src/test/queries/clientpositive/add_jar_with_file_removed.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 !mkdir ${system:test.tmp.dir}/tmpjars;
 !touch ${system:test.tmp.dir}/tmpjars/added1.jar;
 !touch ${system:test.tmp.dir}/tmpjars/added2.jar;
diff --git ql/src/test/queries/clientpositive/add_part_exist.q ql/src/test/queries/clientpositive/add_part_exist.q
index b8ace723f6..a531bbc18d 100644
--- ql/src/test/queries/clientpositive/add_part_exist.q
+++ ql/src/test/queries/clientpositive/add_part_exist.q
@@ -14,7 +14,6 @@ ALTER TABLE add_part_test ADD IF NOT EXISTS PARTITION (ds='2010-01-01') PARTITIO
 SHOW PARTITIONS add_part_test;
 
 DROP TABLE add_part_test;
-SHOW TABLES;
 
 -- Test ALTER TABLE ADD PARTITION in non-default Database
 CREATE DATABASE add_part_test_db;
diff --git ql/src/test/queries/clientpositive/add_part_multiple.q ql/src/test/queries/clientpositive/add_part_multiple.q
index 93ed7877aa..9403368396 100644
--- ql/src/test/queries/clientpositive/add_part_multiple.q
+++ ql/src/test/queries/clientpositive/add_part_multiple.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- HIVE-5122 locations for 2nd, 3rd... partition are ignored
 
diff --git ql/src/test/queries/clientpositive/add_partition_with_whitelist.q ql/src/test/queries/clientpositive/add_partition_with_whitelist.q
index 009c7610ef..ab06484b9a 100644
--- ql/src/test/queries/clientpositive/add_partition_with_whitelist.q
+++ ql/src/test/queries/clientpositive/add_partition_with_whitelist.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 SET hive.metastore.partition.name.whitelist.pattern=[A-Za-z]*;
 -- This pattern matches only letters.
 
diff --git ql/src/test/queries/clientpositive/alias_casted_column.q ql/src/test/queries/clientpositive/alias_casted_column.q
index f1fc91a5f2..c6a6a09824 100644
--- ql/src/test/queries/clientpositive/alias_casted_column.q
+++ ql/src/test/queries/clientpositive/alias_casted_column.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- HIVE-2477 Use name of original expression for name of CAST output
 explain select key from (select cast(key as int) from src )t;
 
diff --git ql/src/test/queries/clientpositive/allcolref_in_udf.q ql/src/test/queries/clientpositive/allcolref_in_udf.q
index ecba2514e8..c28d26e279 100644
--- ql/src/test/queries/clientpositive/allcolref_in_udf.q
+++ ql/src/test/queries/clientpositive/allcolref_in_udf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 explain
 select concat(*),array(*) from src where key < 100 limit 10;
diff --git ql/src/test/queries/clientpositive/alter1.q ql/src/test/queries/clientpositive/alter1.q
index 767ab5c98d..0843351996 100644
--- ql/src/test/queries/clientpositive/alter1.q
+++ ql/src/test/queries/clientpositive/alter1.q
@@ -28,7 +28,7 @@ describe alter1;
 
 -- Cleanup
 DROP TABLE alter1;
-SHOW TABLES;
+SHOW TABLES LIKE "alter*";
 
 -- With non-default Database
 
diff --git ql/src/test/queries/clientpositive/alter2.q ql/src/test/queries/clientpositive/alter2.q
index ddf57873a5..6586afca8f 100644
--- ql/src/test/queries/clientpositive/alter2.q
+++ ql/src/test/queries/clientpositive/alter2.q
@@ -21,13 +21,13 @@ show partitions alter2;
 
 -- Cleanup
 DROP TABLE alter2;
-SHOW TABLES;
+SHOW TABLES LIKE "alter*";
 
 -- Using non-default Database
 
 CREATE DATABASE alter2_db;
 USE alter2_db;
-SHOW TABLES;
+SHOW TABLES LIKE "alter*";
 
 CREATE TABLE alter2(a int, b int) PARTITIONED BY (insertdate string);
 DESCRIBE EXTENDED alter2;
diff --git ql/src/test/queries/clientpositive/alter3.q ql/src/test/queries/clientpositive/alter3.q
index 91e4e9bad0..a38643de41 100644
--- ql/src/test/queries/clientpositive/alter3.q
+++ ql/src/test/queries/clientpositive/alter3.q
@@ -25,7 +25,7 @@ describe extended alter3_like_renamed;
 DROP TABLE alter3_src;
 DROP TABLE alter3_renamed;
 DROP TABLE alter3_like_renamed;
-SHOW TABLES;
+SHOW TABLES LIKE "alter3_*";
 
 -- With non-default Database
 
diff --git ql/src/test/queries/clientpositive/alter4.q ql/src/test/queries/clientpositive/alter4.q
index 542ff019b2..7a87113edc 100644
--- ql/src/test/queries/clientpositive/alter4.q
+++ ql/src/test/queries/clientpositive/alter4.q
@@ -6,7 +6,7 @@ DESCRIBE EXTENDED set_bucketing_test;
 
 -- Cleanup
 DROP TABLE set_bucketing_test;
-SHOW TABLES;
+SHOW TABLES LIKE "set_bucketing_*";
 
 -- with non-default Database
 
diff --git ql/src/test/queries/clientpositive/alter5.q ql/src/test/queries/clientpositive/alter5.q
index 66c9f8dc54..62a73a40b1 100644
--- ql/src/test/queries/clientpositive/alter5.q
+++ ql/src/test/queries/clientpositive/alter5.q
@@ -23,7 +23,7 @@ describe extended alter5 partition (dt='a');
 -- Cleanup
 DROP TABLE alter5_src;
 DROP TABLE alter5;
-SHOW TABLES;
+SHOW TABLES LIKE "alter*";
 
 -- With non-default Database
 
diff --git ql/src/test/queries/clientpositive/alter_char1.q ql/src/test/queries/clientpositive/alter_char1.q
index b604656dd8..f828d3998c 100644
--- ql/src/test/queries/clientpositive/alter_char1.q
+++ ql/src/test/queries/clientpositive/alter_char1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 create database ac;
diff --git ql/src/test/queries/clientpositive/alter_char2.q ql/src/test/queries/clientpositive/alter_char2.q
index 24f9c581d0..44b352b116 100644
--- ql/src/test/queries/clientpositive/alter_char2.q
+++ ql/src/test/queries/clientpositive/alter_char2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 -- alter column type, with partitioned table
diff --git ql/src/test/queries/clientpositive/alter_merge_2_orc.q ql/src/test/queries/clientpositive/alter_merge_2_orc.q
index 10ba6e4ae3..90257cfb6c 100644
--- ql/src/test/queries/clientpositive/alter_merge_2_orc.q
+++ ql/src/test/queries/clientpositive/alter_merge_2_orc.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create table src_orc_merge_test_part(key int, value string) partitioned by (ds string, ts string) stored as orc;
 
diff --git ql/src/test/queries/clientpositive/alter_merge_orc.q ql/src/test/queries/clientpositive/alter_merge_orc.q
index aac98a82d2..f88b2a48ba 100644
--- ql/src/test/queries/clientpositive/alter_merge_orc.q
+++ ql/src/test/queries/clientpositive/alter_merge_orc.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 create table src_orc_merge_test(key int, value string) stored as orc;
diff --git ql/src/test/queries/clientpositive/alter_merge_stats_orc.q ql/src/test/queries/clientpositive/alter_merge_stats_orc.q
index 8d0c7bde76..af02b5855b 100644
--- ql/src/test/queries/clientpositive/alter_merge_stats_orc.q
+++ ql/src/test/queries/clientpositive/alter_merge_stats_orc.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.submitviachild=false;
 set hive.exec.submit.local.task.via.child=false;
 create table src_orc_merge_test_stat(key int, value string) stored as orc;
diff --git ql/src/test/queries/clientpositive/alter_numbuckets_partitioned_table2_h23.q ql/src/test/queries/clientpositive/alter_numbuckets_partitioned_table2_h23.q
index 15a88bba37..1aa64011c7 100644
--- ql/src/test/queries/clientpositive/alter_numbuckets_partitioned_table2_h23.q
+++ ql/src/test/queries/clientpositive/alter_numbuckets_partitioned_table2_h23.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Tests that when overwriting a partition in a table after altering the bucketing/sorting metadata
 -- the partition metadata is updated as well.
 
diff --git ql/src/test/queries/clientpositive/alter_numbuckets_partitioned_table_h23.q ql/src/test/queries/clientpositive/alter_numbuckets_partitioned_table_h23.q
index 7d523d91c5..d214715a75 100644
--- ql/src/test/queries/clientpositive/alter_numbuckets_partitioned_table_h23.q
+++ ql/src/test/queries/clientpositive/alter_numbuckets_partitioned_table_h23.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.20S)
 create table tst1(key string, value string) partitioned by (ds string) clustered by (key) into 10 buckets;
 
diff --git ql/src/test/queries/clientpositive/alter_partition_coltype.q ql/src/test/queries/clientpositive/alter_partition_coltype.q
index c9a898b584..b902a60e4f 100644
--- ql/src/test/queries/clientpositive/alter_partition_coltype.q
+++ ql/src/test/queries/clientpositive/alter_partition_coltype.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- create testing table.
 create table alter_coltype(key string, value string) partitioned by (dt string, ts string);
 
diff --git ql/src/test/queries/clientpositive/alter_partition_update_status.q ql/src/test/queries/clientpositive/alter_partition_update_status.q
index f8bf2a234a..434cff58c7 100644
--- ql/src/test/queries/clientpositive/alter_partition_update_status.q
+++ ql/src/test/queries/clientpositive/alter_partition_update_status.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 create table src_stat_part_one(key string, value string) partitioned by (partitionId int);
 
 insert overwrite table src_stat_part_one partition (partitionId=1)
diff --git ql/src/test/queries/clientpositive/alter_partition_with_whitelist.q ql/src/test/queries/clientpositive/alter_partition_with_whitelist.q
index 301362a881..354750368f 100644
--- ql/src/test/queries/clientpositive/alter_partition_with_whitelist.q
+++ ql/src/test/queries/clientpositive/alter_partition_with_whitelist.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 SET hive.metastore.partition.name.whitelist.pattern=[A-Za-z]*;
 -- This pattern matches only letters.
 
diff --git ql/src/test/queries/clientpositive/alter_rename_partition.q ql/src/test/queries/clientpositive/alter_rename_partition.q
index 8ebbe98824..b6f6ccce3b 100644
--- ql/src/test/queries/clientpositive/alter_rename_partition.q
+++ ql/src/test/queries/clientpositive/alter_rename_partition.q
@@ -1,7 +1,6 @@
 -- Cleanup
 DROP TABLE alter_rename_partition_src;
 DROP TABLE alter_rename_partition;
-SHOW TABLES;
 
 create table alter_rename_partition_src ( col1 string ) stored as textfile ;
 load data local inpath '../../data/files/test.dat' overwrite into table alter_rename_partition_src ;
@@ -19,7 +18,6 @@ select * from alter_rename_partition where pcol1='new_part1:' and pcol2='new_par
 -- Cleanup
 DROP TABLE alter_rename_partition_src;
 DROP TABLE alter_rename_partition;
-SHOW TABLES;
 
 -- With non-default Database
 
diff --git ql/src/test/queries/clientpositive/alter_rename_partition_authorization.q ql/src/test/queries/clientpositive/alter_rename_partition_authorization.q
index 70f2bb4cfc..5ffcaf0bf0 100644
--- ql/src/test/queries/clientpositive/alter_rename_partition_authorization.q
+++ ql/src/test/queries/clientpositive/alter_rename_partition_authorization.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 -- SORT_BEFORE_DIFF
 
diff --git ql/src/test/queries/clientpositive/alter_rename_table.q ql/src/test/queries/clientpositive/alter_rename_table.q
index 2061850540..53fb230cf6 100644
--- ql/src/test/queries/clientpositive/alter_rename_table.q
+++ ql/src/test/queries/clientpositive/alter_rename_table.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create database source;
 create database target;
diff --git ql/src/test/queries/clientpositive/alter_table_column_stats.q ql/src/test/queries/clientpositive/alter_table_column_stats.q
index 8892d3f2af..9bb9ed74df 100644
--- ql/src/test/queries/clientpositive/alter_table_column_stats.q
+++ ql/src/test/queries/clientpositive/alter_table_column_stats.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 
 set hive.metastore.try.direct.sql=true;
diff --git ql/src/test/queries/clientpositive/alter_table_serde2.q ql/src/test/queries/clientpositive/alter_table_serde2.q
index 6ca3be3139..b7717f9751 100644
--- ql/src/test/queries/clientpositive/alter_table_serde2.q
+++ ql/src/test/queries/clientpositive/alter_table_serde2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Tests that when overwriting a partition in a table after altering the serde properties
 -- the partition metadata is updated as well.
 
diff --git ql/src/test/queries/clientpositive/alter_table_stats_status.q ql/src/test/queries/clientpositive/alter_table_stats_status.q
index 8e07b81043..9101f30023 100644
--- ql/src/test/queries/clientpositive/alter_table_stats_status.q
+++ ql/src/test/queries/clientpositive/alter_table_stats_status.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 create database statsdb;
 use statsdb;
 create table srctable like default.src;
diff --git ql/src/test/queries/clientpositive/alter_table_update_status.q ql/src/test/queries/clientpositive/alter_table_update_status.q
index 9415c978b5..8882584d78 100644
--- ql/src/test/queries/clientpositive/alter_table_update_status.q
+++ ql/src/test/queries/clientpositive/alter_table_update_status.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 create table src_stat as select * from src1;
 
 create table src_stat_int (
diff --git ql/src/test/queries/clientpositive/alter_table_update_status_disable_bitvector.q ql/src/test/queries/clientpositive/alter_table_update_status_disable_bitvector.q
index d64263fe84..f49c7a03c6 100644
--- ql/src/test/queries/clientpositive/alter_table_update_status_disable_bitvector.q
+++ ql/src/test/queries/clientpositive/alter_table_update_status_disable_bitvector.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.stats.fetch.bitvector=false;
 
 create table src_stat as select * from src1;
diff --git ql/src/test/queries/clientpositive/alter_varchar1.q ql/src/test/queries/clientpositive/alter_varchar1.q
index 8ed3d2094e..4ca29548c6 100644
--- ql/src/test/queries/clientpositive/alter_varchar1.q
+++ ql/src/test/queries/clientpositive/alter_varchar1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 create database avc;
diff --git ql/src/test/queries/clientpositive/alter_varchar2.q ql/src/test/queries/clientpositive/alter_varchar2.q
index 558969af9d..ba7045653a 100644
--- ql/src/test/queries/clientpositive/alter_varchar2.q
+++ ql/src/test/queries/clientpositive/alter_varchar2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 -- alter column type, with partitioned table
diff --git ql/src/test/queries/clientpositive/alter_view_as_select.q ql/src/test/queries/clientpositive/alter_view_as_select.q
index d2519a8207..20c57b300b 100644
--- ql/src/test/queries/clientpositive/alter_view_as_select.q
+++ ql/src/test/queries/clientpositive/alter_view_as_select.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 CREATE DATABASE tv;
 CREATE VIEW tv.testView as SELECT * FROM srcpart;
 DESCRIBE FORMATTED tv.testView;
diff --git ql/src/test/queries/clientpositive/ambiguitycheck.q ql/src/test/queries/clientpositive/ambiguitycheck.q
index 2334bc6535..80b2fb4a71 100644
--- ql/src/test/queries/clientpositive/ambiguitycheck.q
+++ ql/src/test/queries/clientpositive/ambiguitycheck.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- check cluster/distribute/partitionBy
 SELECT * FROM SRC x where x.key = 20 CLUSTER BY (key,value) ;
 
diff --git ql/src/test/queries/clientpositive/ambiguous_col.q ql/src/test/queries/clientpositive/ambiguous_col.q
index d1cebeb506..0854718d94 100644
--- ql/src/test/queries/clientpositive/ambiguous_col.q
+++ ql/src/test/queries/clientpositive/ambiguous_col.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.support.quoted.identifiers=none;
 -- TOK_ALLCOLREF
 explain select * from (select a.key, a.* from (select * from src) a join (select * from src1) b on (a.key = b.key)) t;
diff --git ql/src/test/queries/clientpositive/analyze_tbl_part.q ql/src/test/queries/clientpositive/analyze_tbl_part.q
index 54e816a9ff..fd486d610c 100644
--- ql/src/test/queries/clientpositive/analyze_tbl_part.q
+++ ql/src/test/queries/clientpositive/analyze_tbl_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.mapred.mode=nonstrict;
 create table src_stat_part(key string, value string) partitioned by (partitionId int);
 
diff --git ql/src/test/queries/clientpositive/ansi_sql_arithmetic.q ql/src/test/queries/clientpositive/ansi_sql_arithmetic.q
index b343d782eb..dc235df2e9 100644
--- ql/src/test/queries/clientpositive/ansi_sql_arithmetic.q
+++ ql/src/test/queries/clientpositive/ansi_sql_arithmetic.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 set hive.compat=latest;
diff --git ql/src/test/queries/clientpositive/archive_excludeHadoop20.q ql/src/test/queries/clientpositive/archive_excludeHadoop20.q
index e9616418d8..75bd579b6e 100644
--- ql/src/test/queries/clientpositive/archive_excludeHadoop20.q
+++ ql/src/test/queries/clientpositive/archive_excludeHadoop20.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.archive.enabled = true;
 set hive.exec.submitviachild=false;
diff --git ql/src/test/queries/clientpositive/archive_multi.q ql/src/test/queries/clientpositive/archive_multi.q
index c18f99169d..60cb4a9733 100644
--- ql/src/test/queries/clientpositive/archive_multi.q
+++ ql/src/test/queries/clientpositive/archive_multi.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.archive.enabled = true;
 ;
diff --git ql/src/test/queries/clientpositive/array_map_access_nonconstant.q ql/src/test/queries/clientpositive/array_map_access_nonconstant.q
index ea6e9d5992..154641e8ba 100644
--- ql/src/test/queries/clientpositive/array_map_access_nonconstant.q
+++ ql/src/test/queries/clientpositive/array_map_access_nonconstant.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 create table array_table (`array` array<string>, index int );
diff --git ql/src/test/queries/clientpositive/authorization_1.q ql/src/test/queries/clientpositive/authorization_1.q
index 184acc75ee..42abff0fc3 100644
--- ql/src/test/queries/clientpositive/authorization_1.q
+++ ql/src/test/queries/clientpositive/authorization_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/authorization_2.q ql/src/test/queries/clientpositive/authorization_2.q
index efb42f7fbb..942b09f80d 100644
--- ql/src/test/queries/clientpositive/authorization_2.q
+++ ql/src/test/queries/clientpositive/authorization_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/authorization_3.q ql/src/test/queries/clientpositive/authorization_3.q
index 09c649417b..95c25fecc4 100644
--- ql/src/test/queries/clientpositive/authorization_3.q
+++ ql/src/test/queries/clientpositive/authorization_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/authorization_4.q ql/src/test/queries/clientpositive/authorization_4.q
index c1848a7b9a..f76ba1f781 100644
--- ql/src/test/queries/clientpositive/authorization_4.q
+++ ql/src/test/queries/clientpositive/authorization_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/authorization_6.q ql/src/test/queries/clientpositive/authorization_6.q
index 5f9bde788c..f105d053f9 100644
--- ql/src/test/queries/clientpositive/authorization_6.q
+++ ql/src/test/queries/clientpositive/authorization_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/authorization_admin_almighty2.q ql/src/test/queries/clientpositive/authorization_admin_almighty2.q
index c666e97d85..257c3cc9da 100644
--- ql/src/test/queries/clientpositive/authorization_admin_almighty2.q
+++ ql/src/test/queries/clientpositive/authorization_admin_almighty2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.test.authz.sstd.hs2.mode=true;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory;
 set hive.security.authenticator.manager=org.apache.hadoop.hive.ql.security.SessionStateConfigUserAuthenticator;
diff --git ql/src/test/queries/clientpositive/authorization_alter_table_exchange_partition.q ql/src/test/queries/clientpositive/authorization_alter_table_exchange_partition.q
index 1ff4560689..4ffe4a16c1 100644
--- ql/src/test/queries/clientpositive/authorization_alter_table_exchange_partition.q
+++ ql/src/test/queries/clientpositive/authorization_alter_table_exchange_partition.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.test.authz.sstd.hs2.mode=true;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 set hive.security.authenticator.manager=org.apache.hadoop.hive.ql.security.SessionStateConfigUserAuthenticator;
diff --git ql/src/test/queries/clientpositive/authorization_cli_nonsql.q ql/src/test/queries/clientpositive/authorization_cli_nonsql.q
index 58d3bf5288..5bc481448b 100644
--- ql/src/test/queries/clientpositive/authorization_cli_nonsql.q
+++ ql/src/test/queries/clientpositive/authorization_cli_nonsql.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory;
 set hive.security.authorization.enabled=false;
 
diff --git ql/src/test/queries/clientpositive/authorization_create_temp_table.q ql/src/test/queries/clientpositive/authorization_create_temp_table.q
index bdeea81e43..4878e20069 100644
--- ql/src/test/queries/clientpositive/authorization_create_temp_table.q
+++ ql/src/test/queries/clientpositive/authorization_create_temp_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.test.authz.sstd.hs2.mode=true;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
diff --git ql/src/test/queries/clientpositive/authorization_explain.q ql/src/test/queries/clientpositive/authorization_explain.q
index d4297043e5..7866581ab2 100644
--- ql/src/test/queries/clientpositive/authorization_explain.q
+++ ql/src/test/queries/clientpositive/authorization_explain.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.enabled=true;
diff --git ql/src/test/queries/clientpositive/authorization_view_1.q ql/src/test/queries/clientpositive/authorization_view_1.q
index 86accdc582..a355d33e20 100644
--- ql/src/test/queries/clientpositive/authorization_view_1.q
+++ ql/src/test/queries/clientpositive/authorization_view_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientpositive/authorization_view_2.q ql/src/test/queries/clientpositive/authorization_view_2.q
index 8e6138da0e..048cf6c0fe 100644
--- ql/src/test/queries/clientpositive/authorization_view_2.q
+++ ql/src/test/queries/clientpositive/authorization_view_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientpositive/authorization_view_3.q ql/src/test/queries/clientpositive/authorization_view_3.q
index aaf971eb82..31592b0904 100644
--- ql/src/test/queries/clientpositive/authorization_view_3.q
+++ ql/src/test/queries/clientpositive/authorization_view_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientpositive/authorization_view_4.q ql/src/test/queries/clientpositive/authorization_view_4.q
index 53ce35001d..d87070dd07 100644
--- ql/src/test/queries/clientpositive/authorization_view_4.q
+++ ql/src/test/queries/clientpositive/authorization_view_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
 create table src_autho_test as select * from src;
diff --git ql/src/test/queries/clientpositive/authorization_view_disable_cbo_1.q ql/src/test/queries/clientpositive/authorization_view_disable_cbo_1.q
index 42652eab23..07cd949706 100644
--- ql/src/test/queries/clientpositive/authorization_view_disable_cbo_1.q
+++ ql/src/test/queries/clientpositive/authorization_view_disable_cbo_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 set hive.cbo.enable=false;
 
diff --git ql/src/test/queries/clientpositive/authorization_view_disable_cbo_2.q ql/src/test/queries/clientpositive/authorization_view_disable_cbo_2.q
index 03d4387392..0b6edf1550 100644
--- ql/src/test/queries/clientpositive/authorization_view_disable_cbo_2.q
+++ ql/src/test/queries/clientpositive/authorization_view_disable_cbo_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
diff --git ql/src/test/queries/clientpositive/authorization_view_disable_cbo_3.q ql/src/test/queries/clientpositive/authorization_view_disable_cbo_3.q
index 44f950343a..34cd490734 100644
--- ql/src/test/queries/clientpositive/authorization_view_disable_cbo_3.q
+++ ql/src/test/queries/clientpositive/authorization_view_disable_cbo_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
diff --git ql/src/test/queries/clientpositive/authorization_view_disable_cbo_4.q ql/src/test/queries/clientpositive/authorization_view_disable_cbo_4.q
index 40424c41bb..9953349a5f 100644
--- ql/src/test/queries/clientpositive/authorization_view_disable_cbo_4.q
+++ ql/src/test/queries/clientpositive/authorization_view_disable_cbo_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 
diff --git ql/src/test/queries/clientpositive/autoColumnStats_1.q ql/src/test/queries/clientpositive/autoColumnStats_1.q
index c6ebc33f10..d584e0df15 100644
--- ql/src/test/queries/clientpositive/autoColumnStats_1.q
+++ ql/src/test/queries/clientpositive/autoColumnStats_1.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false;
 
 set hive.stats.column.autogather=true;
diff --git ql/src/test/queries/clientpositive/autoColumnStats_2.q ql/src/test/queries/clientpositive/autoColumnStats_2.q
index fadac76f06..57266af910 100644
--- ql/src/test/queries/clientpositive/autoColumnStats_2.q
+++ ql/src/test/queries/clientpositive/autoColumnStats_2.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false;
 
 set hive.stats.column.autogather=true;
diff --git ql/src/test/queries/clientpositive/autoColumnStats_3.q ql/src/test/queries/clientpositive/autoColumnStats_3.q
index 2ddd981207..63f3a94a8e 100644
--- ql/src/test/queries/clientpositive/autoColumnStats_3.q
+++ ql/src/test/queries/clientpositive/autoColumnStats_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 set hive.stats.fetch.column.stats=true;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/autoColumnStats_4.q ql/src/test/queries/clientpositive/autoColumnStats_4.q
index 9780a75709..8bd0b2c4c8 100644
--- ql/src/test/queries/clientpositive/autoColumnStats_4.q
+++ ql/src/test/queries/clientpositive/autoColumnStats_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.stats.column.autogather=true;
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
diff --git ql/src/test/queries/clientpositive/autoColumnStats_5.q ql/src/test/queries/clientpositive/autoColumnStats_5.q
index d59099cd11..3da7b3810c 100644
--- ql/src/test/queries/clientpositive/autoColumnStats_5.q
+++ ql/src/test/queries/clientpositive/autoColumnStats_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.stats.column.autogather=true;
 set hive.mapred.mode=nonstrict;
 set hive.cli.print.header=true;
diff --git ql/src/test/queries/clientpositive/autoColumnStats_5a.q ql/src/test/queries/clientpositive/autoColumnStats_5a.q
index a8bce18e92..0d94344527 100644
--- ql/src/test/queries/clientpositive/autoColumnStats_5a.q
+++ ql/src/test/queries/clientpositive/autoColumnStats_5a.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.stats.column.autogather=true;
 set hive.mapred.mode=nonstrict;
 set hive.cli.print.header=true;
diff --git ql/src/test/queries/clientpositive/autoColumnStats_6.q ql/src/test/queries/clientpositive/autoColumnStats_6.q
index 45e5daa3eb..315286b749 100644
--- ql/src/test/queries/clientpositive/autoColumnStats_6.q
+++ ql/src/test/queries/clientpositive/autoColumnStats_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=true;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/autoColumnStats_7.q ql/src/test/queries/clientpositive/autoColumnStats_7.q
index 2227685cb3..8622b2394e 100644
--- ql/src/test/queries/clientpositive/autoColumnStats_7.q
+++ ql/src/test/queries/clientpositive/autoColumnStats_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=true;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 set hive.map.aggr=false;
diff --git ql/src/test/queries/clientpositive/autoColumnStats_8.q ql/src/test/queries/clientpositive/autoColumnStats_8.q
index 42d070ac46..490aadcff5 100644
--- ql/src/test/queries/clientpositive/autoColumnStats_8.q
+++ ql/src/test/queries/clientpositive/autoColumnStats_8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.stats.column.autogather=true;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/autoColumnStats_9.q ql/src/test/queries/clientpositive/autoColumnStats_9.q
index 85f85bcfdc..944da2c7fb 100644
--- ql/src/test/queries/clientpositive/autoColumnStats_9.q
+++ ql/src/test/queries/clientpositive/autoColumnStats_9.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.stats.column.autogather=true;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/auto_join0.q ql/src/test/queries/clientpositive/auto_join0.q
index 1e1e7d1f48..f15f4270c7 100644
--- ql/src/test/queries/clientpositive/auto_join0.q
+++ ql/src/test/queries/clientpositive/auto_join0.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.auto.convert.join = true;
diff --git ql/src/test/queries/clientpositive/auto_join1.q ql/src/test/queries/clientpositive/auto_join1.q
index 7973c4bef8..58d31fb4fb 100644
--- ql/src/test/queries/clientpositive/auto_join1.q
+++ ql/src/test/queries/clientpositive/auto_join1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.auto.convert.join =true;
diff --git ql/src/test/queries/clientpositive/auto_join10.q ql/src/test/queries/clientpositive/auto_join10.q
index dad21c5fda..80ba6fff3f 100644
--- ql/src/test/queries/clientpositive/auto_join10.q
+++ ql/src/test/queries/clientpositive/auto_join10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join11.q ql/src/test/queries/clientpositive/auto_join11.q
index c56df2d6d5..3a577a8b4a 100644
--- ql/src/test/queries/clientpositive/auto_join11.q
+++ ql/src/test/queries/clientpositive/auto_join11.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join12.q ql/src/test/queries/clientpositive/auto_join12.q
index 55cd6e9555..0f40202684 100644
--- ql/src/test/queries/clientpositive/auto_join12.q
+++ ql/src/test/queries/clientpositive/auto_join12.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/auto_join13.q ql/src/test/queries/clientpositive/auto_join13.q
index ecf4c3b524..8d97258619 100644
--- ql/src/test/queries/clientpositive/auto_join13.q
+++ ql/src/test/queries/clientpositive/auto_join13.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 set hive.auto.convert.join = true;
diff --git ql/src/test/queries/clientpositive/auto_join14.q ql/src/test/queries/clientpositive/auto_join14.q
index 6ad1fed194..2ce606a3d8 100644
--- ql/src/test/queries/clientpositive/auto_join14.q
+++ ql/src/test/queries/clientpositive/auto_join14.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 set hive.auto.convert.join = true;
diff --git ql/src/test/queries/clientpositive/auto_join14_hadoop20.q ql/src/test/queries/clientpositive/auto_join14_hadoop20.q
index 99815f573d..6825da2b40 100644
--- ql/src/test/queries/clientpositive/auto_join14_hadoop20.q
+++ ql/src/test/queries/clientpositive/auto_join14_hadoop20.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join15.q ql/src/test/queries/clientpositive/auto_join15.q
index 66b745f62e..2a0e417967 100644
--- ql/src/test/queries/clientpositive/auto_join15.q
+++ ql/src/test/queries/clientpositive/auto_join15.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join16.q ql/src/test/queries/clientpositive/auto_join16.q
index 3440817e31..dac60cf302 100644
--- ql/src/test/queries/clientpositive/auto_join16.q
+++ ql/src/test/queries/clientpositive/auto_join16.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 set hive.auto.convert.join = true;
diff --git ql/src/test/queries/clientpositive/auto_join17.q ql/src/test/queries/clientpositive/auto_join17.q
index 43c5860920..6b63513c17 100644
--- ql/src/test/queries/clientpositive/auto_join17.q
+++ ql/src/test/queries/clientpositive/auto_join17.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 set hive.auto.convert.join = true;
diff --git ql/src/test/queries/clientpositive/auto_join18.q ql/src/test/queries/clientpositive/auto_join18.q
index 1340bf074a..a527b1874c 100644
--- ql/src/test/queries/clientpositive/auto_join18.q
+++ ql/src/test/queries/clientpositive/auto_join18.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 set hive.auto.convert.join = true;
diff --git ql/src/test/queries/clientpositive/auto_join18_multi_distinct.q ql/src/test/queries/clientpositive/auto_join18_multi_distinct.q
index 67400bdf26..c6a47ca2d7 100644
--- ql/src/test/queries/clientpositive/auto_join18_multi_distinct.q
+++ ql/src/test/queries/clientpositive/auto_join18_multi_distinct.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join19.q ql/src/test/queries/clientpositive/auto_join19.q
index 532a21e8dd..f231e07c79 100644
--- ql/src/test/queries/clientpositive/auto_join19.q
+++ ql/src/test/queries/clientpositive/auto_join19.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join19_inclause.q ql/src/test/queries/clientpositive/auto_join19_inclause.q
index 7773289ada..f8d16b5677 100644
--- ql/src/test/queries/clientpositive/auto_join19_inclause.q
+++ ql/src/test/queries/clientpositive/auto_join19_inclause.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 set hive.optimize.point.lookup.min=2;
diff --git ql/src/test/queries/clientpositive/auto_join2.q ql/src/test/queries/clientpositive/auto_join2.q
index 239162e7a1..47324de4fa 100644
--- ql/src/test/queries/clientpositive/auto_join2.q
+++ ql/src/test/queries/clientpositive/auto_join2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join20.q ql/src/test/queries/clientpositive/auto_join20.q
index e619584142..d97fb004b2 100644
--- ql/src/test/queries/clientpositive/auto_join20.q
+++ ql/src/test/queries/clientpositive/auto_join20.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.auto.convert.join = true;
 
 explain
diff --git ql/src/test/queries/clientpositive/auto_join21.q ql/src/test/queries/clientpositive/auto_join21.q
index 10ac4901c8..0418753d09 100644
--- ql/src/test/queries/clientpositive/auto_join21.q
+++ ql/src/test/queries/clientpositive/auto_join21.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join22.q ql/src/test/queries/clientpositive/auto_join22.q
index ffe9e95d5a..a1fda8530d 100644
--- ql/src/test/queries/clientpositive/auto_join22.q
+++ ql/src/test/queries/clientpositive/auto_join22.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 explain
diff --git ql/src/test/queries/clientpositive/auto_join23.q ql/src/test/queries/clientpositive/auto_join23.q
index 4314f73575..91cf3cd64c 100644
--- ql/src/test/queries/clientpositive/auto_join23.q
+++ ql/src/test/queries/clientpositive/auto_join23.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join24.q ql/src/test/queries/clientpositive/auto_join24.q
index c8001643d1..32d5cf4233 100644
--- ql/src/test/queries/clientpositive/auto_join24.q
+++ ql/src/test/queries/clientpositive/auto_join24.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join25.q ql/src/test/queries/clientpositive/auto_join25.q
index 08dd491c3c..8f3009516a 100644
--- ql/src/test/queries/clientpositive/auto_join25.q
+++ ql/src/test/queries/clientpositive/auto_join25.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.PostExecutePrinter,org.apache.hadoop.hive.ql.hooks.PrintCompletedTasksHook;
 
diff --git ql/src/test/queries/clientpositive/auto_join26.q ql/src/test/queries/clientpositive/auto_join26.q
index 44a4a30364..9203b26599 100644
--- ql/src/test/queries/clientpositive/auto_join26.q
+++ ql/src/test/queries/clientpositive/auto_join26.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/auto_join27.q ql/src/test/queries/clientpositive/auto_join27.q
index f3c5004060..9669450e30 100644
--- ql/src/test/queries/clientpositive/auto_join27.q
+++ ql/src/test/queries/clientpositive/auto_join27.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join28.q ql/src/test/queries/clientpositive/auto_join28.q
index 61b9d84291..57f89bdb48 100644
--- ql/src/test/queries/clientpositive/auto_join28.q
+++ ql/src/test/queries/clientpositive/auto_join28.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapjoin.smalltable.filesize = 1;
 
 set hive.auto.convert.join = true;
diff --git ql/src/test/queries/clientpositive/auto_join29.q ql/src/test/queries/clientpositive/auto_join29.q
index f991540e64..4a1eda146c 100644
--- ql/src/test/queries/clientpositive/auto_join29.q
+++ ql/src/test/queries/clientpositive/auto_join29.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join3.q ql/src/test/queries/clientpositive/auto_join3.q
index 8f107868a6..bd29c9a00b 100644
--- ql/src/test/queries/clientpositive/auto_join3.q
+++ ql/src/test/queries/clientpositive/auto_join3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join30.q ql/src/test/queries/clientpositive/auto_join30.q
index 7ac3c0e3b7..7150d514ba 100644
--- ql/src/test/queries/clientpositive/auto_join30.q
+++ ql/src/test/queries/clientpositive/auto_join30.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join31.q ql/src/test/queries/clientpositive/auto_join31.q
index cfa5eba175..3435c13237 100644
--- ql/src/test/queries/clientpositive/auto_join31.q
+++ ql/src/test/queries/clientpositive/auto_join31.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.auto.convert.join = true;
 
 explain
diff --git ql/src/test/queries/clientpositive/auto_join33.q ql/src/test/queries/clientpositive/auto_join33.q
index 654a8266d0..2843ff444b 100644
--- ql/src/test/queries/clientpositive/auto_join33.q
+++ ql/src/test/queries/clientpositive/auto_join33.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join4.q ql/src/test/queries/clientpositive/auto_join4.q
index 5a582d3348..0a8848b6b7 100644
--- ql/src/test/queries/clientpositive/auto_join4.q
+++ ql/src/test/queries/clientpositive/auto_join4.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join5.q ql/src/test/queries/clientpositive/auto_join5.q
index 0dd844c15e..5967319e72 100644
--- ql/src/test/queries/clientpositive/auto_join5.q
+++ ql/src/test/queries/clientpositive/auto_join5.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join6.q ql/src/test/queries/clientpositive/auto_join6.q
index b00c7f4590..b356f55e77 100644
--- ql/src/test/queries/clientpositive/auto_join6.q
+++ ql/src/test/queries/clientpositive/auto_join6.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join7.q ql/src/test/queries/clientpositive/auto_join7.q
index 091a37ee45..bd13519b9b 100644
--- ql/src/test/queries/clientpositive/auto_join7.q
+++ ql/src/test/queries/clientpositive/auto_join7.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join8.q ql/src/test/queries/clientpositive/auto_join8.q
index 32d6b2dafb..d9d3f911e3 100644
--- ql/src/test/queries/clientpositive/auto_join8.q
+++ ql/src/test/queries/clientpositive/auto_join8.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join9.q ql/src/test/queries/clientpositive/auto_join9.q
index 3b74153d85..72676d4ce4 100644
--- ql/src/test/queries/clientpositive/auto_join9.q
+++ ql/src/test/queries/clientpositive/auto_join9.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join_stats.q ql/src/test/queries/clientpositive/auto_join_stats.q
index de56abdd36..7720fdcace 100644
--- ql/src/test/queries/clientpositive/auto_join_stats.q
+++ ql/src/test/queries/clientpositive/auto_join_stats.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.auto.convert.join = true;
 set hive.auto.convert.join.noconditionaltask.size=2660;
 
diff --git ql/src/test/queries/clientpositive/auto_join_stats2.q ql/src/test/queries/clientpositive/auto_join_stats2.q
index 6f9140af78..dc4a996310 100644
--- ql/src/test/queries/clientpositive/auto_join_stats2.q
+++ ql/src/test/queries/clientpositive/auto_join_stats2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join = true;
 
diff --git ql/src/test/queries/clientpositive/auto_join_without_localtask.q ql/src/test/queries/clientpositive/auto_join_without_localtask.q
index 6438908a08..ba3eeae4f7 100644
--- ql/src/test/queries/clientpositive/auto_join_without_localtask.q
+++ ql/src/test/queries/clientpositive/auto_join_without_localtask.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.PostExecutePrinter,org.apache.hadoop.hive.ql.hooks.PrintCompletedTasksHook;
 set hive.auto.convert.join=true;
diff --git ql/src/test/queries/clientpositive/auto_smb_mapjoin_14.q ql/src/test/queries/clientpositive/auto_smb_mapjoin_14.q
index 666ae7580d..f6eb5c5a81 100644
--- ql/src/test/queries/clientpositive/auto_smb_mapjoin_14.q
+++ ql/src/test/queries/clientpositive/auto_smb_mapjoin_14.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 ;
 
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_1.q ql/src/test/queries/clientpositive/auto_sortmerge_join_1.q
index 845d36939e..6949f8cece 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_1.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q
index abd3a34416..1cbda1f41f 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 ;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_11.q ql/src/test/queries/clientpositive/auto_sortmerge_join_11.q
index d9066a44c3..f95d36cda9 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_11.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_12.q ql/src/test/queries/clientpositive/auto_sortmerge_join_12.q
index 0864188740..86ba6cfe29 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_12.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_13.q ql/src/test/queries/clientpositive/auto_sortmerge_join_13.q
index 32b57ab006..44d3452d77 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_13.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_13.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 
 set hive.exec.reducers.max = 1;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_14.q ql/src/test/queries/clientpositive/auto_sortmerge_join_14.q
index 7ce7e05fe3..b7c361ba82 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_14.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_14.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 ;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_15.q ql/src/test/queries/clientpositive/auto_sortmerge_join_15.q
index 84a8ed76c4..4a2a2eab81 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_15.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_15.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 ;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_2.q ql/src/test/queries/clientpositive/auto_sortmerge_join_2.q
index e5fdcb57e4..0413b51ef4 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_2.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_3.q ql/src/test/queries/clientpositive/auto_sortmerge_join_3.q
index 673a460243..7062b82f7b 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_3.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_4.q ql/src/test/queries/clientpositive/auto_sortmerge_join_4.q
index abf09e5534..1a23fca585 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_4.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_5.q ql/src/test/queries/clientpositive/auto_sortmerge_join_5.q
index b163498814..50303cf2e0 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_5.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_6.q ql/src/test/queries/clientpositive/auto_sortmerge_join_6.q
index 25eeee33e3..32745c90e3 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_6.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 ;
 
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_7.q ql/src/test/queries/clientpositive/auto_sortmerge_join_7.q
index bd780861e3..96f425086f 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_7.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_8.q ql/src/test/queries/clientpositive/auto_sortmerge_join_8.q
index d09f83be0f..6783d354d9 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_8.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/auto_sortmerge_join_9.q ql/src/test/queries/clientpositive/auto_sortmerge_join_9.q
index 1abdc2cae8..b342dea1d5 100644
--- ql/src/test/queries/clientpositive/auto_sortmerge_join_9.q
+++ ql/src/test/queries/clientpositive/auto_sortmerge_join_9.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 ;
diff --git ql/src/test/queries/clientpositive/autogen_colalias.q ql/src/test/queries/clientpositive/autogen_colalias.q
index 5bbd433e00..2030c2a2a6 100644
--- ql/src/test/queries/clientpositive/autogen_colalias.q
+++ ql/src/test/queries/clientpositive/autogen_colalias.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TEMPORARY FUNCTION test_max AS 'org.apache.hadoop.hive.ql.udf.UDAFTestMax';
 
diff --git ql/src/test/queries/clientpositive/avro_add_column3.q ql/src/test/queries/clientpositive/avro_add_column3.q
index 2d9cb6f3f9..939cb4fe4b 100644
--- ql/src/test/queries/clientpositive/avro_add_column3.q
+++ ql/src/test/queries/clientpositive/avro_add_column3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/avro_compression_enabled.q ql/src/test/queries/clientpositive/avro_compression_enabled.q
index 58867ff50f..e0fa2b6356 100644
--- ql/src/test/queries/clientpositive/avro_compression_enabled.q
+++ ql/src/test/queries/clientpositive/avro_compression_enabled.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- verify that new joins bring in correct schemas (including evolved schemas)
 
 CREATE TABLE doctors4
diff --git ql/src/test/queries/clientpositive/avro_compression_enabled_native.q ql/src/test/queries/clientpositive/avro_compression_enabled_native.q
index 99c38ba31f..b168880ff1 100644
--- ql/src/test/queries/clientpositive/avro_compression_enabled_native.q
+++ ql/src/test/queries/clientpositive/avro_compression_enabled_native.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- verify that new joins bring in correct schemas (including evolved schemas)
 
 CREATE TABLE doctors4 (
diff --git ql/src/test/queries/clientpositive/avrocountemptytbl.q ql/src/test/queries/clientpositive/avrocountemptytbl.q
index 3ede2bb65c..98c3a456d7 100644
--- ql/src/test/queries/clientpositive/avrocountemptytbl.q
+++ ql/src/test/queries/clientpositive/avrocountemptytbl.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 drop table if exists emptyavro;
diff --git ql/src/test/queries/clientpositive/ba_table1.q ql/src/test/queries/clientpositive/ba_table1.q
index fe687e69fd..cce7ccb447 100644
--- ql/src/test/queries/clientpositive/ba_table1.q
+++ ql/src/test/queries/clientpositive/ba_table1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 drop table ba_test;
diff --git ql/src/test/queries/clientpositive/ba_table2.q ql/src/test/queries/clientpositive/ba_table2.q
index 1746091a01..71689f0a67 100644
--- ql/src/test/queries/clientpositive/ba_table2.q
+++ ql/src/test/queries/clientpositive/ba_table2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 drop table ba_test;
diff --git ql/src/test/queries/clientpositive/ba_table3.q ql/src/test/queries/clientpositive/ba_table3.q
index 8137722965..0423327560 100644
--- ql/src/test/queries/clientpositive/ba_table3.q
+++ ql/src/test/queries/clientpositive/ba_table3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table ba_test;
 
 -- All the tests of ba_table1.q + test for a group-by and aggregation on a binary key.
diff --git ql/src/test/queries/clientpositive/ba_table_udfs.q ql/src/test/queries/clientpositive/ba_table_udfs.q
index 7d952db1c2..676e06a6ef 100644
--- ql/src/test/queries/clientpositive/ba_table_udfs.q
+++ ql/src/test/queries/clientpositive/ba_table_udfs.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 USE default;
diff --git ql/src/test/queries/clientpositive/ba_table_union.q ql/src/test/queries/clientpositive/ba_table_union.q
index bf35d0e9b6..3371f08706 100644
--- ql/src/test/queries/clientpositive/ba_table_union.q
+++ ql/src/test/queries/clientpositive/ba_table_union.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table ba_test;
 
 -- this query tests ba_table1.q + nested queries with multiple operations on binary data types + union on binary types 
diff --git ql/src/test/queries/clientpositive/binary_constant.q ql/src/test/queries/clientpositive/binary_constant.q
index 4f80dc33c9..2c02cede15 100644
--- ql/src/test/queries/clientpositive/binary_constant.q
+++ ql/src/test/queries/clientpositive/binary_constant.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 select cast(cast('a' as binary) as string) from src tablesample (1 rows);
diff --git ql/src/test/queries/clientpositive/binary_output_format.q ql/src/test/queries/clientpositive/binary_output_format.q
index c5d9abd062..9ead0cc82f 100644
--- ql/src/test/queries/clientpositive/binary_output_format.q
+++ ql/src/test/queries/clientpositive/binary_output_format.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Create a table with binary output format
 CREATE TABLE dest1(mydata STRING)
 ROW FORMAT SERDE
diff --git ql/src/test/queries/clientpositive/binary_table_bincolserde.q ql/src/test/queries/clientpositive/binary_table_bincolserde.q
index 47a560c494..7b99e40b9c 100644
--- ql/src/test/queries/clientpositive/binary_table_bincolserde.q
+++ ql/src/test/queries/clientpositive/binary_table_bincolserde.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table ba_test;
 
 -- Tests everything in binary_table_colserde.q + uses LazyBinaryColumnarSerde
diff --git ql/src/test/queries/clientpositive/binary_table_colserde.q ql/src/test/queries/clientpositive/binary_table_colserde.q
index 1f5c98a239..71a4b22290 100644
--- ql/src/test/queries/clientpositive/binary_table_colserde.q
+++ ql/src/test/queries/clientpositive/binary_table_colserde.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table ba_test;
 
 -- Everything in ba_table1.q + columnar serde in RCFILE.
diff --git ql/src/test/queries/clientpositive/bitvector.q ql/src/test/queries/clientpositive/bitvector.q
index d8669f254b..975db29cc7 100644
--- ql/src/test/queries/clientpositive/bitvector.q
+++ ql/src/test/queries/clientpositive/bitvector.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 desc formatted src key;
diff --git ql/src/test/queries/clientpositive/bucket1.q ql/src/test/queries/clientpositive/bucket1.q
index 6a59465fb9..beb4a8105f 100644
--- ql/src/test/queries/clientpositive/bucket1.q
+++ ql/src/test/queries/clientpositive/bucket1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 ;
 set hive.exec.reducers.max = 200;
 
diff --git ql/src/test/queries/clientpositive/bucket2.q ql/src/test/queries/clientpositive/bucket2.q
index 4e63859e18..c7ecb6e678 100644
--- ql/src/test/queries/clientpositive/bucket2.q
+++ ql/src/test/queries/clientpositive/bucket2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 ;
 set hive.exec.reducers.max = 1;
diff --git ql/src/test/queries/clientpositive/bucket3.q ql/src/test/queries/clientpositive/bucket3.q
index b11e4da9fe..fd8b2e374a 100644
--- ql/src/test/queries/clientpositive/bucket3.q
+++ ql/src/test/queries/clientpositive/bucket3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 ;
 set hive.exec.reducers.max = 1;
diff --git ql/src/test/queries/clientpositive/bucket4.q ql/src/test/queries/clientpositive/bucket4.q
index 7cd962d0f9..e3fe660557 100644
--- ql/src/test/queries/clientpositive/bucket4.q
+++ ql/src/test/queries/clientpositive/bucket4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 ;
diff --git ql/src/test/queries/clientpositive/bucket5.q ql/src/test/queries/clientpositive/bucket5.q
index bf4fbb0e86..7c3da98ea1 100644
--- ql/src/test/queries/clientpositive/bucket5.q
+++ ql/src/test/queries/clientpositive/bucket5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 ;
 
diff --git ql/src/test/queries/clientpositive/bucket6.q ql/src/test/queries/clientpositive/bucket6.q
index 0484d33132..ef4a16eef2 100644
--- ql/src/test/queries/clientpositive/bucket6.q
+++ ql/src/test/queries/clientpositive/bucket6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 CREATE TABLE src_bucket(key STRING, value STRING) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS;
 
diff --git ql/src/test/queries/clientpositive/bucket_groupby.q ql/src/test/queries/clientpositive/bucket_groupby.q
index 3cb6709fcf..4708d3327e 100644
--- ql/src/test/queries/clientpositive/bucket_groupby.q
+++ ql/src/test/queries/clientpositive/bucket_groupby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.vectorized.execution.enabled=false;
 set hive.mapred.mode=nonstrict;
 create table clustergroupby(key string, value string) partitioned by(ds string);
diff --git ql/src/test/queries/clientpositive/bucket_many.q ql/src/test/queries/clientpositive/bucket_many.q
index 8a64ff13af..6cd3004c7a 100644
--- ql/src/test/queries/clientpositive/bucket_many.q
+++ ql/src/test/queries/clientpositive/bucket_many.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 ;
 set mapred.reduce.tasks = 16;
 
diff --git ql/src/test/queries/clientpositive/bucket_map_join_spark4.q ql/src/test/queries/clientpositive/bucket_map_join_spark4.q
index 3fa7a04401..3ae141b060 100644
--- ql/src/test/queries/clientpositive/bucket_map_join_spark4.q
+++ ql/src/test/queries/clientpositive/bucket_map_join_spark4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 ;
 
diff --git ql/src/test/queries/clientpositive/bucket_map_join_tez2.q ql/src/test/queries/clientpositive/bucket_map_join_tez2.q
index 70ea213265..1361e32c1a 100644
--- ql/src/test/queries/clientpositive/bucket_map_join_tez2.q
+++ ql/src/test/queries/clientpositive/bucket_map_join_tez2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 set hive.strict.checks.bucketing=false;
 
diff --git ql/src/test/queries/clientpositive/bucket_num_reducers.q ql/src/test/queries/clientpositive/bucket_num_reducers.q
index 5c5008eea7..7483e5ebb2 100644
--- ql/src/test/queries/clientpositive/bucket_num_reducers.q
+++ ql/src/test/queries/clientpositive/bucket_num_reducers.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 set hive.exec.mode.local.auto=false;
 set mapred.reduce.tasks = 10;
diff --git ql/src/test/queries/clientpositive/bucket_num_reducers2.q ql/src/test/queries/clientpositive/bucket_num_reducers2.q
index 2533ae8c7e..2c4e69770c 100644
--- ql/src/test/queries/clientpositive/bucket_num_reducers2.q
+++ ql/src/test/queries/clientpositive/bucket_num_reducers2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.mode.local.auto=false;
 set hive.exec.reducers.max = 2;
 
diff --git ql/src/test/queries/clientpositive/bucketcontext_1.q ql/src/test/queries/clientpositive/bucketcontext_1.q
index 876bc0f30e..cf5fa6ccf5 100644
--- ql/src/test/queries/clientpositive/bucketcontext_1.q
+++ ql/src/test/queries/clientpositive/bucketcontext_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/bucketcontext_2.q ql/src/test/queries/clientpositive/bucketcontext_2.q
index 53518c4379..a53105c504 100644
--- ql/src/test/queries/clientpositive/bucketcontext_2.q
+++ ql/src/test/queries/clientpositive/bucketcontext_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/bucketcontext_3.q ql/src/test/queries/clientpositive/bucketcontext_3.q
index 5eadd1d2a3..b77173a252 100644
--- ql/src/test/queries/clientpositive/bucketcontext_3.q
+++ ql/src/test/queries/clientpositive/bucketcontext_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/bucketcontext_4.q ql/src/test/queries/clientpositive/bucketcontext_4.q
index f5e0150014..b3113725f0 100644
--- ql/src/test/queries/clientpositive/bucketcontext_4.q
+++ ql/src/test/queries/clientpositive/bucketcontext_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/bucketcontext_5.q ql/src/test/queries/clientpositive/bucketcontext_5.q
index 85acdd9984..332d533682 100644
--- ql/src/test/queries/clientpositive/bucketcontext_5.q
+++ ql/src/test/queries/clientpositive/bucketcontext_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 -- small no part, 4 bucket & big no part, 2 bucket
diff --git ql/src/test/queries/clientpositive/bucketcontext_6.q ql/src/test/queries/clientpositive/bucketcontext_6.q
index d7ab5e38c1..0b608ec2a4 100644
--- ql/src/test/queries/clientpositive/bucketcontext_6.q
+++ ql/src/test/queries/clientpositive/bucketcontext_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/bucketcontext_7.q ql/src/test/queries/clientpositive/bucketcontext_7.q
index 2682c7da10..32245a5352 100644
--- ql/src/test/queries/clientpositive/bucketcontext_7.q
+++ ql/src/test/queries/clientpositive/bucketcontext_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/bucketcontext_8.q ql/src/test/queries/clientpositive/bucketcontext_8.q
index 60be0001fc..252f74eb38 100644
--- ql/src/test/queries/clientpositive/bucketcontext_8.q
+++ ql/src/test/queries/clientpositive/bucketcontext_8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/bucketmapjoin10.q ql/src/test/queries/clientpositive/bucketmapjoin10.q
index 4196d2b791..a0051b5318 100644
--- ql/src/test/queries/clientpositive/bucketmapjoin10.q
+++ ql/src/test/queries/clientpositive/bucketmapjoin10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/bucketmapjoin11.q ql/src/test/queries/clientpositive/bucketmapjoin11.q
index a4396dba70..633e388453 100644
--- ql/src/test/queries/clientpositive/bucketmapjoin11.q
+++ ql/src/test/queries/clientpositive/bucketmapjoin11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/bucketmapjoin12.q ql/src/test/queries/clientpositive/bucketmapjoin12.q
index e9d6760279..2615f3e43c 100644
--- ql/src/test/queries/clientpositive/bucketmapjoin12.q
+++ ql/src/test/queries/clientpositive/bucketmapjoin12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/bucketmapjoin13.q ql/src/test/queries/clientpositive/bucketmapjoin13.q
index 456d155b19..db437b8e14 100644
--- ql/src/test/queries/clientpositive/bucketmapjoin13.q
+++ ql/src/test/queries/clientpositive/bucketmapjoin13.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.exec.reducers.max=1;
 
diff --git ql/src/test/queries/clientpositive/bucketmapjoin6.q ql/src/test/queries/clientpositive/bucketmapjoin6.q
index 9da0619f0c..29ced26c32 100644
--- ql/src/test/queries/clientpositive/bucketmapjoin6.q
+++ ql/src/test/queries/clientpositive/bucketmapjoin6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/bucketmapjoin8.q ql/src/test/queries/clientpositive/bucketmapjoin8.q
index 7dc096186e..4be81c5f53 100644
--- ql/src/test/queries/clientpositive/bucketmapjoin8.q
+++ ql/src/test/queries/clientpositive/bucketmapjoin8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/bucketmapjoin9.q ql/src/test/queries/clientpositive/bucketmapjoin9.q
index 57d0bf20fc..c9539f5b5a 100644
--- ql/src/test/queries/clientpositive/bucketmapjoin9.q
+++ ql/src/test/queries/clientpositive/bucketmapjoin9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.strict.checks.bucketing=false;
 
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/bucketsortoptimize_insert_1.q ql/src/test/queries/clientpositive/bucketsortoptimize_insert_1.q
index 8f8d625a45..5c04de5a04 100644
--- ql/src/test/queries/clientpositive/bucketsortoptimize_insert_1.q
+++ ql/src/test/queries/clientpositive/bucketsortoptimize_insert_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
 
diff --git ql/src/test/queries/clientpositive/bucketsortoptimize_insert_2.q ql/src/test/queries/clientpositive/bucketsortoptimize_insert_2.q
index c812cf1623..67eddf0f09 100644
--- ql/src/test/queries/clientpositive/bucketsortoptimize_insert_2.q
+++ ql/src/test/queries/clientpositive/bucketsortoptimize_insert_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=true;
 set hive.auto.convert.sortmerge.join=true;
diff --git ql/src/test/queries/clientpositive/bucketsortoptimize_insert_3.q ql/src/test/queries/clientpositive/bucketsortoptimize_insert_3.q
index 6027707b88..ee12ab2bf1 100644
--- ql/src/test/queries/clientpositive/bucketsortoptimize_insert_3.q
+++ ql/src/test/queries/clientpositive/bucketsortoptimize_insert_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
 
diff --git ql/src/test/queries/clientpositive/bucketsortoptimize_insert_4.q ql/src/test/queries/clientpositive/bucketsortoptimize_insert_4.q
index a31a4514a0..2f99ed729d 100644
--- ql/src/test/queries/clientpositive/bucketsortoptimize_insert_4.q
+++ ql/src/test/queries/clientpositive/bucketsortoptimize_insert_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=true;
 set hive.auto.convert.sortmerge.join=true;
diff --git ql/src/test/queries/clientpositive/bucketsortoptimize_insert_5.q ql/src/test/queries/clientpositive/bucketsortoptimize_insert_5.q
index e95ba98776..94ea013b75 100644
--- ql/src/test/queries/clientpositive/bucketsortoptimize_insert_5.q
+++ ql/src/test/queries/clientpositive/bucketsortoptimize_insert_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=true;
 set hive.auto.convert.sortmerge.join=true;
diff --git ql/src/test/queries/clientpositive/bucketsortoptimize_insert_6.q ql/src/test/queries/clientpositive/bucketsortoptimize_insert_6.q
index 894ba81d97..3cee1a6b9a 100644
--- ql/src/test/queries/clientpositive/bucketsortoptimize_insert_6.q
+++ ql/src/test/queries/clientpositive/bucketsortoptimize_insert_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=true;
 set hive.auto.convert.sortmerge.join=true;
diff --git ql/src/test/queries/clientpositive/bucketsortoptimize_insert_7.q ql/src/test/queries/clientpositive/bucketsortoptimize_insert_7.q
index a68c0b492b..2d4dc93ca0 100644
--- ql/src/test/queries/clientpositive/bucketsortoptimize_insert_7.q
+++ ql/src/test/queries/clientpositive/bucketsortoptimize_insert_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=true;
 set hive.auto.convert.sortmerge.join=true;
diff --git ql/src/test/queries/clientpositive/bucketsortoptimize_insert_8.q ql/src/test/queries/clientpositive/bucketsortoptimize_insert_8.q
index d0bbd9a53d..af88d52ca9 100644
--- ql/src/test/queries/clientpositive/bucketsortoptimize_insert_8.q
+++ ql/src/test/queries/clientpositive/bucketsortoptimize_insert_8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=true;
 set hive.auto.convert.sortmerge.join=true;
diff --git ql/src/test/queries/clientpositive/case_sensitivity.q ql/src/test/queries/clientpositive/case_sensitivity.q
index a4b73f0a87..1dab85e39c 100644
--- ql/src/test/queries/clientpositive/case_sensitivity.q
+++ ql/src/test/queries/clientpositive/case_sensitivity.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 CREATE TABLE DEST1(Key INT, VALUE STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/cast1.q ql/src/test/queries/clientpositive/cast1.q
index fdf4219917..359b022206 100644
--- ql/src/test/queries/clientpositive/cast1.q
+++ ql/src/test/queries/clientpositive/cast1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(c1 INT, c2 DOUBLE, c3 DOUBLE, c4 DOUBLE, c5 INT, c6 STRING, c7 INT) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/cast_qualified_types.q ql/src/test/queries/clientpositive/cast_qualified_types.q
index 4f977c1ff6..b9c31a1689 100644
--- ql/src/test/queries/clientpositive/cast_qualified_types.q
+++ ql/src/test/queries/clientpositive/cast_qualified_types.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 select
   cast(key as decimal(10,2)) as c1,
   cast(key as char(10)) as c2,
diff --git ql/src/test/queries/clientpositive/cast_tinyint_to_double.q ql/src/test/queries/clientpositive/cast_tinyint_to_double.q
index 59c5e89e4d..95cc518055 100644
--- ql/src/test/queries/clientpositive/cast_tinyint_to_double.q
+++ ql/src/test/queries/clientpositive/cast_tinyint_to_double.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table t;
 CREATE TABLE t(c tinyint);
 insert overwrite table t select 10 from src limit 1;
diff --git ql/src/test/queries/clientpositive/cast_to_int.q ql/src/test/queries/clientpositive/cast_to_int.q
index b1551f2feb..23caaaea69 100644
--- ql/src/test/queries/clientpositive/cast_to_int.q
+++ ql/src/test/queries/clientpositive/cast_to_int.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- cast string floats to integer types
diff --git ql/src/test/queries/clientpositive/cbo_SortUnionTransposeRule.q ql/src/test/queries/clientpositive/cbo_SortUnionTransposeRule.q
index 9c8c4be8dd..1b2925ee45 100644
--- ql/src/test/queries/clientpositive/cbo_SortUnionTransposeRule.q
+++ ql/src/test/queries/clientpositive/cbo_SortUnionTransposeRule.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 create table s as select * from src limit 10;
diff --git ql/src/test/queries/clientpositive/cbo_const.q ql/src/test/queries/clientpositive/cbo_const.q
index e38e2da503..de5d21991f 100644
--- ql/src/test/queries/clientpositive/cbo_const.q
+++ ql/src/test/queries/clientpositive/cbo_const.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 
diff --git ql/src/test/queries/clientpositive/cbo_gby.q ql/src/test/queries/clientpositive/cbo_gby.q
index 7aca53a9c5..cab45dbdac 100644
--- ql/src/test/queries/clientpositive/cbo_gby.q
+++ ql/src/test/queries/clientpositive/cbo_gby.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_gby_empty.q ql/src/test/queries/clientpositive/cbo_gby_empty.q
index 7b23d015fb..323293233b 100644
--- ql/src/test/queries/clientpositive/cbo_gby_empty.q
+++ ql/src/test/queries/clientpositive/cbo_gby_empty.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:cbo_t3
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_input26.q ql/src/test/queries/clientpositive/cbo_input26.q
index 40050f9e31..7ddce75785 100644
--- ql/src/test/queries/clientpositive/cbo_input26.q
+++ ql/src/test/queries/clientpositive/cbo_input26.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.optimize.constant.propagation=false;
 
diff --git ql/src/test/queries/clientpositive/cbo_join.q ql/src/test/queries/clientpositive/cbo_join.q
index eef2440886..fb3fce7dad 100644
--- ql/src/test/queries/clientpositive/cbo_join.q
+++ ql/src/test/queries/clientpositive/cbo_join.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_limit.q ql/src/test/queries/clientpositive/cbo_limit.q
index 5e54a1ba72..24c1eae228 100644
--- ql/src/test/queries/clientpositive/cbo_limit.q
+++ ql/src/test/queries/clientpositive/cbo_limit.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_rp_auto_join0.q ql/src/test/queries/clientpositive/cbo_rp_auto_join0.q
index e64fd415c9..5929ad7706 100644
--- ql/src/test/queries/clientpositive/cbo_rp_auto_join0.q
+++ ql/src/test/queries/clientpositive/cbo_rp_auto_join0.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.returnpath.hiveop=true;
 set hive.stats.fetch.column.stats=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_auto_join1.q ql/src/test/queries/clientpositive/cbo_rp_auto_join1.q
index e9e434cd09..9137669281 100644
--- ql/src/test/queries/clientpositive/cbo_rp_auto_join1.q
+++ ql/src/test/queries/clientpositive/cbo_rp_auto_join1.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.cbo.returnpath.hiveop=true;
 set hive.stats.fetch.column.stats=true;
 set hive.optimize.semijoin.conversion=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_auto_join17.q ql/src/test/queries/clientpositive/cbo_rp_auto_join17.q
index f7da842cd2..ae17ec66b4 100644
--- ql/src/test/queries/clientpositive/cbo_rp_auto_join17.q
+++ ql/src/test/queries/clientpositive/cbo_rp_auto_join17.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.returnpath.hiveop=true;
 set hive.auto.convert.join = true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_cross_product_check_2.q ql/src/test/queries/clientpositive/cbo_rp_cross_product_check_2.q
index 8ab24866bd..6ada9aec41 100644
--- ql/src/test/queries/clientpositive/cbo_rp_cross_product_check_2.q
+++ ql/src/test/queries/clientpositive/cbo_rp_cross_product_check_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.returnpath.hiveop=true;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/cbo_rp_gby.q ql/src/test/queries/clientpositive/cbo_rp_gby.q
index 7aca53a9c5..cab45dbdac 100644
--- ql/src/test/queries/clientpositive/cbo_rp_gby.q
+++ ql/src/test/queries/clientpositive/cbo_rp_gby.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_rp_gby2_map_multi_distinct.q ql/src/test/queries/clientpositive/cbo_rp_gby2_map_multi_distinct.q
index 0f18e2285a..0e73621feb 100644
--- ql/src/test/queries/clientpositive/cbo_rp_gby2_map_multi_distinct.q
+++ ql/src/test/queries/clientpositive/cbo_rp_gby2_map_multi_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_gby_empty.q ql/src/test/queries/clientpositive/cbo_rp_gby_empty.q
index 48d8cb1a18..3c99ef4cc6 100644
--- ql/src/test/queries/clientpositive/cbo_rp_gby_empty.q
+++ ql/src/test/queries/clientpositive/cbo_rp_gby_empty.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:cbo_t3
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_groupby3_noskew_multi_distinct.q ql/src/test/queries/clientpositive/cbo_rp_groupby3_noskew_multi_distinct.q
index 921b25c9e3..ff2fbfb35b 100644
--- ql/src/test/queries/clientpositive/cbo_rp_groupby3_noskew_multi_distinct.q
+++ ql/src/test/queries/clientpositive/cbo_rp_groupby3_noskew_multi_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.returnpath.hiveop=true;
 set hive.map.aggr=false;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/cbo_rp_join.q ql/src/test/queries/clientpositive/cbo_rp_join.q
index eef2440886..fb3fce7dad 100644
--- ql/src/test/queries/clientpositive/cbo_rp_join.q
+++ ql/src/test/queries/clientpositive/cbo_rp_join.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_rp_join0.q ql/src/test/queries/clientpositive/cbo_rp_join0.q
index 6543fd821c..35e042be3d 100644
--- ql/src/test/queries/clientpositive/cbo_rp_join0.q
+++ ql/src/test/queries/clientpositive/cbo_rp_join0.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_limit.q ql/src/test/queries/clientpositive/cbo_rp_limit.q
index 5e54a1ba72..24c1eae228 100644
--- ql/src/test/queries/clientpositive/cbo_rp_limit.q
+++ ql/src/test/queries/clientpositive/cbo_rp_limit.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_rp_lineage2.q ql/src/test/queries/clientpositive/cbo_rp_lineage2.q
index 2de243458e..47c816803f 100644
--- ql/src/test/queries/clientpositive/cbo_rp_lineage2.q
+++ ql/src/test/queries/clientpositive/cbo_rp_lineage2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.returnpath.hiveop=true;
 set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.LineageLogger;
diff --git ql/src/test/queries/clientpositive/cbo_rp_outer_join_ppr.q ql/src/test/queries/clientpositive/cbo_rp_outer_join_ppr.q
index d8f726e962..30e97cc5e7 100644
--- ql/src/test/queries/clientpositive/cbo_rp_outer_join_ppr.q
+++ ql/src/test/queries/clientpositive/cbo_rp_outer_join_ppr.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_semijoin.q ql/src/test/queries/clientpositive/cbo_rp_semijoin.q
index 57db49073f..ebd76ce9bc 100644
--- ql/src/test/queries/clientpositive/cbo_rp_semijoin.q
+++ ql/src/test/queries/clientpositive/cbo_rp_semijoin.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_rp_simple_select.q ql/src/test/queries/clientpositive/cbo_rp_simple_select.q
index deb0f8fc9e..3f2650bd49 100644
--- ql/src/test/queries/clientpositive/cbo_rp_simple_select.q
+++ ql/src/test/queries/clientpositive/cbo_rp_simple_select.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_stats.q ql/src/test/queries/clientpositive/cbo_rp_stats.q
index 7674a99406..cfa917fc4a 100644
--- ql/src/test/queries/clientpositive/cbo_rp_stats.q
+++ ql/src/test/queries/clientpositive/cbo_rp_stats.q
@@ -1,3 +1,5 @@
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_subq_exists.q ql/src/test/queries/clientpositive/cbo_rp_subq_exists.q
index 151ebe0b3f..692bb41a8b 100644
--- ql/src/test/queries/clientpositive/cbo_rp_subq_exists.q
+++ ql/src/test/queries/clientpositive/cbo_rp_subq_exists.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_cbo
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_rp_subq_in.q ql/src/test/queries/clientpositive/cbo_rp_subq_in.q
index 612b3926d7..67b1150270 100644
--- ql/src/test/queries/clientpositive/cbo_rp_subq_in.q
+++ ql/src/test/queries/clientpositive/cbo_rp_subq_in.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src_cbo
+--! qt:dataset:part
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_subq_not_in.q ql/src/test/queries/clientpositive/cbo_rp_subq_not_in.q
index 93de2c97dd..fee5274714 100644
--- ql/src/test/queries/clientpositive/cbo_rp_subq_not_in.q
+++ ql/src/test/queries/clientpositive/cbo_rp_subq_not_in.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src_cbo
+--! qt:dataset:part
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_udf_percentile.q ql/src/test/queries/clientpositive/cbo_rp_udf_percentile.q
index 125bf0a667..63568f738f 100644
--- ql/src/test/queries/clientpositive/cbo_rp_udf_percentile.q
+++ ql/src/test/queries/clientpositive/cbo_rp_udf_percentile.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.returnpath.hiveop=true;
 
 DESCRIBE FUNCTION percentile;
diff --git ql/src/test/queries/clientpositive/cbo_rp_udf_percentile2.q ql/src/test/queries/clientpositive/cbo_rp_udf_percentile2.q
index 6dd76a20f4..32c5b1e32b 100644
--- ql/src/test/queries/clientpositive/cbo_rp_udf_percentile2.q
+++ ql/src/test/queries/clientpositive/cbo_rp_udf_percentile2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.returnpath.hiveop=true;
 
 DESCRIBE FUNCTION percentile;
diff --git ql/src/test/queries/clientpositive/cbo_rp_udf_udaf.q ql/src/test/queries/clientpositive/cbo_rp_udf_udaf.q
index c2aa54e5ce..0f1d4494c6 100644
--- ql/src/test/queries/clientpositive/cbo_rp_udf_udaf.q
+++ ql/src/test/queries/clientpositive/cbo_rp_udf_udaf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_udf_udaf_stats_opt.q ql/src/test/queries/clientpositive/cbo_rp_udf_udaf_stats_opt.q
index 8d3aac8a44..feedcba442 100644
--- ql/src/test/queries/clientpositive/cbo_rp_udf_udaf_stats_opt.q
+++ ql/src/test/queries/clientpositive/cbo_rp_udf_udaf_stats_opt.q
@@ -1,3 +1,4 @@
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_union.q ql/src/test/queries/clientpositive/cbo_rp_union.q
index cf2cf40210..df296586c6 100644
--- ql/src/test/queries/clientpositive/cbo_rp_union.q
+++ ql/src/test/queries/clientpositive/cbo_rp_union.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_unionDistinct_2.q ql/src/test/queries/clientpositive/cbo_rp_unionDistinct_2.q
index 6df4e07d16..8f132f27d4 100644
--- ql/src/test/queries/clientpositive/cbo_rp_unionDistinct_2.q
+++ ql/src/test/queries/clientpositive/cbo_rp_unionDistinct_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.returnpath.hiveop=true;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/cbo_rp_views.q ql/src/test/queries/clientpositive/cbo_rp_views.q
index 5f7f3e038d..d1f2bcb46d 100644
--- ql/src/test/queries/clientpositive/cbo_rp_views.q
+++ ql/src/test/queries/clientpositive/cbo_rp_views.q
@@ -1,3 +1,5 @@
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.exec.check.crossproducts=false;
 
diff --git ql/src/test/queries/clientpositive/cbo_rp_windowing.q ql/src/test/queries/clientpositive/cbo_rp_windowing.q
index edd19c96d6..23caf15d2c 100644
--- ql/src/test/queries/clientpositive/cbo_rp_windowing.q
+++ ql/src/test/queries/clientpositive/cbo_rp_windowing.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_rp_windowing_2.q ql/src/test/queries/clientpositive/cbo_rp_windowing_2.q
index 6362be3903..39787662a6 100644
--- ql/src/test/queries/clientpositive/cbo_rp_windowing_2.q
+++ ql/src/test/queries/clientpositive/cbo_rp_windowing_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.cbo.returnpath.hiveop=true;
diff --git ql/src/test/queries/clientpositive/cbo_semijoin.q ql/src/test/queries/clientpositive/cbo_semijoin.q
index 57db49073f..ebd76ce9bc 100644
--- ql/src/test/queries/clientpositive/cbo_semijoin.q
+++ ql/src/test/queries/clientpositive/cbo_semijoin.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_simple_select.q ql/src/test/queries/clientpositive/cbo_simple_select.q
index 2d95233077..59f093ec24 100644
--- ql/src/test/queries/clientpositive/cbo_simple_select.q
+++ ql/src/test/queries/clientpositive/cbo_simple_select.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_stats.q ql/src/test/queries/clientpositive/cbo_stats.q
index fdc91196d7..dfd6b5c571 100644
--- ql/src/test/queries/clientpositive/cbo_stats.q
+++ ql/src/test/queries/clientpositive/cbo_stats.q
@@ -1,3 +1,5 @@
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_subq_exists.q ql/src/test/queries/clientpositive/cbo_subq_exists.q
index 66f89ab0de..bc71840236 100644
--- ql/src/test/queries/clientpositive/cbo_subq_exists.q
+++ ql/src/test/queries/clientpositive/cbo_subq_exists.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_cbo
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
 
diff --git ql/src/test/queries/clientpositive/cbo_subq_in.q ql/src/test/queries/clientpositive/cbo_subq_in.q
index 4cbee198cf..0245771938 100644
--- ql/src/test/queries/clientpositive/cbo_subq_in.q
+++ ql/src/test/queries/clientpositive/cbo_subq_in.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src_cbo
+--! qt:dataset:part
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_subq_not_in.q ql/src/test/queries/clientpositive/cbo_subq_not_in.q
index e8e3dc2a77..b3dd65316d 100644
--- ql/src/test/queries/clientpositive/cbo_subq_not_in.q
+++ ql/src/test/queries/clientpositive/cbo_subq_not_in.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src_cbo
+--! qt:dataset:part
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_udf_max.q ql/src/test/queries/clientpositive/cbo_udf_max.q
index b5fdba7b71..2c2f8647b8 100644
--- ql/src/test/queries/clientpositive/cbo_udf_max.q
+++ ql/src/test/queries/clientpositive/cbo_udf_max.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.returnpath.hiveop=true;
 
diff --git ql/src/test/queries/clientpositive/cbo_udf_udaf.q ql/src/test/queries/clientpositive/cbo_udf_udaf.q
index 8534cecd37..680726d52d 100644
--- ql/src/test/queries/clientpositive/cbo_udf_udaf.q
+++ ql/src/test/queries/clientpositive/cbo_udf_udaf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:cbo_t1
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
diff --git ql/src/test/queries/clientpositive/cbo_union.q ql/src/test/queries/clientpositive/cbo_union.q
index 42d28e161a..8ae556f2c7 100644
--- ql/src/test/queries/clientpositive/cbo_union.q
+++ ql/src/test/queries/clientpositive/cbo_union.q
@@ -1,3 +1,6 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_views.q ql/src/test/queries/clientpositive/cbo_views.q
index 8a563cffe9..650bad6ed3 100644
--- ql/src/test/queries/clientpositive/cbo_views.q
+++ ql/src/test/queries/clientpositive/cbo_views.q
@@ -1,3 +1,5 @@
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/cbo_windowing.q ql/src/test/queries/clientpositive/cbo_windowing.q
index 4fb0351209..c39f6848a2 100644
--- ql/src/test/queries/clientpositive/cbo_windowing.q
+++ ql/src/test/queries/clientpositive/cbo_windowing.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
diff --git ql/src/test/queries/clientpositive/char_1.q ql/src/test/queries/clientpositive/char_1.q
index 09987cb654..c4f7e6783d 100644
--- ql/src/test/queries/clientpositive/char_1.q
+++ ql/src/test/queries/clientpositive/char_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false;
 
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/char_2.q ql/src/test/queries/clientpositive/char_2.q
index 3e4900cb7c..e50aa1466f 100644
--- ql/src/test/queries/clientpositive/char_2.q
+++ ql/src/test/queries/clientpositive/char_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table char_2;
 
 create table char_2 (
diff --git ql/src/test/queries/clientpositive/char_cast.q ql/src/test/queries/clientpositive/char_cast.q
index 7f44d4d508..361fed37cd 100644
--- ql/src/test/queries/clientpositive/char_cast.q
+++ ql/src/test/queries/clientpositive/char_cast.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 -- Cast from char to other data types
 select
diff --git ql/src/test/queries/clientpositive/char_comparison.q ql/src/test/queries/clientpositive/char_comparison.q
index e1cfdb2bdb..82c9d6a6a5 100644
--- ql/src/test/queries/clientpositive/char_comparison.q
+++ ql/src/test/queries/clientpositive/char_comparison.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 -- Should all be true
 select
diff --git ql/src/test/queries/clientpositive/char_nested_types.q ql/src/test/queries/clientpositive/char_nested_types.q
index c710b6c731..28963a2023 100644
--- ql/src/test/queries/clientpositive/char_nested_types.q
+++ ql/src/test/queries/clientpositive/char_nested_types.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table char_nested_1;
 drop table char_nested_array;
 drop table char_nested_map;
diff --git ql/src/test/queries/clientpositive/char_udf1.q ql/src/test/queries/clientpositive/char_udf1.q
index fa3a261c4b..2044043615 100644
--- ql/src/test/queries/clientpositive/char_udf1.q
+++ ql/src/test/queries/clientpositive/char_udf1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table char_udf_1;
 
 create table char_udf_1 (c1 string, c2 string, c3 char(10), c4 char(20));
diff --git ql/src/test/queries/clientpositive/cluster.q ql/src/test/queries/clientpositive/cluster.q
index 2481970718..64485feaa1 100644
--- ql/src/test/queries/clientpositive/cluster.q
+++ ql/src/test/queries/clientpositive/cluster.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 SELECT * FROM SRC x where x.key = 10 CLUSTER BY x.key;
 SELECT * FROM SRC x where x.key = 10 CLUSTER BY x.key;
diff --git ql/src/test/queries/clientpositive/column_access_stats.q ql/src/test/queries/clientpositive/column_access_stats.q
index b981ee4247..8a7f4761ba 100644
--- ql/src/test/queries/clientpositive/column_access_stats.q
+++ ql/src/test/queries/clientpositive/column_access_stats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 SET hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.CheckColumnAccessHook;
 SET hive.stats.collect.scancols=true;
diff --git ql/src/test/queries/clientpositive/column_pruner_multiple_children.q ql/src/test/queries/clientpositive/column_pruner_multiple_children.q
index 9315239b9b..cb605a87f8 100644
--- ql/src/test/queries/clientpositive/column_pruner_multiple_children.q
+++ ql/src/test/queries/clientpositive/column_pruner_multiple_children.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 set hive.stats.column.autogather=true;
 
diff --git ql/src/test/queries/clientpositive/columnarserde_create_shortcut.q ql/src/test/queries/clientpositive/columnarserde_create_shortcut.q
index 851a8212c4..b55cc1da58 100644
--- ql/src/test/queries/clientpositive/columnarserde_create_shortcut.q
+++ ql/src/test/queries/clientpositive/columnarserde_create_shortcut.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src_thrift
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE columnarserde_create_shortcut(a array<int>, b array<string>, c map<string,string>, d int, e string) STORED AS RCFILE;
diff --git ql/src/test/queries/clientpositive/columnstats_part_coltype.q ql/src/test/queries/clientpositive/columnstats_part_coltype.q
index 472d227664..e6ea25a829 100644
--- ql/src/test/queries/clientpositive/columnstats_part_coltype.q
+++ ql/src/test/queries/clientpositive/columnstats_part_coltype.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 -- Test type date, int, and string in partition column
 drop table if exists partcolstats;
diff --git ql/src/test/queries/clientpositive/combine1.q ql/src/test/queries/clientpositive/combine1.q
index b300830884..8f05321784 100644
--- ql/src/test/queries/clientpositive/combine1.q
+++ ql/src/test/queries/clientpositive/combine1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.compress.output = true;
 set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 set mapred.min.split.size=256;
diff --git ql/src/test/queries/clientpositive/combine2.q ql/src/test/queries/clientpositive/combine2.q
index ba2b8f341c..313d03c866 100644
--- ql/src/test/queries/clientpositive/combine2.q
+++ ql/src/test/queries/clientpositive/combine2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 USE default;
 
diff --git ql/src/test/queries/clientpositive/combine2_hadoop20.q ql/src/test/queries/clientpositive/combine2_hadoop20.q
index 8095cf68a8..3f45ae5a32 100644
--- ql/src/test/queries/clientpositive/combine2_hadoop20.q
+++ ql/src/test/queries/clientpositive/combine2_hadoop20.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 USE default;
 
 set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
diff --git ql/src/test/queries/clientpositive/combine3.q ql/src/test/queries/clientpositive/combine3.q
index 9e5809b8a3..479108f7da 100644
--- ql/src/test/queries/clientpositive/combine3.q
+++ ql/src/test/queries/clientpositive/combine3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.compress.output = true;
 set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 set mapred.min.split.size=256;
diff --git ql/src/test/queries/clientpositive/comments.q ql/src/test/queries/clientpositive/comments.q
index b03cd3f8b3..b8d69d7fb9 100644
--- ql/src/test/queries/clientpositive/comments.q
+++ ql/src/test/queries/clientpositive/comments.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- COMMENT
 select key from src limit 1;
 
diff --git ql/src/test/queries/clientpositive/compile_processor.q ql/src/test/queries/clientpositive/compile_processor.q
index 6be02ec8a7..ed52c0267a 100644
--- ql/src/test/queries/clientpositive/compile_processor.q
+++ ql/src/test/queries/clientpositive/compile_processor.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 compile `import org.apache.hadoop.hive.ql.exec.UDF \;
 public class Pyth extends UDF {
diff --git ql/src/test/queries/clientpositive/complex_alias.q ql/src/test/queries/clientpositive/complex_alias.q
index d506a34e4c..7f0baa7897 100644
--- ql/src/test/queries/clientpositive/complex_alias.q
+++ ql/src/test/queries/clientpositive/complex_alias.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE agg1 (col0 INT, col1 STRING, col2 DOUBLE);
 
diff --git ql/src/test/queries/clientpositive/concat_op.q ql/src/test/queries/clientpositive/concat_op.q
index 3fa0ce4c45..9b0487be10 100644
--- ql/src/test/queries/clientpositive/concat_op.q
+++ ql/src/test/queries/clientpositive/concat_op.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain select key || value from src;
 
 select concat('a','b','c');
diff --git ql/src/test/queries/clientpositive/concatenate_inherit_table_location.q ql/src/test/queries/clientpositive/concatenate_inherit_table_location.q
index 1ae194338c..8deaf68713 100644
--- ql/src/test/queries/clientpositive/concatenate_inherit_table_location.q
+++ ql/src/test/queries/clientpositive/concatenate_inherit_table_location.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 CREATE TABLE citl_table (key STRING, value STRING) PARTITIONED BY (part STRING)
 STORED AS RCFILE
 LOCATION 'pfile:${system:test.tmp.dir}/citl_table';
diff --git ql/src/test/queries/clientpositive/confirm_initial_tbl_stats.q ql/src/test/queries/clientpositive/confirm_initial_tbl_stats.q
index 6b094f7ce5..aa9d62aa97 100644
--- ql/src/test/queries/clientpositive/confirm_initial_tbl_stats.q
+++ ql/src/test/queries/clientpositive/confirm_initial_tbl_stats.q
@@ -1,3 +1,11 @@
+--! qt:dataset:srcpart
+--! qt:dataset:srcbucket2
+--! qt:dataset:srcbucket
+--! qt:dataset:src_sequencefile
+--! qt:dataset:src_json
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 describe extended src;
 
 describe formatted src key;
diff --git ql/src/test/queries/clientpositive/constantPropagateForSubQuery.q ql/src/test/queries/clientpositive/constantPropagateForSubQuery.q
index cc6c46ae76..d7558d66cc 100644
--- ql/src/test/queries/clientpositive/constantPropagateForSubQuery.q
+++ ql/src/test/queries/clientpositive/constantPropagateForSubQuery.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/constant_prop.q ql/src/test/queries/clientpositive/constant_prop.q
index d51b80194e..e4ab8e7978 100644
--- ql/src/test/queries/clientpositive/constant_prop.q
+++ ql/src/test/queries/clientpositive/constant_prop.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/constant_prop_1.q ql/src/test/queries/clientpositive/constant_prop_1.q
index cfe0c30068..3d3016fdf0 100644
--- ql/src/test/queries/clientpositive/constant_prop_1.q
+++ ql/src/test/queries/clientpositive/constant_prop_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.mapred.mode=nonstrict;
 
diff --git ql/src/test/queries/clientpositive/constant_prop_2.q ql/src/test/queries/clientpositive/constant_prop_2.q
index 4bc14a6487..ab4c042def 100644
--- ql/src/test/queries/clientpositive/constant_prop_2.q
+++ ql/src/test/queries/clientpositive/constant_prop_2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.compute.query.using.stats=true;
 set hive.stats.autogather=true;
diff --git ql/src/test/queries/clientpositive/constantfolding.q ql/src/test/queries/clientpositive/constantfolding.q
index 4ddb710364..210d35ebea 100644
--- ql/src/test/queries/clientpositive/constantfolding.q
+++ ql/src/test/queries/clientpositive/constantfolding.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 
diff --git ql/src/test/queries/clientpositive/constprog1.q ql/src/test/queries/clientpositive/constprog1.q
index b8adccc441..aa5a251e90 100644
--- ql/src/test/queries/clientpositive/constprog1.q
+++ ql/src/test/queries/clientpositive/constprog1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 set hive.optimize.constant.propagation=true;
 
diff --git ql/src/test/queries/clientpositive/constprog2.q ql/src/test/queries/clientpositive/constprog2.q
index dbebd347eb..20db22f06b 100644
--- ql/src/test/queries/clientpositive/constprog2.q
+++ ql/src/test/queries/clientpositive/constprog2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcbucket
+--! qt:dataset:src1
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=more;
 set hive.optimize.constant.propagation=true;
diff --git ql/src/test/queries/clientpositive/constprog_dp.q ql/src/test/queries/clientpositive/constprog_dp.q
index 7dad040993..d7fcb5e4b1 100644
--- ql/src/test/queries/clientpositive/constprog_dp.q
+++ ql/src/test/queries/clientpositive/constprog_dp.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.optimize.constant.propagation=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
 
diff --git ql/src/test/queries/clientpositive/constprog_partitioner.q ql/src/test/queries/clientpositive/constprog_partitioner.q
index ba55031035..8b384e9eda 100644
--- ql/src/test/queries/clientpositive/constprog_partitioner.q
+++ ql/src/test/queries/clientpositive/constprog_partitioner.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcbucket
+--! qt:dataset:src1
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=more;
 set hive.optimize.constant.propagation=true;
diff --git ql/src/test/queries/clientpositive/constprog_type.q ql/src/test/queries/clientpositive/constprog_type.q
index 5683a48b77..05e091abb4 100644
--- ql/src/test/queries/clientpositive/constprog_type.q
+++ ql/src/test/queries/clientpositive/constprog_type.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.constant.propagation=true;
 
 CREATE TABLE dest1(d date, t timestamp);
diff --git ql/src/test/queries/clientpositive/constprog_when_case.q ql/src/test/queries/clientpositive/constprog_when_case.q
index b2a10f3114..37d0a564ec 100644
--- ql/src/test/queries/clientpositive/constprog_when_case.q
+++ ql/src/test/queries/clientpositive/constprog_when_case.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=none;
 set hive.explain.user=false;
 set hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/correlationoptimizer1.q ql/src/test/queries/clientpositive/correlationoptimizer1.q
index d16904e96a..1c4f82aedf 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer1.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.auto.convert.join=false;
diff --git ql/src/test/queries/clientpositive/correlationoptimizer10.q ql/src/test/queries/clientpositive/correlationoptimizer10.q
index b8fb9a75d2..4f703e0269 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer10.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer10.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=false;
 set hive.optimize.correlation=false;
diff --git ql/src/test/queries/clientpositive/correlationoptimizer11.q ql/src/test/queries/clientpositive/correlationoptimizer11.q
index 4cf53f7f31..8c99141e5b 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer11.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer11.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=false;
 -- Tests in this file are used to make sure Correlation Optimizer
diff --git ql/src/test/queries/clientpositive/correlationoptimizer12.q ql/src/test/queries/clientpositive/correlationoptimizer12.q
index 409cdb4c5b..12b9c3a547 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer12.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer12.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.auto.convert.join=false;
 set hive.optimize.correlation=true;
 -- Currently, correlation optimizer does not support PTF operator
diff --git ql/src/test/queries/clientpositive/correlationoptimizer13.q ql/src/test/queries/clientpositive/correlationoptimizer13.q
index 495ff587b2..bb780f7110 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer13.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer13.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE tmp(c1 INT, c2 INT, c3 STRING, c4 STRING);
 INSERT OVERWRITE TABLE tmp
diff --git ql/src/test/queries/clientpositive/correlationoptimizer14.q ql/src/test/queries/clientpositive/correlationoptimizer14.q
index 7f191d2d8b..01416a3df6 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer14.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer14.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.reducededuplication=true;
 set hive.optimize.reducededuplication.min.reducer=1;
diff --git ql/src/test/queries/clientpositive/correlationoptimizer15.q ql/src/test/queries/clientpositive/correlationoptimizer15.q
index a06aca22e5..f7ce14aeff 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer15.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer15.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=false;
 set hive.optimize.correlation=false;
diff --git ql/src/test/queries/clientpositive/correlationoptimizer2.q ql/src/test/queries/clientpositive/correlationoptimizer2.q
index eeccd245a6..66560841b4 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer2.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=false;
 set hive.optimize.correlation=false;
diff --git ql/src/test/queries/clientpositive/correlationoptimizer3.q ql/src/test/queries/clientpositive/correlationoptimizer3.q
index 94c1bfa8df..e19ff8b2a4 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer3.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=false;
 set hive.optimize.correlation=false;
diff --git ql/src/test/queries/clientpositive/correlationoptimizer6.q ql/src/test/queries/clientpositive/correlationoptimizer6.q
index 3cc679a848..f9c948bf8c 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer6.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer6.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=false;
 set hive.optimize.correlation=false;
diff --git ql/src/test/queries/clientpositive/correlationoptimizer7.q ql/src/test/queries/clientpositive/correlationoptimizer7.q
index 79b3b318ef..0d57d7e7cb 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer7.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer7.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=true;
 set hive.optimize.correlation=false;
diff --git ql/src/test/queries/clientpositive/correlationoptimizer8.q ql/src/test/queries/clientpositive/correlationoptimizer8.q
index a52b4b93fb..14ac19241c 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer8.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer8.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=false;
 set hive.optimize.correlation=false;
diff --git ql/src/test/queries/clientpositive/correlationoptimizer9.q ql/src/test/queries/clientpositive/correlationoptimizer9.q
index 906f026264..38f9480737 100644
--- ql/src/test/queries/clientpositive/correlationoptimizer9.q
+++ ql/src/test/queries/clientpositive/correlationoptimizer9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/count_dist_rewrite.q ql/src/test/queries/clientpositive/count_dist_rewrite.q
index 4bb25cccdd..5617c580ef 100644
--- ql/src/test/queries/clientpositive/count_dist_rewrite.q
+++ ql/src/test/queries/clientpositive/count_dist_rewrite.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.metadataonly=true;
 
 explain select count(distinct key) from src; 
diff --git ql/src/test/queries/clientpositive/cp_mj_rc.q ql/src/test/queries/clientpositive/cp_mj_rc.q
index 62d38e3caa..3fd821784a 100644
--- ql/src/test/queries/clientpositive/cp_mj_rc.q
+++ ql/src/test/queries/clientpositive/cp_mj_rc.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table src_six_columns (k1 string, v1 string, k2 string, v2 string, k3 string, v3 string) stored as rcfile;
 insert overwrite table src_six_columns select value, value, key, value, value, value from src;
 create table src_two_columns (k1 string, v1 string) stored as rcfile;
diff --git ql/src/test/queries/clientpositive/cp_sel.q ql/src/test/queries/clientpositive/cp_sel.q
index 59f5a2ddaf..0a9949b55e 100644
--- ql/src/test/queries/clientpositive/cp_sel.q
+++ ql/src/test/queries/clientpositive/cp_sel.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 explain
 select key,value,'hello' as ds, 'world' as hr from srcpart where hr=11 order by 1 limit 1;
diff --git ql/src/test/queries/clientpositive/create_big_view.q ql/src/test/queries/clientpositive/create_big_view.q
index 49caacc3e2..b3b5041629 100644
--- ql/src/test/queries/clientpositive/create_big_view.q
+++ ql/src/test/queries/clientpositive/create_big_view.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW big_view;
 
 -- Define a view with long SQL text to test metastore and other limits.
diff --git ql/src/test/queries/clientpositive/create_escape.q ql/src/test/queries/clientpositive/create_escape.q
index 49f7c5fe60..d30b0dab80 100644
--- ql/src/test/queries/clientpositive/create_escape.q
+++ ql/src/test/queries/clientpositive/create_escape.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE table1 (a STRING, b STRING)
 ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' ESCAPED BY '\\'
 STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/create_func1.q ql/src/test/queries/clientpositive/create_func1.q
index 6f5f7f25cf..eef07f64e5 100644
--- ql/src/test/queries/clientpositive/create_func1.q
+++ ql/src/test/queries/clientpositive/create_func1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 -- qtest_get_java_boolean should already be created during test initialization
 select qtest_get_java_boolean('true'), qtest_get_java_boolean('false') from src limit 1;
diff --git ql/src/test/queries/clientpositive/create_genericudaf.q ql/src/test/queries/clientpositive/create_genericudaf.q
index a59a2ada78..18cafb15b0 100644
--- ql/src/test/queries/clientpositive/create_genericudaf.q
+++ ql/src/test/queries/clientpositive/create_genericudaf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 EXPLAIN
 CREATE TEMPORARY FUNCTION test_avg AS 'org.apache.hadoop.hive.ql.udf.generic.GenericUDAFAverage';
diff --git ql/src/test/queries/clientpositive/create_genericudf.q ql/src/test/queries/clientpositive/create_genericudf.q
index 1d43f30e8e..ad67027f2f 100644
--- ql/src/test/queries/clientpositive/create_genericudf.q
+++ ql/src/test/queries/clientpositive/create_genericudf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 CREATE TEMPORARY FUNCTION test_translate AS 'org.apache.hadoop.hive.ql.udf.generic.GenericUDFTestTranslate';
 
diff --git ql/src/test/queries/clientpositive/create_insert_outputformat.q ql/src/test/queries/clientpositive/create_insert_outputformat.q
index f18d68866a..c56de07d49 100644
--- ql/src/test/queries/clientpositive/create_insert_outputformat.q
+++ ql/src/test/queries/clientpositive/create_insert_outputformat.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 CREATE TABLE table_test_output_format(key INT, value STRING) STORED AS
diff --git ql/src/test/queries/clientpositive/create_like.q ql/src/test/queries/clientpositive/create_like.q
index 81172f3f86..b3626274c3 100644
--- ql/src/test/queries/clientpositive/create_like.q
+++ ql/src/test/queries/clientpositive/create_like.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 
diff --git ql/src/test/queries/clientpositive/create_like_tbl_props.q ql/src/test/queries/clientpositive/create_like_tbl_props.q
index 8f951d1dda..7e1e115459 100644
--- ql/src/test/queries/clientpositive/create_like_tbl_props.q
+++ ql/src/test/queries/clientpositive/create_like_tbl_props.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Test that CREATE TABLE LIKE commands can take explicit table properties
 
 CREATE TABLE test_table LIKE src TBLPROPERTIES('key'='value');
diff --git ql/src/test/queries/clientpositive/create_like_view.q ql/src/test/queries/clientpositive/create_like_view.q
index 1ee4439afb..874389ff8d 100644
--- ql/src/test/queries/clientpositive/create_like_view.q
+++ ql/src/test/queries/clientpositive/create_like_view.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 DROP TABLE IF EXISTS table1;
diff --git ql/src/test/queries/clientpositive/create_or_replace_view.q ql/src/test/queries/clientpositive/create_or_replace_view.q
index 0148224d08..d00e5f7993 100644
--- ql/src/test/queries/clientpositive/create_or_replace_view.q
+++ ql/src/test/queries/clientpositive/create_or_replace_view.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 create database vt;
 
 create view vt.v as select * from srcpart;
diff --git ql/src/test/queries/clientpositive/create_table_like_stats.q ql/src/test/queries/clientpositive/create_table_like_stats.q
index 1fc77777ca..a59c0a6e22 100644
--- ql/src/test/queries/clientpositive/create_table_like_stats.q
+++ ql/src/test/queries/clientpositive/create_table_like_stats.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 dfs ${system:test.dfs.mkdir} ${system:test.tmp.dir}/t;
diff --git ql/src/test/queries/clientpositive/create_udaf.q ql/src/test/queries/clientpositive/create_udaf.q
index a6bd7a0846..ee310aa074 100644
--- ql/src/test/queries/clientpositive/create_udaf.q
+++ ql/src/test/queries/clientpositive/create_udaf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 CREATE TEMPORARY FUNCTION test_max AS 'org.apache.hadoop.hive.ql.udf.UDAFTestMax';
 
diff --git ql/src/test/queries/clientpositive/create_view.q ql/src/test/queries/clientpositive/create_view.q
index e1761cf9c8..b04b5d8697 100644
--- ql/src/test/queries/clientpositive/create_view.q
+++ ql/src/test/queries/clientpositive/create_view.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcbucket
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 DROP VIEW view1;
 DROP VIEW view2;
diff --git ql/src/test/queries/clientpositive/create_view_defaultformats.q ql/src/test/queries/clientpositive/create_view_defaultformats.q
index 66fa141a45..ad6ca7ba18 100644
--- ql/src/test/queries/clientpositive/create_view_defaultformats.q
+++ ql/src/test/queries/clientpositive/create_view_defaultformats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop view if exists sfsrc;
 drop view if exists rcsrc;
 set hive.default.fileformat=SequenceFile;
diff --git ql/src/test/queries/clientpositive/create_view_partitioned.q ql/src/test/queries/clientpositive/create_view_partitioned.q
index 437498501c..5116b13bdc 100644
--- ql/src/test/queries/clientpositive/create_view_partitioned.q
+++ ql/src/test/queries/clientpositive/create_view_partitioned.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 DROP VIEW vp1;
 DROP VIEW vp2;
 DROP VIEW vp3;
diff --git ql/src/test/queries/clientpositive/create_view_translate.q ql/src/test/queries/clientpositive/create_view_translate.q
index 11ba9c8afc..f4704c7fa2 100644
--- ql/src/test/queries/clientpositive/create_view_translate.q
+++ ql/src/test/queries/clientpositive/create_view_translate.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop view if exists v;
 drop view if exists w;
 
diff --git ql/src/test/queries/clientpositive/cross_join.q ql/src/test/queries/clientpositive/cross_join.q
index d5f4a493ad..041f0c38a6 100644
--- ql/src/test/queries/clientpositive/cross_join.q
+++ ql/src/test/queries/clientpositive/cross_join.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- current
diff --git ql/src/test/queries/clientpositive/cross_join_merge.q ql/src/test/queries/clientpositive/cross_join_merge.q
index 0e492f7442..23435f62f0 100644
--- ql/src/test/queries/clientpositive/cross_join_merge.q
+++ ql/src/test/queries/clientpositive/cross_join_merge.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 explain
diff --git ql/src/test/queries/clientpositive/cross_prod_1.q ql/src/test/queries/clientpositive/cross_prod_1.q
index b5a84ead00..82c80ae825 100644
--- ql/src/test/queries/clientpositive/cross_prod_1.q
+++ ql/src/test/queries/clientpositive/cross_prod_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.tez.cartesian-product.enabled=true;
diff --git ql/src/test/queries/clientpositive/cross_prod_3.q ql/src/test/queries/clientpositive/cross_prod_3.q
index a233f17aea..22761e88f3 100644
--- ql/src/test/queries/clientpositive/cross_prod_3.q
+++ ql/src/test/queries/clientpositive/cross_prod_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.tez.cartesian-product.enabled=true;
diff --git ql/src/test/queries/clientpositive/cross_prod_4.q ql/src/test/queries/clientpositive/cross_prod_4.q
index ea58e98860..64f9605661 100644
--- ql/src/test/queries/clientpositive/cross_prod_4.q
+++ ql/src/test/queries/clientpositive/cross_prod_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.auto.convert.join=true;
diff --git ql/src/test/queries/clientpositive/cross_product_check_1.q ql/src/test/queries/clientpositive/cross_product_check_1.q
index bbc72979ac..efcafd395a 100644
--- ql/src/test/queries/clientpositive/cross_product_check_1.q
+++ ql/src/test/queries/clientpositive/cross_product_check_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/cross_product_check_2.q ql/src/test/queries/clientpositive/cross_product_check_2.q
index 8acb0698f7..60ec9e1ca2 100644
--- ql/src/test/queries/clientpositive/cross_product_check_2.q
+++ ql/src/test/queries/clientpositive/cross_product_check_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/crtseltbl_serdeprops.q ql/src/test/queries/clientpositive/crtseltbl_serdeprops.q
index 6e73bc2a25..162dd4a760 100644
--- ql/src/test/queries/clientpositive/crtseltbl_serdeprops.q
+++ ql/src/test/queries/clientpositive/crtseltbl_serdeprops.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 dfs ${system:test.dfs.mkdir} ${system:test.tmp.dir}/tmpsepatest;
 CREATE TABLE separator_test 
 ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'
diff --git ql/src/test/queries/clientpositive/ctas.q ql/src/test/queries/clientpositive/ctas.q
index 57a4729ffd..dbed47512a 100644
--- ql/src/test/queries/clientpositive/ctas.q
+++ ql/src/test/queries/clientpositive/ctas.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS( 0.20S)
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/ctas_char.q ql/src/test/queries/clientpositive/ctas_char.q
index ecfe74afd0..9d79dc8676 100644
--- ql/src/test/queries/clientpositive/ctas_char.q
+++ ql/src/test/queries/clientpositive/ctas_char.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table ctas_char_1;
 drop table ctas_char_2;
 drop view ctas_char_3;
diff --git ql/src/test/queries/clientpositive/ctas_colname.q ql/src/test/queries/clientpositive/ctas_colname.q
index b5568fbbcc..5470ecee79 100644
--- ql/src/test/queries/clientpositive/ctas_colname.q
+++ ql/src/test/queries/clientpositive/ctas_colname.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/ctas_date.q ql/src/test/queries/clientpositive/ctas_date.q
index 03af69fd3b..2f0e9c0430 100644
--- ql/src/test/queries/clientpositive/ctas_date.q
+++ ql/src/test/queries/clientpositive/ctas_date.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table ctas_date_1;
 drop table ctas_date_2;
 drop view ctas_date_3;
diff --git ql/src/test/queries/clientpositive/ctas_uses_database_location.q ql/src/test/queries/clientpositive/ctas_uses_database_location.q
index 86c940a25b..1c21981768 100644
--- ql/src/test/queries/clientpositive/ctas_uses_database_location.q
+++ ql/src/test/queries/clientpositive/ctas_uses_database_location.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.metastore.warehouse.dir=invalid_scheme://${system:test.tmp.dir};
 
 -- Tests that CTAS queries in non-default databases use the location of the database
diff --git ql/src/test/queries/clientpositive/ctas_uses_table_location.q ql/src/test/queries/clientpositive/ctas_uses_table_location.q
index b11e3bdec3..560ea854ea 100644
--- ql/src/test/queries/clientpositive/ctas_uses_table_location.q
+++ ql/src/test/queries/clientpositive/ctas_uses_table_location.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 CREATE TABLE ctas_table_with_loc LOCATION '${hiveconf:hive.metastore.warehouse.dir}/default/ctas_table_with_loc' AS SELECT * FROM default.src;
diff --git ql/src/test/queries/clientpositive/ctas_varchar.q ql/src/test/queries/clientpositive/ctas_varchar.q
index f646b36c8a..8046a763f3 100644
--- ql/src/test/queries/clientpositive/ctas_varchar.q
+++ ql/src/test/queries/clientpositive/ctas_varchar.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table ctas_varchar_1;
 drop table ctas_varchar_2;
 drop view ctas_varchar_3;
diff --git ql/src/test/queries/clientpositive/cteViews.q ql/src/test/queries/clientpositive/cteViews.q
index 4567b47248..d80357f03f 100644
--- ql/src/test/queries/clientpositive/cteViews.q
+++ ql/src/test/queries/clientpositive/cteViews.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 with src1 as (select key from src order by key limit 5)
 select * from src1;
 
diff --git ql/src/test/queries/clientpositive/cte_1.q ql/src/test/queries/clientpositive/cte_1.q
index 6d4e05d938..b97e18ea6f 100644
--- ql/src/test/queries/clientpositive/cte_1.q
+++ ql/src/test/queries/clientpositive/cte_1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 explain
 with q1 as ( select key from src where key = '5')
 select *
diff --git ql/src/test/queries/clientpositive/cte_2.q ql/src/test/queries/clientpositive/cte_2.q
index d2261162c4..899a0808bd 100644
--- ql/src/test/queries/clientpositive/cte_2.q
+++ ql/src/test/queries/clientpositive/cte_2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 
 -- union test
 with q1 as (select * from src where key= '5'),
diff --git ql/src/test/queries/clientpositive/cte_3.q ql/src/test/queries/clientpositive/cte_3.q
index 037c0cb8a1..dbb17cb3d4 100644
--- ql/src/test/queries/clientpositive/cte_3.q
+++ ql/src/test/queries/clientpositive/cte_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.cte.materialize.threshold=1;
 set hive.explain.user=true;
diff --git ql/src/test/queries/clientpositive/cte_4.q ql/src/test/queries/clientpositive/cte_4.q
index 0455a6a3c4..17db131671 100644
--- ql/src/test/queries/clientpositive/cte_4.q
+++ ql/src/test/queries/clientpositive/cte_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.cte.materialize.threshold=1;
 
diff --git ql/src/test/queries/clientpositive/cte_5.q ql/src/test/queries/clientpositive/cte_5.q
index 8f6ac15eac..6ab2fa6240 100644
--- ql/src/test/queries/clientpositive/cte_5.q
+++ ql/src/test/queries/clientpositive/cte_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.cte.materialize.threshold=-1;
 set hive.explain.user=true;
@@ -10,7 +11,6 @@ insert into q1 values (5, 'A');
 use default;
 
 show tables in mydb;
-show tables;
 
 explain
 with q1 as (select * from src where key= '5')
diff --git ql/src/test/queries/clientpositive/cte_6.q ql/src/test/queries/clientpositive/cte_6.q
index 964d1b8034..471f3b9bef 100644
--- ql/src/test/queries/clientpositive/cte_6.q
+++ ql/src/test/queries/clientpositive/cte_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain
 with Q1 as ( select key from sRc where key = '5')
 select CPS.key from Q1 CPS;
diff --git ql/src/test/queries/clientpositive/cte_mat_1.q ql/src/test/queries/clientpositive/cte_mat_1.q
index 1131a4be87..2442108726 100644
--- ql/src/test/queries/clientpositive/cte_mat_1.q
+++ ql/src/test/queries/clientpositive/cte_mat_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.cte.materialize.threshold=-1;
 set hive.explain.user=true;
diff --git ql/src/test/queries/clientpositive/cte_mat_2.q ql/src/test/queries/clientpositive/cte_mat_2.q
index 283aa405eb..bfef11b9d6 100644
--- ql/src/test/queries/clientpositive/cte_mat_2.q
+++ ql/src/test/queries/clientpositive/cte_mat_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.cte.materialize.threshold=3;
 set hive.explain.user=true;
diff --git ql/src/test/queries/clientpositive/cte_mat_3.q ql/src/test/queries/clientpositive/cte_mat_3.q
index a6c3a86dd8..41d8edf236 100644
--- ql/src/test/queries/clientpositive/cte_mat_3.q
+++ ql/src/test/queries/clientpositive/cte_mat_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.cte.materialize.threshold=2;
 set hive.explain.user=true;
diff --git ql/src/test/queries/clientpositive/cte_mat_4.q ql/src/test/queries/clientpositive/cte_mat_4.q
index c52d9a2ae4..5b8b8b8162 100644
--- ql/src/test/queries/clientpositive/cte_mat_4.q
+++ ql/src/test/queries/clientpositive/cte_mat_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.cte.materialize.threshold=2;
 set hive.explain.user=true;
@@ -5,7 +6,7 @@ set hive.explain.user=true;
 create temporary table q1 (a int, b string);
 insert into q1 values (1, 'A');
 
-show tables;
+show tables like "q1";
 
 explain
 with q1 as (select * from src where key= '5')
@@ -18,13 +19,13 @@ select a.key
 from q1 a join q1 b
 on a.key=b.key;
 
-show tables;
+show tables like "q1";
 
 select * from q1;
 
 drop table q1;
 
-show tables;
+show tables like "q1";
 
 explain
 with q1 as (select * from src where key= '5')
@@ -37,4 +38,4 @@ select a.key
 from q1 a join q1 b
 on a.key=b.key;
 
-show tables;
+show tables like "q1";
diff --git ql/src/test/queries/clientpositive/cte_mat_5.q ql/src/test/queries/clientpositive/cte_mat_5.q
index 83d1eab241..1d2f79dff5 100644
--- ql/src/test/queries/clientpositive/cte_mat_5.q
+++ ql/src/test/queries/clientpositive/cte_mat_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.cte.materialize.threshold=1;
 set hive.explain.user=true;
@@ -10,7 +11,6 @@ insert into q1 values (5, 'A');
 use default;
 
 show tables in mydb;
-show tables;
 
 explain
 with q1 as (select * from src where key= '5')
diff --git ql/src/test/queries/clientpositive/current_date_timestamp.q ql/src/test/queries/clientpositive/current_date_timestamp.q
index a1157ce65e..8715b97c24 100644
--- ql/src/test/queries/clientpositive/current_date_timestamp.q
+++ ql/src/test/queries/clientpositive/current_date_timestamp.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 select current_timestamp = current_timestamp(), current_date = current_date() from src limit 5;
 
 set hive.test.currenttimestamp =2012-01-01 01:02:03;
diff --git ql/src/test/queries/clientpositive/custom_input_output_format.q ql/src/test/queries/clientpositive/custom_input_output_format.q
index 949303a576..95621246ee 100644
--- ql/src/test/queries/clientpositive/custom_input_output_format.q
+++ ql/src/test/queries/clientpositive/custom_input_output_format.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE src1_rot13_iof(key STRING, value STRING)
diff --git ql/src/test/queries/clientpositive/database.q ql/src/test/queries/clientpositive/database.q
index 322dce526a..77d211a8fc 100644
--- ql/src/test/queries/clientpositive/database.q
+++ ql/src/test/queries/clientpositive/database.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency = true;
 
diff --git ql/src/test/queries/clientpositive/database_drop.q ql/src/test/queries/clientpositive/database_drop.q
index 1a892e760e..cf33ea9eaa 100644
--- ql/src/test/queries/clientpositive/database_drop.q
+++ ql/src/test/queries/clientpositive/database_drop.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- create database with multiple tables, views.
 -- Use both partitioned and non-partitioned tables, as well as
 -- tables with specific storage locations
diff --git ql/src/test/queries/clientpositive/date_1.q ql/src/test/queries/clientpositive/date_1.q
index 7d89ac9268..c77746070d 100644
--- ql/src/test/queries/clientpositive/date_1.q
+++ ql/src/test/queries/clientpositive/date_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 drop table date_1;
diff --git ql/src/test/queries/clientpositive/date_3.q ql/src/test/queries/clientpositive/date_3.q
index 383fb4e990..b33d8dc470 100644
--- ql/src/test/queries/clientpositive/date_3.q
+++ ql/src/test/queries/clientpositive/date_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table date_3;
 
 create table date_3 (
diff --git ql/src/test/queries/clientpositive/date_4.q ql/src/test/queries/clientpositive/date_4.q
index c840089f2e..6a9b44de8a 100644
--- ql/src/test/queries/clientpositive/date_4.q
+++ ql/src/test/queries/clientpositive/date_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 drop table date_4;
diff --git ql/src/test/queries/clientpositive/date_comparison.q ql/src/test/queries/clientpositive/date_comparison.q
index 86c7362e29..d6cd83e794 100644
--- ql/src/test/queries/clientpositive/date_comparison.q
+++ ql/src/test/queries/clientpositive/date_comparison.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- Comparisons against same value
diff --git ql/src/test/queries/clientpositive/date_timestamp_prec.q ql/src/test/queries/clientpositive/date_timestamp_prec.q
index b25b13b2cc..c7c8e0be5e 100644
--- ql/src/test/queries/clientpositive/date_timestamp_prec.q
+++ ql/src/test/queries/clientpositive/date_timestamp_prec.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table mytable (i integer, d date);
 
 insert overwrite table mytable 
diff --git ql/src/test/queries/clientpositive/date_udf.q ql/src/test/queries/clientpositive/date_udf.q
index 3b8226554f..cddfc1abb4 100644
--- ql/src/test/queries/clientpositive/date_udf.q
+++ ql/src/test/queries/clientpositive/date_udf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table date_udf;
 drop table date_udf_string;
 drop table date_udf_flight;
diff --git ql/src/test/queries/clientpositive/decimal_1.q ql/src/test/queries/clientpositive/decimal_1.q
index f52b1923eb..bed8868c5a 100644
--- ql/src/test/queries/clientpositive/decimal_1.q
+++ ql/src/test/queries/clientpositive/decimal_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 drop table if exists decimal_1;
diff --git ql/src/test/queries/clientpositive/decimal_2.q ql/src/test/queries/clientpositive/decimal_2.q
index 2c4d919079..164dffd2dc 100644
--- ql/src/test/queries/clientpositive/decimal_2.q
+++ ql/src/test/queries/clientpositive/decimal_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 drop table decimal_2;
diff --git ql/src/test/queries/clientpositive/decimal_skewjoin.q ql/src/test/queries/clientpositive/decimal_skewjoin.q
index 11c665a6c5..e7089ef096 100644
--- ql/src/test/queries/clientpositive/decimal_skewjoin.q
+++ ql/src/test/queries/clientpositive/decimal_skewjoin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.skewjoin=true;
 set hive.auto.convert.join=false;
 
diff --git ql/src/test/queries/clientpositive/decimal_stats.q ql/src/test/queries/clientpositive/decimal_stats.q
index e00cf1f1ff..ab87ad65bc 100644
--- ql/src/test/queries/clientpositive/decimal_stats.q
+++ ql/src/test/queries/clientpositive/decimal_stats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.fetch.column.stats=true;
 drop table if exists decimal_1;
 
diff --git ql/src/test/queries/clientpositive/delete_all_non_partitioned.q ql/src/test/queries/clientpositive/delete_all_non_partitioned.q
index 0638537216..91bdd4b901 100644
--- ql/src/test/queries/clientpositive/delete_all_non_partitioned.q
+++ ql/src/test/queries/clientpositive/delete_all_non_partitioned.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/delete_all_partitioned.q ql/src/test/queries/clientpositive/delete_all_partitioned.q
index 3c41ed5c84..001e30e0df 100644
--- ql/src/test/queries/clientpositive/delete_all_partitioned.q
+++ ql/src/test/queries/clientpositive/delete_all_partitioned.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/delete_orig_table.q ql/src/test/queries/clientpositive/delete_orig_table.q
index 81c7cba35b..f16de0e1dc 100644
--- ql/src/test/queries/clientpositive/delete_orig_table.q
+++ ql/src/test/queries/clientpositive/delete_orig_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/delete_tmp_table.q ql/src/test/queries/clientpositive/delete_tmp_table.q
index 49e586f7c0..1aea4aa778 100644
--- ql/src/test/queries/clientpositive/delete_tmp_table.q
+++ ql/src/test/queries/clientpositive/delete_tmp_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/delete_where_no_match.q ql/src/test/queries/clientpositive/delete_where_no_match.q
index e558619ee4..844c5863b4 100644
--- ql/src/test/queries/clientpositive/delete_where_no_match.q
+++ ql/src/test/queries/clientpositive/delete_where_no_match.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/delete_where_non_partitioned.q ql/src/test/queries/clientpositive/delete_where_non_partitioned.q
index 73137bf58d..cacde2125e 100644
--- ql/src/test/queries/clientpositive/delete_where_non_partitioned.q
+++ ql/src/test/queries/clientpositive/delete_where_non_partitioned.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/delete_where_partitioned.q ql/src/test/queries/clientpositive/delete_where_partitioned.q
index df09196d1f..5e1e54e668 100644
--- ql/src/test/queries/clientpositive/delete_where_partitioned.q
+++ ql/src/test/queries/clientpositive/delete_where_partitioned.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/delete_whole_partition.q ql/src/test/queries/clientpositive/delete_whole_partition.q
index 4433f61a26..335404cb73 100644
--- ql/src/test/queries/clientpositive/delete_whole_partition.q
+++ ql/src/test/queries/clientpositive/delete_whole_partition.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/describe_formatted_view_partitioned.q ql/src/test/queries/clientpositive/describe_formatted_view_partitioned.q
index 241ff11132..05322d575b 100644
--- ql/src/test/queries/clientpositive/describe_formatted_view_partitioned.q
+++ ql/src/test/queries/clientpositive/describe_formatted_view_partitioned.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP VIEW view_partitioned;
 
 CREATE VIEW view_partitioned
diff --git ql/src/test/queries/clientpositive/describe_formatted_view_partitioned_json.q ql/src/test/queries/clientpositive/describe_formatted_view_partitioned_json.q
index 150ff70641..97fc0cd2a1 100644
--- ql/src/test/queries/clientpositive/describe_formatted_view_partitioned_json.q
+++ ql/src/test/queries/clientpositive/describe_formatted_view_partitioned_json.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.ddl.output.format=json;
 
 DROP VIEW view_partitioned;
diff --git ql/src/test/queries/clientpositive/describe_syntax.q ql/src/test/queries/clientpositive/describe_syntax.q
index 9659e9abf7..3f9db316b2 100644
--- ql/src/test/queries/clientpositive/describe_syntax.q
+++ ql/src/test/queries/clientpositive/describe_syntax.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 
 CREATE DATABASE db1;
 CREATE TABLE db1.t1(key1 INT, value1 STRING) PARTITIONED BY (ds STRING, part STRING);
diff --git ql/src/test/queries/clientpositive/describe_table.q ql/src/test/queries/clientpositive/describe_table.q
index c0256926b6..4016236083 100644
--- ql/src/test/queries/clientpositive/describe_table.q
+++ ql/src/test/queries/clientpositive/describe_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 describe srcpart;
 describe srcpart key;
 describe srcpart PARTITION(ds='2008-04-08', hr='12');
diff --git ql/src/test/queries/clientpositive/describe_table_json.q ql/src/test/queries/clientpositive/describe_table_json.q
index f19e98d798..8aea7f283f 100644
--- ql/src/test/queries/clientpositive/describe_table_json.q
+++ ql/src/test/queries/clientpositive/describe_table_json.q
@@ -2,11 +2,9 @@ set hive.ddl.output.format=json;
 
 CREATE TABLE IF NOT EXISTS jsontable (key INT, value STRING) COMMENT 'json table' STORED AS TEXTFILE;
 
-SHOW TABLES;
+SHOW TABLES LIKE 'jsontab*';
 
-SHOW TABLES LIKE 'json*';
-
-SHOW TABLE EXTENDED LIKE 'json*';
+SHOW TABLE EXTENDED LIKE 'jsontab*';
 
 ALTER TABLE jsontable SET TBLPROPERTIES ('id' = 'jsontable');
 
diff --git ql/src/test/queries/clientpositive/describe_xpath.q ql/src/test/queries/clientpositive/describe_xpath.q
index b609f8554d..2280868a1a 100644
--- ql/src/test/queries/clientpositive/describe_xpath.q
+++ ql/src/test/queries/clientpositive/describe_xpath.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 -- Describe a list structure in a thrift table
 describe src_thrift lint;
 
diff --git ql/src/test/queries/clientpositive/disable_merge_for_bucketing.q ql/src/test/queries/clientpositive/disable_merge_for_bucketing.q
index 5bfcc1ba7b..4b1467344f 100644
--- ql/src/test/queries/clientpositive/disable_merge_for_bucketing.q
+++ ql/src/test/queries/clientpositive/disable_merge_for_bucketing.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/disallow_incompatible_type_change_off.q ql/src/test/queries/clientpositive/disallow_incompatible_type_change_off.q
index 991b930d54..f1839b6b2a 100644
--- ql/src/test/queries/clientpositive/disallow_incompatible_type_change_off.q
+++ ql/src/test/queries/clientpositive/disallow_incompatible_type_change_off.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 SET hive.metastore.disallow.incompatible.col.type.changes=false;
diff --git ql/src/test/queries/clientpositive/distinct_stats.q ql/src/test/queries/clientpositive/distinct_stats.q
index 725183380b..0cc795b339 100644
--- ql/src/test/queries/clientpositive/distinct_stats.q
+++ ql/src/test/queries/clientpositive/distinct_stats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.autogather=true;
 
 set hive.compute.query.using.stats=true;
diff --git ql/src/test/queries/clientpositive/dp_counter_mm.q ql/src/test/queries/clientpositive/dp_counter_mm.q
index 4f3b1007e5..8f1afc1ce7 100644
--- ql/src/test/queries/clientpositive/dp_counter_mm.q
+++ ql/src/test/queries/clientpositive/dp_counter_mm.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.dynamic.partition.mode=nonstrict;
 set hive.exec.max.dynamic.partitions.pernode=200;
 set hive.exec.max.dynamic.partitions=200;
diff --git ql/src/test/queries/clientpositive/dp_counter_non_mm.q ql/src/test/queries/clientpositive/dp_counter_non_mm.q
index fc4660e6b2..960f7fc24c 100644
--- ql/src/test/queries/clientpositive/dp_counter_non_mm.q
+++ ql/src/test/queries/clientpositive/dp_counter_non_mm.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.dynamic.partition.mode=nonstrict;
 set hive.exec.max.dynamic.partitions.pernode=200;
 set hive.exec.max.dynamic.partitions=200;
diff --git ql/src/test/queries/clientpositive/driverhook.q ql/src/test/queries/clientpositive/driverhook.q
index 191c15436b..08db585aa7 100644
--- ql/src/test/queries/clientpositive/driverhook.q
+++ ql/src/test/queries/clientpositive/driverhook.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.exec.driver.run.hooks=org.apache.hadoop.hive.ql.hooks.DriverTestHook;
 
 -- This query should appear in the Hive CLI output.
diff --git ql/src/test/queries/clientpositive/drop_database_removes_partition_dirs.q ql/src/test/queries/clientpositive/drop_database_removes_partition_dirs.q
index a5f5189491..e46460fbee 100644
--- ql/src/test/queries/clientpositive/drop_database_removes_partition_dirs.q
+++ ql/src/test/queries/clientpositive/drop_database_removes_partition_dirs.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 -- This test verifies that if a partition exists outside a table's current location when the
 -- database is dropped the partition's location is dropped as well.
 
diff --git ql/src/test/queries/clientpositive/drop_table_removes_partition_dirs.q ql/src/test/queries/clientpositive/drop_table_removes_partition_dirs.q
index 102b3ef5f5..1ba3f85fdd 100644
--- ql/src/test/queries/clientpositive/drop_table_removes_partition_dirs.q
+++ ql/src/test/queries/clientpositive/drop_table_removes_partition_dirs.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 -- This test verifies that if a partition exists outside the table's current location when the
 -- table is dropped the partition's location is dropped as well.
 
diff --git ql/src/test/queries/clientpositive/druidmini_dynamic_partition.q ql/src/test/queries/clientpositive/druidmini_dynamic_partition.q
index 2552717afe..6a98627e8c 100644
--- ql/src/test/queries/clientpositive/druidmini_dynamic_partition.q
+++ ql/src/test/queries/clientpositive/druidmini_dynamic_partition.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 CREATE TABLE druid_partitioned_table_0
         STORED BY 'org.apache.hadoop.hive.druid.DruidStorageHandler'
         TBLPROPERTIES (
diff --git ql/src/test/queries/clientpositive/druidmini_test1.q ql/src/test/queries/clientpositive/druidmini_test1.q
index 630e617887..ad9546f6dc 100644
--- ql/src/test/queries/clientpositive/druidmini_test1.q
+++ ql/src/test/queries/clientpositive/druidmini_test1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 CREATE TABLE druid_table
 STORED BY 'org.apache.hadoop.hive.druid.DruidStorageHandler'
 TBLPROPERTIES ("druid.segment.granularity" = "HOUR", "druid.query.granularity" = "MINUTE")
diff --git ql/src/test/queries/clientpositive/druidmini_test_insert.q ql/src/test/queries/clientpositive/druidmini_test_insert.q
index 558e246db6..82f85e9a5a 100644
--- ql/src/test/queries/clientpositive/druidmini_test_insert.q
+++ ql/src/test/queries/clientpositive/druidmini_test_insert.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 CREATE TABLE druid_alltypesorc
 STORED BY 'org.apache.hadoop.hive.druid.DruidStorageHandler'
 TBLPROPERTIES ("druid.segment.granularity" = "HOUR", "druid.query.granularity" = "MINUTE")
diff --git ql/src/test/queries/clientpositive/dynamic_partition_pruning.q ql/src/test/queries/clientpositive/dynamic_partition_pruning.q
index 9145a36f34..7819fdcdac 100644
--- ql/src/test/queries/clientpositive/dynamic_partition_pruning.q
+++ ql/src/test/queries/clientpositive/dynamic_partition_pruning.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/dynamic_partition_pruning_2.q ql/src/test/queries/clientpositive/dynamic_partition_pruning_2.q
index b8b04eead0..009cf53b6a 100644
--- ql/src/test/queries/clientpositive/dynamic_partition_pruning_2.q
+++ ql/src/test/queries/clientpositive/dynamic_partition_pruning_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.explain.user=false;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=true;
diff --git ql/src/test/queries/clientpositive/dynamic_partition_skip_default.q ql/src/test/queries/clientpositive/dynamic_partition_skip_default.q
index 699e58effc..8fa03ac5ad 100644
--- ql/src/test/queries/clientpositive/dynamic_partition_skip_default.q
+++ ql/src/test/queries/clientpositive/dynamic_partition_skip_default.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table dynamic_part_table(intcol string) partitioned by (partcol1 string, partcol2 string);
 
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/dynamic_rdd_cache.q ql/src/test/queries/clientpositive/dynamic_rdd_cache.q
index bb041c93b1..729464ed83 100644
--- ql/src/test/queries/clientpositive/dynamic_rdd_cache.q
+++ ql/src/test/queries/clientpositive/dynamic_rdd_cache.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 SET hive.map.aggr=true;
 SET hive.multigroupby.singlereducer=false;
diff --git ql/src/test/queries/clientpositive/dynamic_semijoin_reduction.q ql/src/test/queries/clientpositive/dynamic_semijoin_reduction.q
index 6da0376019..705dfdc382 100644
--- ql/src/test/queries/clientpositive/dynamic_semijoin_reduction.q
+++ ql/src/test/queries/clientpositive/dynamic_semijoin_reduction.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:alltypesorc
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/dynamic_semijoin_reduction_2.q ql/src/test/queries/clientpositive/dynamic_semijoin_reduction_2.q
index 7f83b03dce..044ce5a772 100644
--- ql/src/test/queries/clientpositive/dynamic_semijoin_reduction_2.q
+++ ql/src/test/queries/clientpositive/dynamic_semijoin_reduction_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/dynamic_semijoin_reduction_sw.q ql/src/test/queries/clientpositive/dynamic_semijoin_reduction_sw.q
index cece77d805..3372cee299 100644
--- ql/src/test/queries/clientpositive/dynamic_semijoin_reduction_sw.q
+++ ql/src/test/queries/clientpositive/dynamic_semijoin_reduction_sw.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:alltypesorc
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/dynamic_semijoin_user_level.q ql/src/test/queries/clientpositive/dynamic_semijoin_user_level.q
index 11bd17aebe..224c511437 100644
--- ql/src/test/queries/clientpositive/dynamic_semijoin_user_level.q
+++ ql/src/test/queries/clientpositive/dynamic_semijoin_user_level.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:alltypesorc
 set hive.explain.user=true;
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/dynpart_sort_optimization2.q ql/src/test/queries/clientpositive/dynpart_sort_optimization2.q
index 8dac772a37..9a52fb4f71 100644
--- ql/src/test/queries/clientpositive/dynpart_sort_optimization2.q
+++ ql/src/test/queries/clientpositive/dynpart_sort_optimization2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.optimize.sort.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/dynpart_sort_optimization_acid.q ql/src/test/queries/clientpositive/dynpart_sort_optimization_acid.q
index bf8cbc8a1e..d6cc647c4c 100644
--- ql/src/test/queries/clientpositive/dynpart_sort_optimization_acid.q
+++ ql/src/test/queries/clientpositive/dynpart_sort_optimization_acid.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/dynpart_sort_optimization_acid2.q ql/src/test/queries/clientpositive/dynpart_sort_optimization_acid2.q
index c115e62c7b..c852d519d8 100644
--- ql/src/test/queries/clientpositive/dynpart_sort_optimization_acid2.q
+++ ql/src/test/queries/clientpositive/dynpart_sort_optimization_acid2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/empty_dir_in_table.q ql/src/test/queries/clientpositive/empty_dir_in_table.q
index 447ca79e5c..ea609df32a 100644
--- ql/src/test/queries/clientpositive/empty_dir_in_table.q
+++ ql/src/test/queries/clientpositive/empty_dir_in_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 dfs ${system:test.dfs.mkdir} hdfs:///target/tmp/test_empty_table;
 
diff --git ql/src/test/queries/clientpositive/encryption_auto_purge_tables.q ql/src/test/queries/clientpositive/encryption_auto_purge_tables.q
index b96a0a0376..b095557cf3 100644
--- ql/src/test/queries/clientpositive/encryption_auto_purge_tables.q
+++ ql/src/test/queries/clientpositive/encryption_auto_purge_tables.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS;
 
 -- we're setting this so that TestNegaiveCliDriver.vm doesn't stop processing after DROP TABLE fails;
@@ -9,7 +10,7 @@ CREATE TABLE encrypted_table (key INT, value STRING) LOCATION '${hiveconf:hive.m
 CRYPTO CREATE_KEY --keyName key_128 --bitLength 128;
 CRYPTO CREATE_ZONE --keyName key_128 --path ${hiveconf:hive.metastore.warehouse.dir}/default/encrypted_table;
 
-SHOW TABLES;
+SHOW TABLES LIKE "encrypted_*";
 
 ALTER TABLE encrypted_table SET TBLPROPERTIES("auto.purge"="true");
 
@@ -30,7 +31,7 @@ SELECT COUNT(*) from encrypted_ext_table;
 
 DROP TABLE encrypted_table;
 DROP TABLE encrypted_ext_table;
-SHOW TABLES;
+SHOW TABLES LIKE "encrypted_*";
 
 -- cleanup
 DROP TABLE IF EXISTS encrypted_table PURGE;
diff --git ql/src/test/queries/clientpositive/encryption_ctas.q ql/src/test/queries/clientpositive/encryption_ctas.q
index 93058b6d4a..f3314aadf8 100644
--- ql/src/test/queries/clientpositive/encryption_ctas.q
+++ ql/src/test/queries/clientpositive/encryption_ctas.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE IF EXISTS testCT.encrypted_tablectas PURGE;
 DROP DATABASE IF EXISTS testCT;
 CREATE DATABASE testCT;
diff --git ql/src/test/queries/clientpositive/encryption_drop_table.q ql/src/test/queries/clientpositive/encryption_drop_table.q
index 6cffa2bd6a..2212e7d857 100644
--- ql/src/test/queries/clientpositive/encryption_drop_table.q
+++ ql/src/test/queries/clientpositive/encryption_drop_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS;
 
 -- we're setting this so that TestNegaiveCliDriver.vm doesn't stop processing after DROP TABLE fails;
@@ -14,13 +15,13 @@ CRYPTO CREATE_ZONE --keyName key_128 --path ${hiveconf:hive.metastore.warehouse.
 INSERT OVERWRITE TABLE encrypted_table SELECT * FROM src;
 
 CREATE EXTERNAL TABLE encrypted_ext_table (key INT, value STRING) LOCATION '${hiveconf:hive.metastore.warehouse.dir}/default/encrypted_table';
-SHOW TABLES;
+SHOW TABLES LIKE "encrypted_*";
 
 DROP TABLE default.encrypted_ext_table;
-SHOW TABLES;
+SHOW TABLES LIKE "encrypted_*";
 
 DROP TABLE default.encrypted_table;
-SHOW TABLES;
+SHOW TABLES LIKE "encrypted_*";
 
 DROP TABLE IF EXISTS encrypted_table1;
 CREATE TABLE encrypted_table1 (key INT, value STRING) LOCATION '${hiveconf:hive.metastore.warehouse.dir}/default/encrypted_table1';
@@ -33,10 +34,10 @@ SELECT COUNT(*) FROM encrypted_table1;
 
 INSERT OVERWRITE TABLE encrypted_table1 SELECT * FROM src;
 DROP TABLE default.encrypted_table1;
-SHOW TABLES;
+SHOW TABLES LIKE "encrypted_*";
 
 TRUNCATE TABLE encrypted_table1;
 DROP TABLE default.encrypted_table1;
-SHOW TABLES;
+SHOW TABLES LIKE "encrypted_*";
 
 CRYPTO DELETE_KEY --keyName key_128;
diff --git ql/src/test/queries/clientpositive/encryption_drop_table_in_encrypted_db.q ql/src/test/queries/clientpositive/encryption_drop_table_in_encrypted_db.q
index f6c48e3bf9..9219c609ee 100644
--- ql/src/test/queries/clientpositive/encryption_drop_table_in_encrypted_db.q
+++ ql/src/test/queries/clientpositive/encryption_drop_table_in_encrypted_db.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS;
 
 set hive.cli.errors.ignore=true;
diff --git ql/src/test/queries/clientpositive/encryption_insert_partition_dynamic.q ql/src/test/queries/clientpositive/encryption_insert_partition_dynamic.q
index 11df6f7d26..6cfb3826ef 100644
--- ql/src/test/queries/clientpositive/encryption_insert_partition_dynamic.q
+++ ql/src/test/queries/clientpositive/encryption_insert_partition_dynamic.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.dynamic.partition.mode=nonstrict;
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
diff --git ql/src/test/queries/clientpositive/encryption_insert_partition_static.q ql/src/test/queries/clientpositive/encryption_insert_partition_static.q
index 269ac7d282..4f08c45e84 100644
--- ql/src/test/queries/clientpositive/encryption_insert_partition_static.q
+++ ql/src/test/queries/clientpositive/encryption_insert_partition_static.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/encryption_join_unencrypted_tbl.q ql/src/test/queries/clientpositive/encryption_join_unencrypted_tbl.q
index 089723fe23..d2f27e37de 100644
--- ql/src/test/queries/clientpositive/encryption_join_unencrypted_tbl.q
+++ ql/src/test/queries/clientpositive/encryption_join_unencrypted_tbl.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 --SORT_QUERY_RESULTS
 
 DROP TABLE IF EXISTS encrypted_table PURGE;
diff --git ql/src/test/queries/clientpositive/encryption_join_with_different_encryption_keys.q ql/src/test/queries/clientpositive/encryption_join_with_different_encryption_keys.q
index 7159ad5995..b8fa56f0e5 100644
--- ql/src/test/queries/clientpositive/encryption_join_with_different_encryption_keys.q
+++ ql/src/test/queries/clientpositive/encryption_join_with_different_encryption_keys.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 --SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/encryption_move_tbl.q ql/src/test/queries/clientpositive/encryption_move_tbl.q
index 8d865aa6e8..ff1d57ccb0 100644
--- ql/src/test/queries/clientpositive/encryption_move_tbl.q
+++ ql/src/test/queries/clientpositive/encryption_move_tbl.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS;
 set hive.stats.column.autogather=false;
 
@@ -19,7 +20,7 @@ CRYPTO CREATE_KEY --keyName key_128_2 --bitLength 128;
 CRYPTO CREATE_ZONE --keyName key_128_2 --path ${hiveconf:hive.metastore.warehouse.dir}/encrypted_db.db;
 
 INSERT OVERWRITE TABLE encrypted_table SELECT * FROM src;
-SHOW TABLES;
+SHOW TABLES LIKE "encrypted_*";
 ANALYZE TABLE encrypted_table COMPUTE STATISTICS FOR COLUMNS;
 DESCRIBE FORMATTED encrypted_table key;
 DESCRIBE FORMATTED encrypted_table value;
diff --git ql/src/test/queries/clientpositive/enforce_constraint_notnull.q ql/src/test/queries/clientpositive/enforce_constraint_notnull.q
index 2aa4665015..d29f213dce 100644
--- ql/src/test/queries/clientpositive/enforce_constraint_notnull.q
+++ ql/src/test/queries/clientpositive/enforce_constraint_notnull.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 --  SIMPLE TABLE
 -- create table with first and last column with not null
 CREATE TABLE table1 (a STRING NOT NULL ENFORCED, b STRING, c STRING NOT NULL ENFORCED);
diff --git ql/src/test/queries/clientpositive/enforce_order.q ql/src/test/queries/clientpositive/enforce_order.q
index da18684d70..acd0866600 100644
--- ql/src/test/queries/clientpositive/enforce_order.q
+++ ql/src/test/queries/clientpositive/enforce_order.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table table_asc;
 drop table table_desc;
 
diff --git ql/src/test/queries/clientpositive/escape1.q ql/src/test/queries/clientpositive/escape1.q
index ac499e30ac..bda2088071 100644
--- ql/src/test/queries/clientpositive/escape1.q
+++ ql/src/test/queries/clientpositive/escape1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/escape2.q ql/src/test/queries/clientpositive/escape2.q
index 840b920739..6bc1588187 100644
--- ql/src/test/queries/clientpositive/escape2.q
+++ ql/src/test/queries/clientpositive/escape2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/escape_clusterby1.q ql/src/test/queries/clientpositive/escape_clusterby1.q
index 13ea151539..98305b56b0 100644
--- ql/src/test/queries/clientpositive/escape_clusterby1.q
+++ ql/src/test/queries/clientpositive/escape_clusterby1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- escaped column names in cluster by are not working jira 3267
 explain
 select key, value from src cluster by key, value;
diff --git ql/src/test/queries/clientpositive/escape_distributeby1.q ql/src/test/queries/clientpositive/escape_distributeby1.q
index 40ed2de635..ed28a2d3a5 100644
--- ql/src/test/queries/clientpositive/escape_distributeby1.q
+++ ql/src/test/queries/clientpositive/escape_distributeby1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- escaped column names in distribute by by are not working jira 3267
 explain
 select key, value from src distribute by key, value;
diff --git ql/src/test/queries/clientpositive/escape_orderby1.q ql/src/test/queries/clientpositive/escape_orderby1.q
index 315075adf1..c98a4efcc5 100644
--- ql/src/test/queries/clientpositive/escape_orderby1.q
+++ ql/src/test/queries/clientpositive/escape_orderby1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- escaped column names in order by are not working jira 3267
 explain
diff --git ql/src/test/queries/clientpositive/escape_sortby1.q ql/src/test/queries/clientpositive/escape_sortby1.q
index 6b487c8a47..3dcdad61e9 100644
--- ql/src/test/queries/clientpositive/escape_sortby1.q
+++ ql/src/test/queries/clientpositive/escape_sortby1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- escaped column names in sort by are not working jira 3267
 explain
 select key, value from src sort by key, value;
diff --git ql/src/test/queries/clientpositive/except_all.q ql/src/test/queries/clientpositive/except_all.q
index 3b62459ff6..13bb7fb315 100644
--- ql/src/test/queries/clientpositive/except_all.q
+++ ql/src/test/queries/clientpositive/except_all.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 
diff --git ql/src/test/queries/clientpositive/except_distinct.q ql/src/test/queries/clientpositive/except_distinct.q
index 9991447bcb..6fb0071462 100644
--- ql/src/test/queries/clientpositive/except_distinct.q
+++ ql/src/test/queries/clientpositive/except_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 
diff --git ql/src/test/queries/clientpositive/exchgpartition2lel.q ql/src/test/queries/clientpositive/exchgpartition2lel.q
index b0098975fc..96e99bc041 100644
--- ql/src/test/queries/clientpositive/exchgpartition2lel.q
+++ ql/src/test/queries/clientpositive/exchgpartition2lel.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE IF EXISTS t1;
 DROP TABLE IF EXISTS t2;
 DROP TABLE IF EXISTS t3;
diff --git ql/src/test/queries/clientpositive/exec_parallel_column_stats.q ql/src/test/queries/clientpositive/exec_parallel_column_stats.q
index a89b707918..75e6e71399 100644
--- ql/src/test/queries/clientpositive/exec_parallel_column_stats.q
+++ ql/src/test/queries/clientpositive/exec_parallel_column_stats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.parallel=true;
 
 create table t as select * from src;
diff --git ql/src/test/queries/clientpositive/explain_ddl.q ql/src/test/queries/clientpositive/explain_ddl.q
index e255179e73..b873088832 100644
--- ql/src/test/queries/clientpositive/explain_ddl.q
+++ ql/src/test/queries/clientpositive/explain_ddl.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- This test is used for testing explain for DDL/DML statements
 
 -- Create some views and tabels
diff --git ql/src/test/queries/clientpositive/explain_dependency.q ql/src/test/queries/clientpositive/explain_dependency.q
index 814ac36e80..df3cb7a746 100644
--- ql/src/test/queries/clientpositive/explain_dependency.q
+++ ql/src/test/queries/clientpositive/explain_dependency.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- This test is used for testing EXPLAIN DEPENDENCY command
 
diff --git ql/src/test/queries/clientpositive/explain_dependency2.q ql/src/test/queries/clientpositive/explain_dependency2.q
index 88d4464a91..b1e6fe73ca 100644
--- ql/src/test/queries/clientpositive/explain_dependency2.q
+++ ql/src/test/queries/clientpositive/explain_dependency2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 -- This test is used for testing EXPLAIN DEPENDENCY command
 
 -- select from a table which does not involve a map-reduce job
diff --git ql/src/test/queries/clientpositive/explain_logical.q ql/src/test/queries/clientpositive/explain_logical.q
index a468264842..261b50a19d 100644
--- ql/src/test/queries/clientpositive/explain_logical.q
+++ ql/src/test/queries/clientpositive/explain_logical.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- This test is used for testing EXPLAIN LOGICAL command
 
diff --git ql/src/test/queries/clientpositive/explain_rearrange.q ql/src/test/queries/clientpositive/explain_rearrange.q
index 0314132974..51644c166d 100644
--- ql/src/test/queries/clientpositive/explain_rearrange.q
+++ ql/src/test/queries/clientpositive/explain_rearrange.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.mapred.mode=nonstrict;
 -- query from auto_sortmerge_join_9.q
 
diff --git ql/src/test/queries/clientpositive/explainanalyze_1.q ql/src/test/queries/clientpositive/explainanalyze_1.q
index 6611922016..b59e7347ed 100644
--- ql/src/test/queries/clientpositive/explainanalyze_1.q
+++ ql/src/test/queries/clientpositive/explainanalyze_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 set hive.mapred.mode=nonstrict;
 
diff --git ql/src/test/queries/clientpositive/explainanalyze_2.q ql/src/test/queries/clientpositive/explainanalyze_2.q
index 0b0749ee74..e708664022 100644
--- ql/src/test/queries/clientpositive/explainanalyze_2.q
+++ ql/src/test/queries/clientpositive/explainanalyze_2.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.map.aggr=false;
 
 set hive.strict.checks.bucketing=false;
diff --git ql/src/test/queries/clientpositive/explainanalyze_3.q ql/src/test/queries/clientpositive/explainanalyze_3.q
index 8011124311..647f8dbed5 100644
--- ql/src/test/queries/clientpositive/explainanalyze_3.q
+++ ql/src/test/queries/clientpositive/explainanalyze_3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.map.aggr=false;
 
 set hive.strict.checks.bucketing=false;
diff --git ql/src/test/queries/clientpositive/explainanalyze_4.q ql/src/test/queries/clientpositive/explainanalyze_4.q
index 498a128c87..cf8b864374 100644
--- ql/src/test/queries/clientpositive/explainanalyze_4.q
+++ ql/src/test/queries/clientpositive/explainanalyze_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.map.aggr=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/explainanalyze_5.q ql/src/test/queries/clientpositive/explainanalyze_5.q
index 696064c874..17f26ca231 100644
--- ql/src/test/queries/clientpositive/explainanalyze_5.q
+++ ql/src/test/queries/clientpositive/explainanalyze_5.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.map.aggr=false;
 
 set hive.stats.column.autogather=true;
diff --git ql/src/test/queries/clientpositive/explainuser_1.q ql/src/test/queries/clientpositive/explainuser_1.q
index a6fbb54a60..9675989897 100644
--- ql/src/test/queries/clientpositive/explainuser_1.q
+++ ql/src/test/queries/clientpositive/explainuser_1.q
@@ -1,3 +1,12 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src_cbo
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:part
+--! qt:dataset:lineitem
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/explainuser_2.q ql/src/test/queries/clientpositive/explainuser_2.q
index 560c79e458..1b32b47f6f 100644
--- ql/src/test/queries/clientpositive/explainuser_2.q
+++ ql/src/test/queries/clientpositive/explainuser_2.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false;
 
 set hive.explain.user=true;
diff --git ql/src/test/queries/clientpositive/explainuser_3.q ql/src/test/queries/clientpositive/explainuser_3.q
index 1e40329692..0f63070362 100644
--- ql/src/test/queries/clientpositive/explainuser_3.q
+++ ql/src/test/queries/clientpositive/explainuser_3.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.strict.checks.bucketing=false;
 
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
diff --git ql/src/test/queries/clientpositive/explainuser_4.q ql/src/test/queries/clientpositive/explainuser_4.q
index 8f92140c14..099971a169 100644
--- ql/src/test/queries/clientpositive/explainuser_4.q
+++ ql/src/test/queries/clientpositive/explainuser_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.llap.memory.oversubscription.max.executors.per.query=0;
 
diff --git ql/src/test/queries/clientpositive/explode_null.q ql/src/test/queries/clientpositive/explode_null.q
index 6a540f7643..8984fd4a72 100644
--- ql/src/test/queries/clientpositive/explode_null.q
+++ ql/src/test/queries/clientpositive/explode_null.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SELECT explode(col) AS myCol FROM 
     (select * from (SELECT array(1,2,3) AS col FROM src LIMIT 1)ea 
      UNION ALL
diff --git ql/src/test/queries/clientpositive/expr_cached.q ql/src/test/queries/clientpositive/expr_cached.q
index 8fc182c054..d4521b95d6 100644
--- ql/src/test/queries/clientpositive/expr_cached.q
+++ ql/src/test/queries/clientpositive/expr_cached.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- should return a value
diff --git ql/src/test/queries/clientpositive/extract.q ql/src/test/queries/clientpositive/extract.q
index 70c126765b..3843b13a76 100644
--- ql/src/test/queries/clientpositive/extract.q
+++ ql/src/test/queries/clientpositive/extract.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table extract_udf;
 
 create table extract_udf (t timestamp);
diff --git ql/src/test/queries/clientpositive/fetch_aggregation.q ql/src/test/queries/clientpositive/fetch_aggregation.q
index a56b6c8197..391bab91a0 100644
--- ql/src/test/queries/clientpositive/fetch_aggregation.q
+++ ql/src/test/queries/clientpositive/fetch_aggregation.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.aggr=true;
 set hive.exec.submitviachild=true;
 set hive.exec.submit.local.task.via.child=true;
diff --git ql/src/test/queries/clientpositive/fileformat_mix.q ql/src/test/queries/clientpositive/fileformat_mix.q
index f5bcaec258..788c73e6e6 100644
--- ql/src/test/queries/clientpositive/fileformat_mix.q
+++ ql/src/test/queries/clientpositive/fileformat_mix.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/fileformat_sequencefile.q ql/src/test/queries/clientpositive/fileformat_sequencefile.q
index 895c70f8af..29a69da320 100644
--- ql/src/test/queries/clientpositive/fileformat_sequencefile.q
+++ ql/src/test/queries/clientpositive/fileformat_sequencefile.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 CREATE TABLE dest1(key INT, value STRING) STORED AS
   INPUTFORMAT 'org.apache.hadoop.mapred.SequenceFileInputFormat'
diff --git ql/src/test/queries/clientpositive/fileformat_text.q ql/src/test/queries/clientpositive/fileformat_text.q
index 8233aded97..4b4e557435 100644
--- ql/src/test/queries/clientpositive/fileformat_text.q
+++ ql/src/test/queries/clientpositive/fileformat_text.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 CREATE TABLE dest1(key INT, value STRING) STORED AS
   INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat'
diff --git ql/src/test/queries/clientpositive/filter_aggr.q ql/src/test/queries/clientpositive/filter_aggr.q
index 44e088b00d..f3b551ee50 100644
--- ql/src/test/queries/clientpositive/filter_aggr.q
+++ ql/src/test/queries/clientpositive/filter_aggr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 explain extended 
diff --git ql/src/test/queries/clientpositive/filter_cond_pushdown.q ql/src/test/queries/clientpositive/filter_cond_pushdown.q
index c325ef86e5..98ba7c0dfc 100644
--- ql/src/test/queries/clientpositive/filter_cond_pushdown.q
+++ ql/src/test/queries/clientpositive/filter_cond_pushdown.q
@@ -1,3 +1,7 @@
+--! qt:dataset:src
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.mapred.mode=nonstrict;
 EXPLAIN
 SELECT f.key, g.value
diff --git ql/src/test/queries/clientpositive/filter_in_or_dup.q ql/src/test/queries/clientpositive/filter_in_or_dup.q
index 34a51397a8..cd768661fb 100644
--- ql/src/test/queries/clientpositive/filter_in_or_dup.q
+++ ql/src/test/queries/clientpositive/filter_in_or_dup.q
@@ -1,3 +1,4 @@
+--! qt:dataset:cbo_t1
 set hive.optimize.point.lookup.min=2;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/filter_join_breaktask.q ql/src/test/queries/clientpositive/filter_join_breaktask.q
index 52cce36b5a..7625da6a24 100644
--- ql/src/test/queries/clientpositive/filter_join_breaktask.q
+++ ql/src/test/queries/clientpositive/filter_join_breaktask.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/filter_join_breaktask2.q ql/src/test/queries/clientpositive/filter_join_breaktask2.q
index e88ad416ce..78a19ebb5e 100644
--- ql/src/test/queries/clientpositive/filter_join_breaktask2.q
+++ ql/src/test/queries/clientpositive/filter_join_breaktask2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/filter_numeric.q ql/src/test/queries/clientpositive/filter_numeric.q
index 9507298cc1..c5fe4e2f8a 100644
--- ql/src/test/queries/clientpositive/filter_numeric.q
+++ ql/src/test/queries/clientpositive/filter_numeric.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.exec.dynamic.partition.mode=nonstrict;
 
 -- SORT_AND_HASH_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/filter_union.q ql/src/test/queries/clientpositive/filter_union.q
index 1bf90f08b8..0862143c83 100644
--- ql/src/test/queries/clientpositive/filter_union.q
+++ ql/src/test/queries/clientpositive/filter_union.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.metadataonly=true;
 
diff --git ql/src/test/queries/clientpositive/flatten_and_or.q ql/src/test/queries/clientpositive/flatten_and_or.q
index 6c6e0f9416..40c81bbf16 100644
--- ql/src/test/queries/clientpositive/flatten_and_or.q
+++ ql/src/test/queries/clientpositive/flatten_and_or.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.point.lookup=false;
 
 explain
diff --git ql/src/test/queries/clientpositive/floor_time.q ql/src/test/queries/clientpositive/floor_time.q
index b0f6f90aea..d73267d702 100644
--- ql/src/test/queries/clientpositive/floor_time.q
+++ ql/src/test/queries/clientpositive/floor_time.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table extract_udf;
 
 create table extract_udf (t timestamp);
diff --git ql/src/test/queries/clientpositive/fm-sketch.q ql/src/test/queries/clientpositive/fm-sketch.q
index 6a65442076..3120517881 100644
--- ql/src/test/queries/clientpositive/fm-sketch.q
+++ ql/src/test/queries/clientpositive/fm-sketch.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.stats.ndv.algo=fm;
 
diff --git ql/src/test/queries/clientpositive/fold_case.q ql/src/test/queries/clientpositive/fold_case.q
index 0066c41079..e08584b213 100644
--- ql/src/test/queries/clientpositive/fold_case.q
+++ ql/src/test/queries/clientpositive/fold_case.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain
 select count(1) from src where (case key when '238' then true else false end);
 explain 
diff --git ql/src/test/queries/clientpositive/fold_eq_with_case_when.q ql/src/test/queries/clientpositive/fold_eq_with_case_when.q
index 9f342c1923..a63c1ff2a9 100644
--- ql/src/test/queries/clientpositive/fold_eq_with_case_when.q
+++ ql/src/test/queries/clientpositive/fold_eq_with_case_when.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 explain
 SELECT  
diff --git ql/src/test/queries/clientpositive/fold_when.q ql/src/test/queries/clientpositive/fold_when.q
index e827a5c00e..ba62de6766 100644
--- ql/src/test/queries/clientpositive/fold_when.q
+++ ql/src/test/queries/clientpositive/fold_when.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain
 select key from src where ((case when (key = '238') then null     end) = 1);
 explain
diff --git ql/src/test/queries/clientpositive/foldts.q ql/src/test/queries/clientpositive/foldts.q
index 362cac2333..8b358a654a 100644
--- ql/src/test/queries/clientpositive/foldts.q
+++ ql/src/test/queries/clientpositive/foldts.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:alltypesorc
 
 set hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/fouter_join_ppr.q ql/src/test/queries/clientpositive/fouter_join_ppr.q
index e21a3aac22..735fba78aa 100644
--- ql/src/test/queries/clientpositive/fouter_join_ppr.q
+++ ql/src/test/queries/clientpositive/fouter_join_ppr.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 
diff --git ql/src/test/queries/clientpositive/fp_literal_arithmetic.q ql/src/test/queries/clientpositive/fp_literal_arithmetic.q
index b4f36ef506..86ac49082f 100644
--- ql/src/test/queries/clientpositive/fp_literal_arithmetic.q
+++ ql/src/test/queries/clientpositive/fp_literal_arithmetic.q
@@ -1,3 +1,4 @@
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 
diff --git ql/src/test/queries/clientpositive/gby_star.q ql/src/test/queries/clientpositive/gby_star.q
index 9855460d6f..f1174b92c6 100644
--- ql/src/test/queries/clientpositive/gby_star.q
+++ ql/src/test/queries/clientpositive/gby_star.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 explain
 select *, sum(key) from src group by key, value limit 10;
diff --git ql/src/test/queries/clientpositive/groupby1.q ql/src/test/queries/clientpositive/groupby1.q
index cd3a12b44e..b337581eda 100755
--- ql/src/test/queries/clientpositive/groupby1.q
+++ ql/src/test/queries/clientpositive/groupby1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- due to testMTQueries1
 set hive.stats.column.autogather=false;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/groupby11.q ql/src/test/queries/clientpositive/groupby11.q
index 3494136628..630f6c664e 100644
--- ql/src/test/queries/clientpositive/groupby11.q
+++ ql/src/test/queries/clientpositive/groupby11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/groupby12.q ql/src/test/queries/clientpositive/groupby12.q
index 6e9aee1d11..aa6545773e 100644
--- ql/src/test/queries/clientpositive/groupby12.q
+++ ql/src/test/queries/clientpositive/groupby12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/groupby1_limit.q ql/src/test/queries/clientpositive/groupby1_limit.q
index 6c40e19540..379017d878 100644
--- ql/src/test/queries/clientpositive/groupby1_limit.q
+++ ql/src/test/queries/clientpositive/groupby1_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 set hive.mapred.mode=nonstrict;
 set mapred.reduce.tasks=31;
diff --git ql/src/test/queries/clientpositive/groupby1_map.q ql/src/test/queries/clientpositive/groupby1_map.q
index 20eea6e450..4f0a031013 100644
--- ql/src/test/queries/clientpositive/groupby1_map.q
+++ ql/src/test/queries/clientpositive/groupby1_map.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby1_map_nomap.q ql/src/test/queries/clientpositive/groupby1_map_nomap.q
index 059d39ceb1..926aed6dde 100644
--- ql/src/test/queries/clientpositive/groupby1_map_nomap.q
+++ ql/src/test/queries/clientpositive/groupby1_map_nomap.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby1_map_skew.q ql/src/test/queries/clientpositive/groupby1_map_skew.q
index ab42ee2aca..64cadb3d42 100644
--- ql/src/test/queries/clientpositive/groupby1_map_skew.q
+++ ql/src/test/queries/clientpositive/groupby1_map_skew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/groupby1_noskew.q ql/src/test/queries/clientpositive/groupby1_noskew.q
index c31528d2f2..6e8382940a 100644
--- ql/src/test/queries/clientpositive/groupby1_noskew.q
+++ ql/src/test/queries/clientpositive/groupby1_noskew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby2.q ql/src/test/queries/clientpositive/groupby2.q
index 9fa437622e..6a8722aeee 100755
--- ql/src/test/queries/clientpositive/groupby2.q
+++ ql/src/test/queries/clientpositive/groupby2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/groupby2_limit.q ql/src/test/queries/clientpositive/groupby2_limit.q
index 260872505a..095737d313 100644
--- ql/src/test/queries/clientpositive/groupby2_limit.q
+++ ql/src/test/queries/clientpositive/groupby2_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set mapred.reduce.tasks=31;
 
diff --git ql/src/test/queries/clientpositive/groupby2_map.q ql/src/test/queries/clientpositive/groupby2_map.q
index e3f9e31085..457e401467 100644
--- ql/src/test/queries/clientpositive/groupby2_map.q
+++ ql/src/test/queries/clientpositive/groupby2_map.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby2_map_multi_distinct.q ql/src/test/queries/clientpositive/groupby2_map_multi_distinct.q
index d36301a5de..f4f241c712 100644
--- ql/src/test/queries/clientpositive/groupby2_map_multi_distinct.q
+++ ql/src/test/queries/clientpositive/groupby2_map_multi_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby2_map_skew.q ql/src/test/queries/clientpositive/groupby2_map_skew.q
index 73a75941f2..4fef7d1a0e 100644
--- ql/src/test/queries/clientpositive/groupby2_map_skew.q
+++ ql/src/test/queries/clientpositive/groupby2_map_skew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/groupby2_noskew.q ql/src/test/queries/clientpositive/groupby2_noskew.q
index 182666a838..f467fba459 100644
--- ql/src/test/queries/clientpositive/groupby2_noskew.q
+++ ql/src/test/queries/clientpositive/groupby2_noskew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby2_noskew_multi_distinct.q ql/src/test/queries/clientpositive/groupby2_noskew_multi_distinct.q
index 325abd6358..69b617b0ea 100644
--- ql/src/test/queries/clientpositive/groupby2_noskew_multi_distinct.q
+++ ql/src/test/queries/clientpositive/groupby2_noskew_multi_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby3.q ql/src/test/queries/clientpositive/groupby3.q
index d709d9b5ad..965cfae7f4 100755
--- ql/src/test/queries/clientpositive/groupby3.q
+++ ql/src/test/queries/clientpositive/groupby3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.map.aggr=false;
diff --git ql/src/test/queries/clientpositive/groupby3_map.q ql/src/test/queries/clientpositive/groupby3_map.q
index 7aea2d4b81..ebfb69650e 100644
--- ql/src/test/queries/clientpositive/groupby3_map.q
+++ ql/src/test/queries/clientpositive/groupby3_map.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby3_map_multi_distinct.q ql/src/test/queries/clientpositive/groupby3_map_multi_distinct.q
index 60d7b7feb8..a72b6fb863 100644
--- ql/src/test/queries/clientpositive/groupby3_map_multi_distinct.q
+++ ql/src/test/queries/clientpositive/groupby3_map_multi_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby3_map_skew.q ql/src/test/queries/clientpositive/groupby3_map_skew.q
index f9cb46ee32..a7990e52e0 100644
--- ql/src/test/queries/clientpositive/groupby3_map_skew.q
+++ ql/src/test/queries/clientpositive/groupby3_map_skew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/groupby3_noskew.q ql/src/test/queries/clientpositive/groupby3_noskew.q
index 2dbb04aa78..cd049ba7ff 100644
--- ql/src/test/queries/clientpositive/groupby3_noskew.q
+++ ql/src/test/queries/clientpositive/groupby3_noskew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 
diff --git ql/src/test/queries/clientpositive/groupby3_noskew_multi_distinct.q ql/src/test/queries/clientpositive/groupby3_noskew_multi_distinct.q
index 55d9a58989..2c8cf5de67 100644
--- ql/src/test/queries/clientpositive/groupby3_noskew_multi_distinct.q
+++ ql/src/test/queries/clientpositive/groupby3_noskew_multi_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 
diff --git ql/src/test/queries/clientpositive/groupby4.q ql/src/test/queries/clientpositive/groupby4.q
index d5f5426955..2660fde151 100755
--- ql/src/test/queries/clientpositive/groupby4.q
+++ ql/src/test/queries/clientpositive/groupby4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/groupby4_map.q ql/src/test/queries/clientpositive/groupby4_map.q
index f7fba87c7c..09f223a599 100644
--- ql/src/test/queries/clientpositive/groupby4_map.q
+++ ql/src/test/queries/clientpositive/groupby4_map.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby4_map_skew.q ql/src/test/queries/clientpositive/groupby4_map_skew.q
index 867e2e2667..a8c8a8c331 100644
--- ql/src/test/queries/clientpositive/groupby4_map_skew.q
+++ ql/src/test/queries/clientpositive/groupby4_map_skew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/groupby4_noskew.q ql/src/test/queries/clientpositive/groupby4_noskew.q
index b5fead51ca..69e1597a48 100644
--- ql/src/test/queries/clientpositive/groupby4_noskew.q
+++ ql/src/test/queries/clientpositive/groupby4_noskew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 
diff --git ql/src/test/queries/clientpositive/groupby5.q ql/src/test/queries/clientpositive/groupby5.q
index a4031707b3..73e68c4227 100755
--- ql/src/test/queries/clientpositive/groupby5.q
+++ ql/src/test/queries/clientpositive/groupby5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/groupby5_map.q ql/src/test/queries/clientpositive/groupby5_map.q
index 4fd6445d79..0704b69a76 100644
--- ql/src/test/queries/clientpositive/groupby5_map.q
+++ ql/src/test/queries/clientpositive/groupby5_map.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
 set mapred.reduce.tasks=31;
diff --git ql/src/test/queries/clientpositive/groupby5_map_skew.q ql/src/test/queries/clientpositive/groupby5_map_skew.q
index eccd45dd5b..469c42f280 100644
--- ql/src/test/queries/clientpositive/groupby5_map_skew.q
+++ ql/src/test/queries/clientpositive/groupby5_map_skew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
 set mapred.reduce.tasks=31;
diff --git ql/src/test/queries/clientpositive/groupby5_noskew.q ql/src/test/queries/clientpositive/groupby5_noskew.q
index eef5f73597..392b265cef 100644
--- ql/src/test/queries/clientpositive/groupby5_noskew.q
+++ ql/src/test/queries/clientpositive/groupby5_noskew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 
diff --git ql/src/test/queries/clientpositive/groupby6.q ql/src/test/queries/clientpositive/groupby6.q
index bd71d7d038..fee53e4495 100755
--- ql/src/test/queries/clientpositive/groupby6.q
+++ ql/src/test/queries/clientpositive/groupby6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/groupby6_map.q ql/src/test/queries/clientpositive/groupby6_map.q
index 4a1542b872..9d184e0bd9 100644
--- ql/src/test/queries/clientpositive/groupby6_map.q
+++ ql/src/test/queries/clientpositive/groupby6_map.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby6_map_skew.q ql/src/test/queries/clientpositive/groupby6_map_skew.q
index 0ee2bdbc47..d47750c6f0 100644
--- ql/src/test/queries/clientpositive/groupby6_map_skew.q
+++ ql/src/test/queries/clientpositive/groupby6_map_skew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/groupby6_noskew.q ql/src/test/queries/clientpositive/groupby6_noskew.q
index bf53f10489..a40af5f30c 100644
--- ql/src/test/queries/clientpositive/groupby6_noskew.q
+++ ql/src/test/queries/clientpositive/groupby6_noskew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 
diff --git ql/src/test/queries/clientpositive/groupby7.q ql/src/test/queries/clientpositive/groupby7.q
index 2993f99d44..a3ea700904 100644
--- ql/src/test/queries/clientpositive/groupby7.q
+++ ql/src/test/queries/clientpositive/groupby7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 set hive.groupby.skewindata=true;
 
diff --git ql/src/test/queries/clientpositive/groupby7_map.q ql/src/test/queries/clientpositive/groupby7_map.q
index 7b32ef73aa..8164042bf7 100644
--- ql/src/test/queries/clientpositive/groupby7_map.q
+++ ql/src/test/queries/clientpositive/groupby7_map.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 set hive.multigroupby.singlereducer=false;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby7_map_multi_single_reducer.q ql/src/test/queries/clientpositive/groupby7_map_multi_single_reducer.q
index d54039b4d1..c25d6029cf 100644
--- ql/src/test/queries/clientpositive/groupby7_map_multi_single_reducer.q
+++ ql/src/test/queries/clientpositive/groupby7_map_multi_single_reducer.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
 set mapred.reduce.tasks=31;
diff --git ql/src/test/queries/clientpositive/groupby7_map_skew.q ql/src/test/queries/clientpositive/groupby7_map_skew.q
index 6e9bc2e43b..afd09fe7e2 100644
--- ql/src/test/queries/clientpositive/groupby7_map_skew.q
+++ ql/src/test/queries/clientpositive/groupby7_map_skew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
 set mapred.reduce.tasks=31;
diff --git ql/src/test/queries/clientpositive/groupby7_noskew.q ql/src/test/queries/clientpositive/groupby7_noskew.q
index 03214f8aaa..fcdaeb4be2 100644
--- ql/src/test/queries/clientpositive/groupby7_noskew.q
+++ ql/src/test/queries/clientpositive/groupby7_noskew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 set hive.multigroupby.singlereducer=false;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q
index aa5773af27..f8ee474da7 100644
--- ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q
+++ ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 set hive.groupby.skewindata=false;
 set mapred.reduce.tasks=31;
diff --git ql/src/test/queries/clientpositive/groupby8.q ql/src/test/queries/clientpositive/groupby8.q
index e73607f09c..cb9f12c928 100644
--- ql/src/test/queries/clientpositive/groupby8.q
+++ ql/src/test/queries/clientpositive/groupby8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 set hive.groupby.skewindata=true;
 
diff --git ql/src/test/queries/clientpositive/groupby8_map.q ql/src/test/queries/clientpositive/groupby8_map.q
index ad537e1cfa..96286d3998 100644
--- ql/src/test/queries/clientpositive/groupby8_map.q
+++ ql/src/test/queries/clientpositive/groupby8_map.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
 set mapred.reduce.tasks=31;
diff --git ql/src/test/queries/clientpositive/groupby8_map_skew.q ql/src/test/queries/clientpositive/groupby8_map_skew.q
index e89ad95c19..4938b28fac 100644
--- ql/src/test/queries/clientpositive/groupby8_map_skew.q
+++ ql/src/test/queries/clientpositive/groupby8_map_skew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
 set mapred.reduce.tasks=31;
diff --git ql/src/test/queries/clientpositive/groupby8_noskew.q ql/src/test/queries/clientpositive/groupby8_noskew.q
index 61c533797f..3d2fa39e20 100644
--- ql/src/test/queries/clientpositive/groupby8_noskew.q
+++ ql/src/test/queries/clientpositive/groupby8_noskew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=false;
 
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby9.q ql/src/test/queries/clientpositive/groupby9.q
index f688518888..5608df5f84 100644
--- ql/src/test/queries/clientpositive/groupby9.q
+++ ql/src/test/queries/clientpositive/groupby9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE DEST1(key INT, value STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/groupby_bigdata.q ql/src/test/queries/clientpositive/groupby_bigdata.q
index 2e3eddcb1f..af7cdb2c4e 100644
--- ql/src/test/queries/clientpositive/groupby_bigdata.q
+++ ql/src/test/queries/clientpositive/groupby_bigdata.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr.hash.percentmemory = 0.3;
 set hive.mapred.local.mem = 384;
 
diff --git ql/src/test/queries/clientpositive/groupby_complex_types.q ql/src/test/queries/clientpositive/groupby_complex_types.q
index 511456d1f1..7ea9f59ff6 100644
--- ql/src/test/queries/clientpositive/groupby_complex_types.q
+++ ql/src/test/queries/clientpositive/groupby_complex_types.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE DEST1(key ARRAY<STRING>, value BIGINT) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/groupby_complex_types_multi_single_reducer.q ql/src/test/queries/clientpositive/groupby_complex_types_multi_single_reducer.q
index 0a1f137ad1..26236ab009 100644
--- ql/src/test/queries/clientpositive/groupby_complex_types_multi_single_reducer.q
+++ ql/src/test/queries/clientpositive/groupby_complex_types_multi_single_reducer.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.multigroupby.singlereducer=true;
 
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/groupby_constcolval.q ql/src/test/queries/clientpositive/groupby_constcolval.q
index e0ad694b83..a844258dcf 100644
--- ql/src/test/queries/clientpositive/groupby_constcolval.q
+++ ql/src/test/queries/clientpositive/groupby_constcolval.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE IF EXISTS tlbtest;
 create table tlbtest (key int, key1 int, key2 int);
 select key, key1, key2 from (select a.key, 0 as key1 , 0 as key2 from tlbtest a inner join src b on a.key = b.key) a group by key, key1, key2;
diff --git ql/src/test/queries/clientpositive/groupby_cube_multi_gby.q ql/src/test/queries/clientpositive/groupby_cube_multi_gby.q
index dff81a4faa..b2a0dfa463 100644
--- ql/src/test/queries/clientpositive/groupby_cube_multi_gby.q
+++ ql/src/test/queries/clientpositive/groupby_cube_multi_gby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.multigroupby.singlereducer=false;
 
 create table t1 like src;
diff --git ql/src/test/queries/clientpositive/groupby_distinct_samekey.q ql/src/test/queries/clientpositive/groupby_distinct_samekey.q
index 6a44dd17e3..7a40d01038 100644
--- ql/src/test/queries/clientpositive/groupby_distinct_samekey.q
+++ ql/src/test/queries/clientpositive/groupby_distinct_samekey.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- This test covers HIVE-2332
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/groupby_duplicate_key.q ql/src/test/queries/clientpositive/groupby_duplicate_key.q
index 1909873d5a..72e38f43ec 100644
--- ql/src/test/queries/clientpositive/groupby_duplicate_key.q
+++ ql/src/test/queries/clientpositive/groupby_duplicate_key.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain
 select distinct key, "" as dummy1, "" as dummy2 from src tablesample (10 rows);
 
diff --git ql/src/test/queries/clientpositive/groupby_grouping_window.q ql/src/test/queries/clientpositive/groupby_grouping_window.q
index 7ba73f9f38..8a5c2906b3 100644
--- ql/src/test/queries/clientpositive/groupby_grouping_window.q
+++ ql/src/test/queries/clientpositive/groupby_grouping_window.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table t(category int, live int, comments int);
 insert into table t select key, 0, 2 from src tablesample(3 rows);
 
diff --git ql/src/test/queries/clientpositive/groupby_join_pushdown.q ql/src/test/queries/clientpositive/groupby_join_pushdown.q
index d0bf0fb817..37ecd90bdb 100644
--- ql/src/test/queries/clientpositive/groupby_join_pushdown.q
+++ ql/src/test/queries/clientpositive/groupby_join_pushdown.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.transpose.aggr.join=true;
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/groupby_map_ppr.q ql/src/test/queries/clientpositive/groupby_map_ppr.q
index cec370fd49..d42416e5b8 100644
--- ql/src/test/queries/clientpositive/groupby_map_ppr.q
+++ ql/src/test/queries/clientpositive/groupby_map_ppr.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby_map_ppr_multi_distinct.q ql/src/test/queries/clientpositive/groupby_map_ppr_multi_distinct.q
index 21ca1241fc..5d969838d9 100644
--- ql/src/test/queries/clientpositive/groupby_map_ppr_multi_distinct.q
+++ ql/src/test/queries/clientpositive/groupby_map_ppr_multi_distinct.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby_multi_insert_common_distinct.q ql/src/test/queries/clientpositive/groupby_multi_insert_common_distinct.q
index c8778144ed..1d6d8dcf3e 100644
--- ql/src/test/queries/clientpositive/groupby_multi_insert_common_distinct.q
+++ ql/src/test/queries/clientpositive/groupby_multi_insert_common_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr=true;
 
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/groupby_multi_single_reducer.q ql/src/test/queries/clientpositive/groupby_multi_single_reducer.q
index 40976ee707..4f3d631542 100644
--- ql/src/test/queries/clientpositive/groupby_multi_single_reducer.q
+++ ql/src/test/queries/clientpositive/groupby_multi_single_reducer.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 -- due to L137 in LimitPushDownOptimization Not safe to continue for RS-GBY-GBY-LIM kind of pipelines. See HIVE-10607 for more.
 
diff --git ql/src/test/queries/clientpositive/groupby_multi_single_reducer2.q ql/src/test/queries/clientpositive/groupby_multi_single_reducer2.q
index 3c1b85f95f..5a5d149899 100644
--- ql/src/test/queries/clientpositive/groupby_multi_single_reducer2.q
+++ ql/src/test/queries/clientpositive/groupby_multi_single_reducer2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.multigroupby.singlereducer=true;
 
 CREATE TABLE dest_g2(key STRING, c1 INT) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/groupby_multi_single_reducer3.q ql/src/test/queries/clientpositive/groupby_multi_single_reducer3.q
index 59a4698c8c..224b67cd1e 100644
--- ql/src/test/queries/clientpositive/groupby_multi_single_reducer3.q
+++ ql/src/test/queries/clientpositive/groupby_multi_single_reducer3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- HIVE-3849 Aliased column in where clause for multi-groupby single reducer cannot be resolved
 
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/groupby_neg_float.q ql/src/test/queries/clientpositive/groupby_neg_float.q
index 0e41131861..8a557e768f 100644
--- ql/src/test/queries/clientpositive/groupby_neg_float.q
+++ ql/src/test/queries/clientpositive/groupby_neg_float.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM src
 SELECT cast('-30.33' as DOUBLE)
 GROUP BY cast('-30.33' as DOUBLE)
diff --git ql/src/test/queries/clientpositive/groupby_position.q ql/src/test/queries/clientpositive/groupby_position.q
index 446b99d3cb..e69109671f 100644
--- ql/src/test/queries/clientpositive/groupby_position.q
+++ ql/src/test/queries/clientpositive/groupby_position.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.groupby.orderby.position.alias=true;
 
diff --git ql/src/test/queries/clientpositive/groupby_ppr.q ql/src/test/queries/clientpositive/groupby_ppr.q
index 2f75afc19e..8cad28f016 100644
--- ql/src/test/queries/clientpositive/groupby_ppr.q
+++ ql/src/test/queries/clientpositive/groupby_ppr.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby_ppr_multi_distinct.q ql/src/test/queries/clientpositive/groupby_ppr_multi_distinct.q
index 357ab9586c..a88d6ff21d 100644
--- ql/src/test/queries/clientpositive/groupby_ppr_multi_distinct.q
+++ ql/src/test/queries/clientpositive/groupby_ppr_multi_distinct.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=false;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/groupby_resolution.q ql/src/test/queries/clientpositive/groupby_resolution.q
index 25a496e9f6..7897453079 100644
--- ql/src/test/queries/clientpositive/groupby_resolution.q
+++ ql/src/test/queries/clientpositive/groupby_resolution.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/groupby_sort_10.q ql/src/test/queries/clientpositive/groupby_sort_10.q
index 3517693d14..daf2db9476 100644
--- ql/src/test/queries/clientpositive/groupby_sort_10.q
+++ ql/src/test/queries/clientpositive/groupby_sort_10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.reducers.max = 10;
 set hive.map.groupby.sorted=true;
diff --git ql/src/test/queries/clientpositive/groupby_sort_11.q ql/src/test/queries/clientpositive/groupby_sort_11.q
index 3b6c172f54..15976942ee 100644
--- ql/src/test/queries/clientpositive/groupby_sort_11.q
+++ ql/src/test/queries/clientpositive/groupby_sort_11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.reducers.max = 1;
 set hive.map.groupby.sorted=true;
diff --git ql/src/test/queries/clientpositive/groupby_sort_5.q ql/src/test/queries/clientpositive/groupby_sort_5.q
index c7ff184cf3..1fdd404067 100644
--- ql/src/test/queries/clientpositive/groupby_sort_5.q
+++ ql/src/test/queries/clientpositive/groupby_sort_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.exec.reducers.max = 10;
 set hive.map.groupby.sorted=true;
diff --git ql/src/test/queries/clientpositive/groupby_sort_7.q ql/src/test/queries/clientpositive/groupby_sort_7.q
index 07b56a276d..f0aea3593d 100644
--- ql/src/test/queries/clientpositive/groupby_sort_7.q
+++ ql/src/test/queries/clientpositive/groupby_sort_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.exec.reducers.max = 10;
 set hive.map.groupby.sorted=true;
diff --git ql/src/test/queries/clientpositive/having.q ql/src/test/queries/clientpositive/having.q
index 52bf4ab5b5..d23f2d0f64 100644
--- ql/src/test/queries/clientpositive/having.q
+++ ql/src/test/queries/clientpositive/having.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/having2.q ql/src/test/queries/clientpositive/having2.q
index 7b35365754..6b34b68c45 100644
--- ql/src/test/queries/clientpositive/having2.q
+++ ql/src/test/queries/clientpositive/having2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 CREATE TABLE TestV1_Staples (
diff --git ql/src/test/queries/clientpositive/hll.q ql/src/test/queries/clientpositive/hll.q
index 91c4e788d3..b6b67e23dc 100644
--- ql/src/test/queries/clientpositive/hll.q
+++ ql/src/test/queries/clientpositive/hll.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 create table n(key int);
diff --git ql/src/test/queries/clientpositive/hook_order.q ql/src/test/queries/clientpositive/hook_order.q
index 7602731482..ac92b9b3be 100644
--- ql/src/test/queries/clientpositive/hook_order.q
+++ ql/src/test/queries/clientpositive/hook_order.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.query.reexecution.enabled=false;
 
 SET hive.exec.pre.hooks=org.apache.hadoop.hive.ql.hooks.VerifyHooksRunInOrder$RunFirst,org.apache.hadoop.hive.ql.hooks.VerifyHooksRunInOrder$RunSecond;
diff --git ql/src/test/queries/clientpositive/hybridgrace_hashjoin_1.q ql/src/test/queries/clientpositive/hybridgrace_hashjoin_1.q
index 8955b6a651..30cf8c4bb9 100644
--- ql/src/test/queries/clientpositive/hybridgrace_hashjoin_1.q
+++ ql/src/test/queries/clientpositive/hybridgrace_hashjoin_1.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.stats.column.autogather=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/hybridgrace_hashjoin_2.q ql/src/test/queries/clientpositive/hybridgrace_hashjoin_2.q
index b9923f61f3..d989ca7dc8 100644
--- ql/src/test/queries/clientpositive/hybridgrace_hashjoin_2.q
+++ ql/src/test/queries/clientpositive/hybridgrace_hashjoin_2.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- Hybrid Grace Hash Join
diff --git ql/src/test/queries/clientpositive/identity_project_remove_skip.q ql/src/test/queries/clientpositive/identity_project_remove_skip.q
index cbd2cc064c..96917b0f0c 100644
--- ql/src/test/queries/clientpositive/identity_project_remove_skip.q
+++ ql/src/test/queries/clientpositive/identity_project_remove_skip.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.remove.identity.project=true;
 set hive.auto.convert.join=true;
 set hive.optimize.ppd=true;
diff --git ql/src/test/queries/clientpositive/implicit_cast_during_insert.q ql/src/test/queries/clientpositive/implicit_cast_during_insert.q
index 808ad6681f..acec29639e 100644
--- ql/src/test/queries/clientpositive/implicit_cast_during_insert.q
+++ ql/src/test/queries/clientpositive/implicit_cast_during_insert.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create table implicit_cast_during_insert (c1 int, c2 string)
   partitioned by (p1 string) stored as orc;
diff --git ql/src/test/queries/clientpositive/infer_bucket_sort.q ql/src/test/queries/clientpositive/infer_bucket_sort.q
index 3423299a5d..39789250c6 100644
--- ql/src/test/queries/clientpositive/infer_bucket_sort.q
+++ ql/src/test/queries/clientpositive/infer_bucket_sort.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.exec.infer.bucket.sort=true;
 
diff --git ql/src/test/queries/clientpositive/infer_bucket_sort_bucketed_table.q ql/src/test/queries/clientpositive/infer_bucket_sort_bucketed_table.q
index 72682c5415..0d4fcedc97 100644
--- ql/src/test/queries/clientpositive/infer_bucket_sort_bucketed_table.q
+++ ql/src/test/queries/clientpositive/infer_bucket_sort_bucketed_table.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 
 
 set hive.exec.infer.bucket.sort=true;
diff --git ql/src/test/queries/clientpositive/infer_bucket_sort_convert_join.q ql/src/test/queries/clientpositive/infer_bucket_sort_convert_join.q
index e4170283f3..10b5d4f85c 100644
--- ql/src/test/queries/clientpositive/infer_bucket_sort_convert_join.q
+++ ql/src/test/queries/clientpositive/infer_bucket_sort_convert_join.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.stats.column.autogather=false;
 -- sounds weird:
 -- on master, when auto=true, hive.mapjoin.localtask.max.memory.usage will be 0.55 as there is a gby
diff --git ql/src/test/queries/clientpositive/infer_bucket_sort_dyn_part.q ql/src/test/queries/clientpositive/infer_bucket_sort_dyn_part.q
index 5b5bf8e3f9..155b78de85 100644
--- ql/src/test/queries/clientpositive/infer_bucket_sort_dyn_part.q
+++ ql/src/test/queries/clientpositive/infer_bucket_sort_dyn_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/infer_bucket_sort_grouping_operators.q ql/src/test/queries/clientpositive/infer_bucket_sort_grouping_operators.q
index e1a6ead58d..f3f22ae34e 100644
--- ql/src/test/queries/clientpositive/infer_bucket_sort_grouping_operators.q
+++ ql/src/test/queries/clientpositive/infer_bucket_sort_grouping_operators.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.exec.infer.bucket.sort=true;
 
diff --git ql/src/test/queries/clientpositive/infer_bucket_sort_list_bucket.q ql/src/test/queries/clientpositive/infer_bucket_sort_list_bucket.q
index 64dd05db68..547946822a 100644
--- ql/src/test/queries/clientpositive/infer_bucket_sort_list_bucket.q
+++ ql/src/test/queries/clientpositive/infer_bucket_sort_list_bucket.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.merge.mapfiles=false;
 set hive.merge.mapredfiles=false; 
 set mapred.input.dir.recursive=true;
diff --git ql/src/test/queries/clientpositive/infer_bucket_sort_map_operators.q ql/src/test/queries/clientpositive/infer_bucket_sort_map_operators.q
index 1a778fa362..782145b82a 100644
--- ql/src/test/queries/clientpositive/infer_bucket_sort_map_operators.q
+++ ql/src/test/queries/clientpositive/infer_bucket_sort_map_operators.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.exec.infer.bucket.sort=true;
 ;
diff --git ql/src/test/queries/clientpositive/infer_bucket_sort_merge.q ql/src/test/queries/clientpositive/infer_bucket_sort_merge.q
index f8cde4bdf2..cf44041eff 100644
--- ql/src/test/queries/clientpositive/infer_bucket_sort_merge.q
+++ ql/src/test/queries/clientpositive/infer_bucket_sort_merge.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.exec.infer.bucket.sort=true;
 set hive.exec.infer.bucket.sort.num.buckets.power.two=true;
diff --git ql/src/test/queries/clientpositive/infer_bucket_sort_multi_insert.q ql/src/test/queries/clientpositive/infer_bucket_sort_multi_insert.q
index 3341df0893..73f760934a 100644
--- ql/src/test/queries/clientpositive/infer_bucket_sort_multi_insert.q
+++ ql/src/test/queries/clientpositive/infer_bucket_sort_multi_insert.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.exec.infer.bucket.sort=true;
 set hive.exec.infer.bucket.sort.num.buckets.power.two=true;
 set hive.stats.dbclass=fs;
diff --git ql/src/test/queries/clientpositive/infer_bucket_sort_num_buckets.q ql/src/test/queries/clientpositive/infer_bucket_sort_num_buckets.q
index 2255bdb349..23839782c6 100644
--- ql/src/test/queries/clientpositive/infer_bucket_sort_num_buckets.q
+++ ql/src/test/queries/clientpositive/infer_bucket_sort_num_buckets.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.exec.infer.bucket.sort=true;
 set hive.merge.mapfiles=false;
 set hive.merge.mapredfiles=false;
diff --git ql/src/test/queries/clientpositive/infer_bucket_sort_reducers_power_two.q ql/src/test/queries/clientpositive/infer_bucket_sort_reducers_power_two.q
index c0ddb8bce6..c017502df5 100644
--- ql/src/test/queries/clientpositive/infer_bucket_sort_reducers_power_two.q
+++ ql/src/test/queries/clientpositive/infer_bucket_sort_reducers_power_two.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.stats.column.autogather=false;
 set hive.mapred.mode=nonstrict;
 set hive.exec.infer.bucket.sort=true;
diff --git ql/src/test/queries/clientpositive/infer_join_preds.q ql/src/test/queries/clientpositive/infer_join_preds.q
index c2e0d091f6..89827a2d98 100644
--- ql/src/test/queries/clientpositive/infer_join_preds.q
+++ ql/src/test/queries/clientpositive/infer_join_preds.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 explain
diff --git ql/src/test/queries/clientpositive/innerjoin.q ql/src/test/queries/clientpositive/innerjoin.q
index dd77ddd89b..9d38879159 100644
--- ql/src/test/queries/clientpositive/innerjoin.q
+++ ql/src/test/queries/clientpositive/innerjoin.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 
diff --git ql/src/test/queries/clientpositive/input.q ql/src/test/queries/clientpositive/input.q
index 567d3b07f7..d7c427650e 100644
--- ql/src/test/queries/clientpositive/input.q
+++ ql/src/test/queries/clientpositive/input.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 SELECT x.* FROM SRC x;
 
diff --git ql/src/test/queries/clientpositive/input0.q ql/src/test/queries/clientpositive/input0.q
index 63857c7791..3cf9a37434 100644
--- ql/src/test/queries/clientpositive/input0.q
+++ ql/src/test/queries/clientpositive/input0.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 SELECT * FROM src; 
 
diff --git ql/src/test/queries/clientpositive/input11.q ql/src/test/queries/clientpositive/input11.q
index c83135781c..788e8e6a5f 100644
--- ql/src/test/queries/clientpositive/input11.q
+++ ql/src/test/queries/clientpositive/input11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/input11_limit.q ql/src/test/queries/clientpositive/input11_limit.q
index 211c37adc5..c5e500778b 100644
--- ql/src/test/queries/clientpositive/input11_limit.q
+++ ql/src/test/queries/clientpositive/input11_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/input12.q ql/src/test/queries/clientpositive/input12.q
index b4ec1f186f..5b812ff036 100644
--- ql/src/test/queries/clientpositive/input12.q
+++ ql/src/test/queries/clientpositive/input12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set mapreduce.framework.name=yarn;
 set mapreduce.jobtracker.address=localhost:58;
diff --git ql/src/test/queries/clientpositive/input12_hadoop20.q ql/src/test/queries/clientpositive/input12_hadoop20.q
index 17ee0a8262..3c00101a51 100644
--- ql/src/test/queries/clientpositive/input12_hadoop20.q
+++ ql/src/test/queries/clientpositive/input12_hadoop20.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set mapred.job.tracker=localhost:58;
 set hive.exec.mode.local.auto=true;
 
diff --git ql/src/test/queries/clientpositive/input13.q ql/src/test/queries/clientpositive/input13.q
index 02be927502..5f274f650b 100644
--- ql/src/test/queries/clientpositive/input13.q
+++ ql/src/test/queries/clientpositive/input13.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 CREATE TABLE dest2(key INT, value STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/input14.q ql/src/test/queries/clientpositive/input14.q
index e854acfc6f..5ddee8a27a 100644
--- ql/src/test/queries/clientpositive/input14.q
+++ ql/src/test/queries/clientpositive/input14.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input14_limit.q ql/src/test/queries/clientpositive/input14_limit.q
index 2f6e4e47c9..fee94a34b5 100644
--- ql/src/test/queries/clientpositive/input14_limit.q
+++ ql/src/test/queries/clientpositive/input14_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/input17.q ql/src/test/queries/clientpositive/input17.q
index d348c406c4..bd7cd02362 100644
--- ql/src/test/queries/clientpositive/input17.q
+++ ql/src/test/queries/clientpositive/input17.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input18.q ql/src/test/queries/clientpositive/input18.q
index 280fb7b351..3481f01e53 100644
--- ql/src/test/queries/clientpositive/input18.q
+++ ql/src/test/queries/clientpositive/input18.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input1_limit.q ql/src/test/queries/clientpositive/input1_limit.q
index afea986198..384976aa83 100644
--- ql/src/test/queries/clientpositive/input1_limit.q
+++ ql/src/test/queries/clientpositive/input1_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/input2.q ql/src/test/queries/clientpositive/input2.q
index 00693851ef..c7b0d3024a 100644
--- ql/src/test/queries/clientpositive/input2.q
+++ ql/src/test/queries/clientpositive/input2.q
@@ -3,10 +3,10 @@ DESCRIBE TEST2a;
 DESC TEST2a;
 CREATE TABLE TEST2b(A ARRAY<INT>, B DOUBLE, C MAP<DOUBLE, INT>) STORED AS TEXTFILE;
 DESCRIBE TEST2b;
-SHOW TABLES;
+SHOW TABLES LIKE "TEST2*";
 DROP TABLE TEST2a;
-SHOW TABLES;
+SHOW TABLES LIKE "TEST2*";
 DROP TABLE TEST2b;
 
 EXPLAIN
-SHOW TABLES;
+SHOW TABLES LIKE "TEST2*";
diff --git ql/src/test/queries/clientpositive/input20.q ql/src/test/queries/clientpositive/input20.q
index 3c2f78fef3..c4435382da 100644
--- ql/src/test/queries/clientpositive/input20.q
+++ ql/src/test/queries/clientpositive/input20.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 ADD FILE ../../data/scripts/input20_script.py;
diff --git ql/src/test/queries/clientpositive/input23.q ql/src/test/queries/clientpositive/input23.q
index 9df92b08e8..b122821fbd 100644
--- ql/src/test/queries/clientpositive/input23.q
+++ ql/src/test/queries/clientpositive/input23.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 explain extended
  select * from srcpart a join srcpart b where a.ds = '2008-04-08' and a.hr = '11' and b.ds = '2008-04-08' and b.hr = '14' limit 5;
diff --git ql/src/test/queries/clientpositive/input26.q ql/src/test/queries/clientpositive/input26.q
index 549ab2109c..79f5dbffac 100644
--- ql/src/test/queries/clientpositive/input26.q
+++ ql/src/test/queries/clientpositive/input26.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 explain
 select * from (
diff --git ql/src/test/queries/clientpositive/input28.q ql/src/test/queries/clientpositive/input28.q
index 49479ed3a9..edab7dd9af 100644
--- ql/src/test/queries/clientpositive/input28.q
+++ ql/src/test/queries/clientpositive/input28.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 create table tst(a string, b string) partitioned by (d string);
diff --git ql/src/test/queries/clientpositive/input2_limit.q ql/src/test/queries/clientpositive/input2_limit.q
index a9a324d259..b43d8adecd 100644
--- ql/src/test/queries/clientpositive/input2_limit.q
+++ ql/src/test/queries/clientpositive/input2_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 EXPLAIN
 SELECT x.* FROM SRC x WHERE x.key < 300 LIMIT 5;
diff --git ql/src/test/queries/clientpositive/input3.q ql/src/test/queries/clientpositive/input3.q
index 1925fff5c5..07d75bdb29 100644
--- ql/src/test/queries/clientpositive/input3.q
+++ ql/src/test/queries/clientpositive/input3.q
@@ -1,17 +1,17 @@
-CREATE TABLE TEST3a(A INT, B DOUBLE) STORED AS TEXTFILE; 
-DESCRIBE TEST3a; 
-CREATE TABLE TEST3b(A ARRAY<INT>, B DOUBLE, C MAP<DOUBLE, INT>) STORED AS TEXTFILE; 
-DESCRIBE TEST3b; 
-SHOW TABLES;
+CREATE TABLE TEST3a(A INT, B DOUBLE) STORED AS TEXTFILE;
+DESCRIBE TEST3a;
+CREATE TABLE TEST3b(A ARRAY<INT>, B DOUBLE, C MAP<DOUBLE, INT>) STORED AS TEXTFILE;
+DESCRIBE TEST3b;
+SHOW TABLES LIKE "TEST3*";
 EXPLAIN
 ALTER TABLE TEST3b ADD COLUMNS (X DOUBLE);
 ALTER TABLE TEST3b ADD COLUMNS (X DOUBLE);
-DESCRIBE TEST3b; 
+DESCRIBE TEST3b;
 EXPLAIN
 ALTER TABLE TEST3b RENAME TO TEST3c;
 ALTER TABLE TEST3b RENAME TO TEST3c;
-DESCRIBE TEST3c; 
-SHOW TABLES;
+DESCRIBE TEST3c;
+SHOW TABLES LIKE "TEST3*";
 set hive.metastore.disallow.incompatible.col.type.changes=false;
 EXPLAIN
 ALTER TABLE TEST3c REPLACE COLUMNS (R1 INT, R2 DOUBLE);
diff --git ql/src/test/queries/clientpositive/input30.q ql/src/test/queries/clientpositive/input30.q
index 5da18d0684..362c76a505 100644
--- ql/src/test/queries/clientpositive/input30.q
+++ ql/src/test/queries/clientpositive/input30.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/input31.q ql/src/test/queries/clientpositive/input31.q
index 56093ebcd0..eb481666dc 100644
--- ql/src/test/queries/clientpositive/input31.q
+++ ql/src/test/queries/clientpositive/input31.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/input32.q ql/src/test/queries/clientpositive/input32.q
index 6953caa76a..bbb304812e 100644
--- ql/src/test/queries/clientpositive/input32.q
+++ ql/src/test/queries/clientpositive/input32.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcbucket
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/input33.q ql/src/test/queries/clientpositive/input33.q
index 3309045dc1..4398ebfee2 100644
--- ql/src/test/queries/clientpositive/input33.q
+++ ql/src/test/queries/clientpositive/input33.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 ADD FILE ../../data/scripts/input20_script.py;
diff --git ql/src/test/queries/clientpositive/input34.q ql/src/test/queries/clientpositive/input34.q
index c600bf57e4..06fe223687 100644
--- ql/src/test/queries/clientpositive/input34.q
+++ ql/src/test/queries/clientpositive/input34.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input35.q ql/src/test/queries/clientpositive/input35.q
index 5e37ea370a..e4435c64e0 100644
--- ql/src/test/queries/clientpositive/input35.q
+++ ql/src/test/queries/clientpositive/input35.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input36.q ql/src/test/queries/clientpositive/input36.q
index fd1968f683..6e97cb8c8a 100644
--- ql/src/test/queries/clientpositive/input36.q
+++ ql/src/test/queries/clientpositive/input36.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input38.q ql/src/test/queries/clientpositive/input38.q
index 1ccc5f26a6..1639764e5f 100644
--- ql/src/test/queries/clientpositive/input38.q
+++ ql/src/test/queries/clientpositive/input38.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 CREATE TABLE dest1(key STRING, value STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/input39.q ql/src/test/queries/clientpositive/input39.q
index 471736b3ed..5dd837298b 100644
--- ql/src/test/queries/clientpositive/input39.q
+++ ql/src/test/queries/clientpositive/input39.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS( 0.20S)
 
 
diff --git ql/src/test/queries/clientpositive/input39_hadoop20.q ql/src/test/queries/clientpositive/input39_hadoop20.q
index 29e9fae1da..ad5207d8f2 100644
--- ql/src/test/queries/clientpositive/input39_hadoop20.q
+++ ql/src/test/queries/clientpositive/input39_hadoop20.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- INCLUDE_HADOOP_MAJOR_VERSIONS(0.20, 0.20S)
 
 
diff --git ql/src/test/queries/clientpositive/input41.q ql/src/test/queries/clientpositive/input41.q
index 5bc396e311..311a8e307e 100644
--- ql/src/test/queries/clientpositive/input41.q
+++ ql/src/test/queries/clientpositive/input41.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=strict;
 
 create table dest_sp (cnt int);
diff --git ql/src/test/queries/clientpositive/input42.q ql/src/test/queries/clientpositive/input42.q
index a6874501a3..58685f84ab 100644
--- ql/src/test/queries/clientpositive/input42.q
+++ ql/src/test/queries/clientpositive/input42.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/input43.q ql/src/test/queries/clientpositive/input43.q
index 3182bbef39..bea0c3f562 100644
--- ql/src/test/queries/clientpositive/input43.q
+++ ql/src/test/queries/clientpositive/input43.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 drop table tst_src1;
 create table tst_src1 like src1;
 load data local inpath '../../data/files/kv1.txt' into table tst_src1 ;
diff --git ql/src/test/queries/clientpositive/input44.q ql/src/test/queries/clientpositive/input44.q
index 2e975e58c1..cd99ad0f93 100644
--- ql/src/test/queries/clientpositive/input44.q
+++ ql/src/test/queries/clientpositive/input44.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest(key INT, value STRING) STORED AS TEXTFILE;
 
 SET hive.output.file.extension=.txt;
diff --git ql/src/test/queries/clientpositive/input45.q ql/src/test/queries/clientpositive/input45.q
index 334da264d6..9d6d06be8d 100644
--- ql/src/test/queries/clientpositive/input45.q
+++ ql/src/test/queries/clientpositive/input45.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.insert.into.multilevel.dirs=true;
 
 SET hive.output.file.extension=.txt;
diff --git ql/src/test/queries/clientpositive/input46.q ql/src/test/queries/clientpositive/input46.q
index ab863dc394..cb18390898 100644
--- ql/src/test/queries/clientpositive/input46.q
+++ ql/src/test/queries/clientpositive/input46.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create database if not exists table_in_database_creation;
 create table table_in_database_creation.test1  as select * from src limit 1;
 create table `table_in_database_creation`.`test2` as select * from src limit 1;
diff --git ql/src/test/queries/clientpositive/input49.q ql/src/test/queries/clientpositive/input49.q
index 53fa51a6d3..92e02a98c5 100644
--- ql/src/test/queries/clientpositive/input49.q
+++ ql/src/test/queries/clientpositive/input49.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table intable (b boolean, d double, f float, i int, l bigint, s string, t tinyint);
 insert overwrite table intable select 0, 29098519.0, 1410.0, 996, 40408519555, "test_string", 12 from src limit 1;
 select * from intable where d in (29098519.0) and f in (1410.0) and i in (996) and l in (40408519555) and s in ('test_string') and t in (12);
diff --git ql/src/test/queries/clientpositive/input4_limit.q ql/src/test/queries/clientpositive/input4_limit.q
index e6e3c467fc..ee8b52ea98 100644
--- ql/src/test/queries/clientpositive/input4_limit.q
+++ ql/src/test/queries/clientpositive/input4_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain
 select * from src sort by key limit 10;
 
diff --git ql/src/test/queries/clientpositive/input5.q ql/src/test/queries/clientpositive/input5.q
index 2af9163da8..8a2a34b0d7 100644
--- ql/src/test/queries/clientpositive/input5.q
+++ ql/src/test/queries/clientpositive/input5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 CREATE TABLE dest1(key STRING, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input6.q ql/src/test/queries/clientpositive/input6.q
index 4f2f17e49b..9d6ffc8491 100644
--- ql/src/test/queries/clientpositive/input6.q
+++ ql/src/test/queries/clientpositive/input6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 CREATE TABLE dest1(key STRING, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input7.q ql/src/test/queries/clientpositive/input7.q
index f2e1ed0d3d..11ce7ea74f 100644
--- ql/src/test/queries/clientpositive/input7.q
+++ ql/src/test/queries/clientpositive/input7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 CREATE TABLE dest1(c1 DOUBLE, c2 INT) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input8.q ql/src/test/queries/clientpositive/input8.q
index cf24a55703..14b0e99022 100644
--- ql/src/test/queries/clientpositive/input8.q
+++ ql/src/test/queries/clientpositive/input8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(c1 STRING, c2 INT, c3 DOUBLE) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/input9.q ql/src/test/queries/clientpositive/input9.q
index ded20a81c6..5235098170 100644
--- ql/src/test/queries/clientpositive/input9.q
+++ ql/src/test/queries/clientpositive/input9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 CREATE TABLE dest1(value STRING, key INT) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input_columnarserde.q ql/src/test/queries/clientpositive/input_columnarserde.q
index 9394382b2b..b94b837684 100644
--- ql/src/test/queries/clientpositive/input_columnarserde.q
+++ ql/src/test/queries/clientpositive/input_columnarserde.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 
 CREATE TABLE input_columnarserde(a array<int>, b array<string>, c map<string,string>, d int, e string)
 ROW FORMAT SERDE
diff --git ql/src/test/queries/clientpositive/input_dynamicserde.q ql/src/test/queries/clientpositive/input_dynamicserde.q
index 14377429fd..4c63a3545a 100644
--- ql/src/test/queries/clientpositive/input_dynamicserde.q
+++ ql/src/test/queries/clientpositive/input_dynamicserde.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 CREATE TABLE dest1(a array<int>, b array<string>, c map<string,string>, d int, e string)
 ROW FORMAT DELIMITED
 FIELDS TERMINATED BY '1'
diff --git ql/src/test/queries/clientpositive/input_lazyserde.q ql/src/test/queries/clientpositive/input_lazyserde.q
index c29cb82dac..1fb1ecc837 100644
--- ql/src/test/queries/clientpositive/input_lazyserde.q
+++ ql/src/test/queries/clientpositive/input_lazyserde.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcbucket2
+--! qt:dataset:src_thrift
 -- SORT_QUERY_RESULTS
 
 DROP TABLE dest1;
diff --git ql/src/test/queries/clientpositive/input_lazyserde2.q ql/src/test/queries/clientpositive/input_lazyserde2.q
index 0f5890707c..dd8481021a 100644
--- ql/src/test/queries/clientpositive/input_lazyserde2.q
+++ ql/src/test/queries/clientpositive/input_lazyserde2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcbucket2
+--! qt:dataset:src_thrift
 -- SORT_QUERY_RESULTS
 
 DROP TABLE dest1;
diff --git ql/src/test/queries/clientpositive/input_limit.q ql/src/test/queries/clientpositive/input_limit.q
index 6d4363e590..c0a17eb46f 100644
--- ql/src/test/queries/clientpositive/input_limit.q
+++ ql/src/test/queries/clientpositive/input_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 SELECT x.* FROM SRC x LIMIT 20;
 
diff --git ql/src/test/queries/clientpositive/input_part0.q ql/src/test/queries/clientpositive/input_part0.q
index e5526e5541..c5ac3f555e 100644
--- ql/src/test/queries/clientpositive/input_part0.q
+++ ql/src/test/queries/clientpositive/input_part0.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 EXPLAIN
 SELECT x.* FROM SRCPART x WHERE x.ds = '2008-04-08';
 
diff --git ql/src/test/queries/clientpositive/input_part1.q ql/src/test/queries/clientpositive/input_part1.q
index 0a3a3b42d1..4bfc85da09 100644
--- ql/src/test/queries/clientpositive/input_part1.q
+++ ql/src/test/queries/clientpositive/input_part1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(key INT, value STRING, hr STRING, ds STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/input_part10.q ql/src/test/queries/clientpositive/input_part10.q
index e6d6c22640..833f5f7ecb 100644
--- ql/src/test/queries/clientpositive/input_part10.q
+++ ql/src/test/queries/clientpositive/input_part10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE part_special (
   a STRING,
   b STRING
diff --git ql/src/test/queries/clientpositive/input_part2.q ql/src/test/queries/clientpositive/input_part2.q
index aff02e3c24..9df97a7156 100644
--- ql/src/test/queries/clientpositive/input_part2.q
+++ ql/src/test/queries/clientpositive/input_part2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 CREATE TABLE dest1(key INT, value STRING, hr STRING, ds STRING) STORED AS TEXTFILE;
 CREATE TABLE dest2(key INT, value STRING, hr STRING, ds STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/input_part3.q ql/src/test/queries/clientpositive/input_part3.q
index ea1d2b2408..b8e8149ec2 100644
--- ql/src/test/queries/clientpositive/input_part3.q
+++ ql/src/test/queries/clientpositive/input_part3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 EXPLAIN
 SELECT x.* FROM SRCPART x WHERE x.ds = '2008-04-08' and x.hr = 11;
 
diff --git ql/src/test/queries/clientpositive/input_part4.q ql/src/test/queries/clientpositive/input_part4.q
index 7c2e0aaa86..c9414699da 100644
--- ql/src/test/queries/clientpositive/input_part4.q
+++ ql/src/test/queries/clientpositive/input_part4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 EXPLAIN
 SELECT x.* FROM SRCPART x WHERE x.ds = '2008-04-08' and x.hr = 15;
diff --git ql/src/test/queries/clientpositive/input_part5.q ql/src/test/queries/clientpositive/input_part5.q
index 029aa0518a..62d76cbfe8 100644
--- ql/src/test/queries/clientpositive/input_part5.q
+++ ql/src/test/queries/clientpositive/input_part5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 
 create table tmptable(key string, value string, hr string, ds string);
diff --git ql/src/test/queries/clientpositive/input_part6.q ql/src/test/queries/clientpositive/input_part6.q
index dd43a83b2b..c2f805d8ba 100644
--- ql/src/test/queries/clientpositive/input_part6.q
+++ ql/src/test/queries/clientpositive/input_part6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 EXPLAIN
 SELECT x.* FROM SRCPART x WHERE x.ds = "2008-04-08" LIMIT 10;
diff --git ql/src/test/queries/clientpositive/input_part7.q ql/src/test/queries/clientpositive/input_part7.q
index 10f9336adc..9a53014f55 100644
--- ql/src/test/queries/clientpositive/input_part7.q
+++ ql/src/test/queries/clientpositive/input_part7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 EXPLAIN EXTENDED
 SELECT * FROM (
   SELECT X.* FROM SRCPART X WHERE X.ds = '2008-04-08' and X.key < 100
diff --git ql/src/test/queries/clientpositive/input_part8.q ql/src/test/queries/clientpositive/input_part8.q
index 6f1c9ec88f..3f18331600 100644
--- ql/src/test/queries/clientpositive/input_part8.q
+++ ql/src/test/queries/clientpositive/input_part8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 EXPLAIN
 SELECT x.* FROM SRCPART x WHERE ds = '2008-04-08' LIMIT 10;
 
diff --git ql/src/test/queries/clientpositive/input_part9.q ql/src/test/queries/clientpositive/input_part9.q
index d48f9909f2..a2a009a60e 100644
--- ql/src/test/queries/clientpositive/input_part9.q
+++ ql/src/test/queries/clientpositive/input_part9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/input_testsequencefile.q ql/src/test/queries/clientpositive/input_testsequencefile.q
index d9926888ce..1e70cff19e 100755
--- ql/src/test/queries/clientpositive/input_testsequencefile.q
+++ ql/src/test/queries/clientpositive/input_testsequencefile.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set mapred.output.compress=true;
 set mapred.output.compression.type=BLOCK;
 
diff --git ql/src/test/queries/clientpositive/input_testxpath.q ql/src/test/queries/clientpositive/input_testxpath.q
index ed22404500..368feb6f97 100755
--- ql/src/test/queries/clientpositive/input_testxpath.q
+++ ql/src/test/queries/clientpositive/input_testxpath.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 CREATE TABLE dest1(key INT, value STRING, mapvalue STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input_testxpath2.q ql/src/test/queries/clientpositive/input_testxpath2.q
index 131105b763..7c7b1fe579 100644
--- ql/src/test/queries/clientpositive/input_testxpath2.q
+++ ql/src/test/queries/clientpositive/input_testxpath2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 CREATE TABLE dest1(lint_size INT, lintstring_size INT, mstringstring_size INT) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/input_testxpath3.q ql/src/test/queries/clientpositive/input_testxpath3.q
index 1b57ead822..c37eec331c 100644
--- ql/src/test/queries/clientpositive/input_testxpath3.q
+++ ql/src/test/queries/clientpositive/input_testxpath3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 EXPLAIN
 FROM src_thrift
 SELECT src_thrift.mstringstring['key_9'], src_thrift.lintstring.myint;
diff --git ql/src/test/queries/clientpositive/input_testxpath4.q ql/src/test/queries/clientpositive/input_testxpath4.q
index e8e8d2ef52..b0d21fc3af 100644
--- ql/src/test/queries/clientpositive/input_testxpath4.q
+++ ql/src/test/queries/clientpositive/input_testxpath4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 set hive.optimize.ppd=false;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/inputwherefalse.q ql/src/test/queries/clientpositive/inputwherefalse.q
index 4605ac65a0..bf498ac7df 100644
--- ql/src/test/queries/clientpositive/inputwherefalse.q
+++ ql/src/test/queries/clientpositive/inputwherefalse.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 From (select * from src) a
 insert overwrite directory 'target/warehouse/destemp.out/dir1/'
 select key
diff --git ql/src/test/queries/clientpositive/insert0.q ql/src/test/queries/clientpositive/insert0.q
index 7e687acb61..85f73a0629 100644
--- ql/src/test/queries/clientpositive/insert0.q
+++ ql/src/test/queries/clientpositive/insert0.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 
diff --git ql/src/test/queries/clientpositive/insert1.q ql/src/test/queries/clientpositive/insert1.q
index 4117b54b50..91daf7efb3 100644
--- ql/src/test/queries/clientpositive/insert1.q
+++ ql/src/test/queries/clientpositive/insert1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/insert2.q ql/src/test/queries/clientpositive/insert2.q
index 669e4c32c5..272d7df0e0 100644
--- ql/src/test/queries/clientpositive/insert2.q
+++ ql/src/test/queries/clientpositive/insert2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set fs.defaultFS=file:///;
 
diff --git ql/src/test/queries/clientpositive/insert_acid_dynamic_partition.q ql/src/test/queries/clientpositive/insert_acid_dynamic_partition.q
index 2025d534d0..f36294d34d 100644
--- ql/src/test/queries/clientpositive/insert_acid_dynamic_partition.q
+++ ql/src/test/queries/clientpositive/insert_acid_dynamic_partition.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/insert_acid_not_bucketed.q ql/src/test/queries/clientpositive/insert_acid_not_bucketed.q
index 9e61fd7cd3..b4058d79c5 100644
--- ql/src/test/queries/clientpositive/insert_acid_not_bucketed.q
+++ ql/src/test/queries/clientpositive/insert_acid_not_bucketed.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 
diff --git ql/src/test/queries/clientpositive/insert_after_drop_partition.q ql/src/test/queries/clientpositive/insert_after_drop_partition.q
index 0087560a87..a17d03d950 100644
--- ql/src/test/queries/clientpositive/insert_after_drop_partition.q
+++ ql/src/test/queries/clientpositive/insert_after_drop_partition.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create external table insert_after_drop_partition(key string, val string) partitioned by (insertdate string);
 
 insert overwrite table insert_after_drop_partition partition (insertdate='2008-01-01') select * from src limit 10;
diff --git ql/src/test/queries/clientpositive/insert_compressed.q ql/src/test/queries/clientpositive/insert_compressed.q
index 8f1201cd6f..ebd0d36255 100644
--- ql/src/test/queries/clientpositive/insert_compressed.q
+++ ql/src/test/queries/clientpositive/insert_compressed.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.compress.output=true;
 
 drop table insert_compressed;
diff --git ql/src/test/queries/clientpositive/insert_dir_distcp.q ql/src/test/queries/clientpositive/insert_dir_distcp.q
index 6582938e06..cea79a3ac4 100644
--- ql/src/test/queries/clientpositive/insert_dir_distcp.q
+++ ql/src/test/queries/clientpositive/insert_dir_distcp.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.copyfile.maxsize=400;
 
 set tez.am.log.level=INFO;
diff --git ql/src/test/queries/clientpositive/insert_into1.q ql/src/test/queries/clientpositive/insert_into1.q
index f00d06e0d4..6aed53fac2 100644
--- ql/src/test/queries/clientpositive/insert_into1.q
+++ ql/src/test/queries/clientpositive/insert_into1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.compute.query.using.stats=true;
 
diff --git ql/src/test/queries/clientpositive/insert_into2.q ql/src/test/queries/clientpositive/insert_into2.q
index f3e49ff5e9..10c72d8010 100644
--- ql/src/test/queries/clientpositive/insert_into2.q
+++ ql/src/test/queries/clientpositive/insert_into2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.compute.query.using.stats=true;
diff --git ql/src/test/queries/clientpositive/insert_into3.q ql/src/test/queries/clientpositive/insert_into3.q
index 4ff0edcd61..c152dd962a 100644
--- ql/src/test/queries/clientpositive/insert_into3.q
+++ ql/src/test/queries/clientpositive/insert_into3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE insert_into3a;
 DROP TABLE insert_into3b;
 
diff --git ql/src/test/queries/clientpositive/insert_into4.q ql/src/test/queries/clientpositive/insert_into4.q
index 2afe41d668..176db9fa59 100644
--- ql/src/test/queries/clientpositive/insert_into4.q
+++ ql/src/test/queries/clientpositive/insert_into4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.merge.smallfiles.avgsize=16000000;
 
 DROP TABLE insert_into4a;
diff --git ql/src/test/queries/clientpositive/insert_into5.q ql/src/test/queries/clientpositive/insert_into5.q
index 358fdf4d2e..7b42429317 100644
--- ql/src/test/queries/clientpositive/insert_into5.q
+++ ql/src/test/queries/clientpositive/insert_into5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 DROP TABLE insert_into5a;
 DROP TABLE insert_into5b;
diff --git ql/src/test/queries/clientpositive/insert_into6.q ql/src/test/queries/clientpositive/insert_into6.q
index 1e33c67a4a..a22797df8e 100644
--- ql/src/test/queries/clientpositive/insert_into6.q
+++ ql/src/test/queries/clientpositive/insert_into6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/insert_orig_table.q ql/src/test/queries/clientpositive/insert_orig_table.q
index 544fe11d42..5d173e9100 100644
--- ql/src/test/queries/clientpositive/insert_orig_table.q
+++ ql/src/test/queries/clientpositive/insert_orig_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/insert_overwrite_directory.q ql/src/test/queries/clientpositive/insert_overwrite_directory.q
index 2efe41f0ce..1180589001 100644
--- ql/src/test/queries/clientpositive/insert_overwrite_directory.q
+++ ql/src/test/queries/clientpositive/insert_overwrite_directory.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 insert overwrite directory '../../data/files/src_table_1'
 select * from src ;
 dfs -cat ../../data/files/src_table_1/000000_0;
diff --git ql/src/test/queries/clientpositive/insert_overwrite_directory2.q ql/src/test/queries/clientpositive/insert_overwrite_directory2.q
index dd337a9fdd..b58fb44c94 100644
--- ql/src/test/queries/clientpositive/insert_overwrite_directory2.q
+++ ql/src/test/queries/clientpositive/insert_overwrite_directory2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create external table result(key string) location "${system:test.tmp.dir}/result";
 
 set mapreduce.job.reduces=2;
diff --git ql/src/test/queries/clientpositive/insert_overwrite_local_directory_1.q ql/src/test/queries/clientpositive/insert_overwrite_local_directory_1.q
index 6d069f5411..9fd8d151d0 100644
--- ql/src/test/queries/clientpositive/insert_overwrite_local_directory_1.q
+++ ql/src/test/queries/clientpositive/insert_overwrite_local_directory_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 insert overwrite local directory '../../data/files/local_src_table_1'
 select * from src ;
 dfs -cat ../../data/files/local_src_table_1/000000_0;
diff --git ql/src/test/queries/clientpositive/insert_update_delete.q ql/src/test/queries/clientpositive/insert_update_delete.q
index fb00346a69..bd9f777808 100644
--- ql/src/test/queries/clientpositive/insert_update_delete.q
+++ ql/src/test/queries/clientpositive/insert_update_delete.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/insert_values_orig_table.q ql/src/test/queries/clientpositive/insert_values_orig_table.q
index 1319a0a0e5..a0fce90fc2 100644
--- ql/src/test/queries/clientpositive/insert_values_orig_table.q
+++ ql/src/test/queries/clientpositive/insert_values_orig_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/insert_values_orig_table_use_metadata.q ql/src/test/queries/clientpositive/insert_values_orig_table_use_metadata.q
index 2f366fbfb4..ff7c1a8355 100644
--- ql/src/test/queries/clientpositive/insert_values_orig_table_use_metadata.q
+++ ql/src/test/queries/clientpositive/insert_values_orig_table_use_metadata.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/insertexternal1.q ql/src/test/queries/clientpositive/insertexternal1.q
index 9004a0cce8..2e938b085c 100644
--- ql/src/test/queries/clientpositive/insertexternal1.q
+++ ql/src/test/queries/clientpositive/insertexternal1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 create table texternal(key string, val string) partitioned by (insertdate string);
diff --git ql/src/test/queries/clientpositive/intersect_all.q ql/src/test/queries/clientpositive/intersect_all.q
index a0d4afd20a..35033bef9c 100644
--- ql/src/test/queries/clientpositive/intersect_all.q
+++ ql/src/test/queries/clientpositive/intersect_all.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 
diff --git ql/src/test/queries/clientpositive/intersect_distinct.q ql/src/test/queries/clientpositive/intersect_distinct.q
index aa8155a6ae..78b515d011 100644
--- ql/src/test/queries/clientpositive/intersect_distinct.q
+++ ql/src/test/queries/clientpositive/intersect_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 
diff --git ql/src/test/queries/clientpositive/interval_1.q ql/src/test/queries/clientpositive/interval_1.q
index b3b586f0c6..4e92923b38 100644
--- ql/src/test/queries/clientpositive/interval_1.q
+++ ql/src/test/queries/clientpositive/interval_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 select
   interval '10-11' year to month,
   interval '10' year,
diff --git ql/src/test/queries/clientpositive/interval_2.q ql/src/test/queries/clientpositive/interval_2.q
index f622c7670a..869c4e5927 100644
--- ql/src/test/queries/clientpositive/interval_2.q
+++ ql/src/test/queries/clientpositive/interval_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- group-by/order-by/aggregation functions
 
 select
diff --git ql/src/test/queries/clientpositive/interval_3.q ql/src/test/queries/clientpositive/interval_3.q
index 3b05448cc7..ee0f83cdee 100644
--- ql/src/test/queries/clientpositive/interval_3.q
+++ ql/src/test/queries/clientpositive/interval_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 -- where clause
 select
diff --git ql/src/test/queries/clientpositive/interval_arithmetic.q ql/src/test/queries/clientpositive/interval_arithmetic.q
index ae1457913f..7261311f2c 100644
--- ql/src/test/queries/clientpositive/interval_arithmetic.q
+++ ql/src/test/queries/clientpositive/interval_arithmetic.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 create table interval_arithmetic_1 (dateval date, tsval timestamp);
 insert overwrite table interval_arithmetic_1
   select cast(ctimestamp1 as date), ctimestamp1 from alltypesorc;
diff --git ql/src/test/queries/clientpositive/interval_comparison.q ql/src/test/queries/clientpositive/interval_comparison.q
index 8e78664644..3d835b386b 100644
--- ql/src/test/queries/clientpositive/interval_comparison.q
+++ ql/src/test/queries/clientpositive/interval_comparison.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 -- should all be true
 select
diff --git ql/src/test/queries/clientpositive/interval_udf.q ql/src/test/queries/clientpositive/interval_udf.q
index 3fbdb0b599..636a11ee53 100644
--- ql/src/test/queries/clientpositive/interval_udf.q
+++ ql/src/test/queries/clientpositive/interval_udf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 select
   year(iym), month(iym), day(idt), hour(idt), minute(idt), second(idt)
diff --git ql/src/test/queries/clientpositive/is_distinct_from.q ql/src/test/queries/clientpositive/is_distinct_from.q
index b3d9d65c26..f135f4eb8a 100644
--- ql/src/test/queries/clientpositive/is_distinct_from.q
+++ ql/src/test/queries/clientpositive/is_distinct_from.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 explain select 1 is distinct from 1,
                1 is distinct from 2,
                1 is distinct from null,
diff --git ql/src/test/queries/clientpositive/ivyDownload.q ql/src/test/queries/clientpositive/ivyDownload.q
index 2d3c25e93a..607781c4fb 100644
--- ql/src/test/queries/clientpositive/ivyDownload.q
+++ ql/src/test/queries/clientpositive/ivyDownload.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 dfs -cp ${system:hive.root}/contrib/target/hive-contrib-${system:hive.version}.jar ${system:test.tmp.dir}/udfexampleadd-1.0.jar;
 
 ADD JAR ivy://:udfexampleadd:1.0;
diff --git ql/src/test/queries/clientpositive/jdbc_handler.q ql/src/test/queries/clientpositive/jdbc_handler.q
index 7e215504f6..2211da4139 100644
--- ql/src/test/queries/clientpositive/jdbc_handler.q
+++ ql/src/test/queries/clientpositive/jdbc_handler.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.strict.checks.cartesian.product= false;
 CREATE EXTERNAL TABLE tables
@@ -48,6 +49,4 @@ from
   on (t2.key-1) = t1.db_id
 order by a,b;
 
-show tables;
-
 describe tables;
diff --git ql/src/test/queries/clientpositive/join0.q ql/src/test/queries/clientpositive/join0.q
index 3252847703..d099ea7b54 100644
--- ql/src/test/queries/clientpositive/join0.q
+++ ql/src/test/queries/clientpositive/join0.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/join1.q ql/src/test/queries/clientpositive/join1.q
index 72bd611107..25759a8ec3 100644
--- ql/src/test/queries/clientpositive/join1.q
+++ ql/src/test/queries/clientpositive/join1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/join10.q ql/src/test/queries/clientpositive/join10.q
index c3cbfea974..3e65461158 100644
--- ql/src/test/queries/clientpositive/join10.q
+++ ql/src/test/queries/clientpositive/join10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join11.q ql/src/test/queries/clientpositive/join11.q
index 59c54c4d3e..c833574e4b 100644
--- ql/src/test/queries/clientpositive/join11.q
+++ ql/src/test/queries/clientpositive/join11.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join12.q ql/src/test/queries/clientpositive/join12.q
index 6545fae1f9..87127c3e84 100644
--- ql/src/test/queries/clientpositive/join12.q
+++ ql/src/test/queries/clientpositive/join12.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join13.q ql/src/test/queries/clientpositive/join13.q
index 4206f6aa75..1c349a374c 100644
--- ql/src/test/queries/clientpositive/join13.q
+++ ql/src/test/queries/clientpositive/join13.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join14.q ql/src/test/queries/clientpositive/join14.q
index d4bc0aeebd..d233b4257d 100644
--- ql/src/test/queries/clientpositive/join14.q
+++ ql/src/test/queries/clientpositive/join14.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 -- EXCLUDE_HADOOP_MAJOR_VERSIONS(0.20S)
diff --git ql/src/test/queries/clientpositive/join14_hadoop20.q ql/src/test/queries/clientpositive/join14_hadoop20.q
index a12ef1afb0..e9107b5d0e 100644
--- ql/src/test/queries/clientpositive/join14_hadoop20.q
+++ ql/src/test/queries/clientpositive/join14_hadoop20.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 -- INCLUDE_HADOOP_MAJOR_VERSIONS(0.20, 0.20S)
 
 CREATE TABLE dest1(c1 INT, c2 STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/join15.q ql/src/test/queries/clientpositive/join15.q
index 4d2f8d5466..0ae46c5733 100644
--- ql/src/test/queries/clientpositive/join15.q
+++ ql/src/test/queries/clientpositive/join15.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/join16.q ql/src/test/queries/clientpositive/join16.q
index 901f9ca612..91565c7030 100644
--- ql/src/test/queries/clientpositive/join16.q
+++ ql/src/test/queries/clientpositive/join16.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 EXPLAIN SELECT subq.key, tab.value FROM (select a.key, a.value from src a where a.key > 10 ) subq JOIN src tab ON (subq.key = tab.key and subq.key > 20 and subq.value = tab.value) where tab.value < 200;
diff --git ql/src/test/queries/clientpositive/join17.q ql/src/test/queries/clientpositive/join17.q
index 4a7eb99135..a62b004e6d 100644
--- ql/src/test/queries/clientpositive/join17.q
+++ ql/src/test/queries/clientpositive/join17.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join18.q ql/src/test/queries/clientpositive/join18.q
index 702735d0eb..9ac2f2f0b0 100644
--- ql/src/test/queries/clientpositive/join18.q
+++ ql/src/test/queries/clientpositive/join18.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join18_multi_distinct.q ql/src/test/queries/clientpositive/join18_multi_distinct.q
index 8b3ac4dbfb..cbdf27e137 100644
--- ql/src/test/queries/clientpositive/join18_multi_distinct.q
+++ ql/src/test/queries/clientpositive/join18_multi_distinct.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/join2.q ql/src/test/queries/clientpositive/join2.q
index c3c7c241e9..074255bb63 100644
--- ql/src/test/queries/clientpositive/join2.q
+++ ql/src/test/queries/clientpositive/join2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- due to testMTQueries1
 set hive.stats.column.autogather=false;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/join20.q ql/src/test/queries/clientpositive/join20.q
index b2b1eba10d..199c4b4dc0 100644
--- ql/src/test/queries/clientpositive/join20.q
+++ ql/src/test/queries/clientpositive/join20.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/join21.q ql/src/test/queries/clientpositive/join21.q
index 8ba22843f4..796fe80cbf 100644
--- ql/src/test/queries/clientpositive/join21.q
+++ ql/src/test/queries/clientpositive/join21.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/join22.q ql/src/test/queries/clientpositive/join22.q
index 525adfe462..3a10cfc9c9 100644
--- ql/src/test/queries/clientpositive/join22.q
+++ ql/src/test/queries/clientpositive/join22.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 explain
 SELECT src5.src1_value FROM (SELECT src3.*, src4.value as src4_value, src4.key as src4_key FROM src src4 JOIN (SELECT src2.*, src1.key as src1_key, src1.value as src1_value FROM src src1 JOIN src src2 ON src1.key = src2.key) src3 ON src3.src1_key = src4.key) src5;
diff --git ql/src/test/queries/clientpositive/join23.q ql/src/test/queries/clientpositive/join23.q
index d48941a11d..bb35103b10 100644
--- ql/src/test/queries/clientpositive/join23.q
+++ ql/src/test/queries/clientpositive/join23.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join24.q ql/src/test/queries/clientpositive/join24.q
index 65c9256d6f..a0cd790a8e 100644
--- ql/src/test/queries/clientpositive/join24.q
+++ ql/src/test/queries/clientpositive/join24.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table tst1(key STRING, cnt INT);
 
 INSERT OVERWRITE TABLE tst1
diff --git ql/src/test/queries/clientpositive/join25.q ql/src/test/queries/clientpositive/join25.q
index b8d7c224b1..18eecf552c 100644
--- ql/src/test/queries/clientpositive/join25.q
+++ ql/src/test/queries/clientpositive/join25.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE dest_j1(key INT, value STRING, val2 STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/join26.q ql/src/test/queries/clientpositive/join26.q
index d34454d710..bc1e7afec6 100644
--- ql/src/test/queries/clientpositive/join26.q
+++ ql/src/test/queries/clientpositive/join26.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE dest_j1(key STRING, value STRING, val2 STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/join27.q ql/src/test/queries/clientpositive/join27.q
index d53f553d39..fb2d89ce77 100644
--- ql/src/test/queries/clientpositive/join27.q
+++ ql/src/test/queries/clientpositive/join27.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE dest_j1(key INT, value STRING, val2 STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/join28.q ql/src/test/queries/clientpositive/join28.q
index 2d96f971d5..456e21f3ab 100644
--- ql/src/test/queries/clientpositive/join28.q
+++ ql/src/test/queries/clientpositive/join28.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join29.q ql/src/test/queries/clientpositive/join29.q
index 8b631e20ee..d86eb03f29 100644
--- ql/src/test/queries/clientpositive/join29.q
+++ ql/src/test/queries/clientpositive/join29.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join3.q ql/src/test/queries/clientpositive/join3.q
index af4c51b03e..da7cfa1187 100644
--- ql/src/test/queries/clientpositive/join3.q
+++ ql/src/test/queries/clientpositive/join3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join30.q ql/src/test/queries/clientpositive/join30.q
index 004581f464..ec2bae6bbc 100644
--- ql/src/test/queries/clientpositive/join30.q
+++ ql/src/test/queries/clientpositive/join30.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE dest_j1(key INT, cnt INT);
diff --git ql/src/test/queries/clientpositive/join31.q ql/src/test/queries/clientpositive/join31.q
index 62407a057b..4fbf204c69 100644
--- ql/src/test/queries/clientpositive/join31.q
+++ ql/src/test/queries/clientpositive/join31.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.semijoin.conversion=true;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/join32.q ql/src/test/queries/clientpositive/join32.q
index d89e3c5cb5..9d3d64545f 100644
--- ql/src/test/queries/clientpositive/join32.q
+++ ql/src/test/queries/clientpositive/join32.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join32_lessSize.q ql/src/test/queries/clientpositive/join32_lessSize.q
index cffdfc7939..6114300dbf 100644
--- ql/src/test/queries/clientpositive/join32_lessSize.q
+++ ql/src/test/queries/clientpositive/join32_lessSize.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join33.q ql/src/test/queries/clientpositive/join33.q
index d89e3c5cb5..9d3d64545f 100644
--- ql/src/test/queries/clientpositive/join33.q
+++ ql/src/test/queries/clientpositive/join33.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join34.q ql/src/test/queries/clientpositive/join34.q
index 381464dd23..5077c19e3c 100644
--- ql/src/test/queries/clientpositive/join34.q
+++ ql/src/test/queries/clientpositive/join34.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join35.q ql/src/test/queries/clientpositive/join35.q
index ed41b3e2db..be3703e27b 100644
--- ql/src/test/queries/clientpositive/join35.q
+++ ql/src/test/queries/clientpositive/join35.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join36.q ql/src/test/queries/clientpositive/join36.q
index 89fbb4c963..20005dd87f 100644
--- ql/src/test/queries/clientpositive/join36.q
+++ ql/src/test/queries/clientpositive/join36.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE tmp1(key INT, cnt INT);
diff --git ql/src/test/queries/clientpositive/join37.q ql/src/test/queries/clientpositive/join37.q
index 92cae4de7c..3a19dd2e60 100644
--- ql/src/test/queries/clientpositive/join37.q
+++ ql/src/test/queries/clientpositive/join37.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE dest_j1(key INT, value STRING, val2 STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/join38.q ql/src/test/queries/clientpositive/join38.q
index ed7b9d85bd..b9f723c8e1 100644
--- ql/src/test/queries/clientpositive/join38.q
+++ ql/src/test/queries/clientpositive/join38.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 create table tmp(col0 string, col1 string,col2 string,col3 string,col4 string,col5 string,col6 string,col7 string,col8 string,col9 string,col10 string,col11 string);
diff --git ql/src/test/queries/clientpositive/join39.q ql/src/test/queries/clientpositive/join39.q
index e14a1140d2..b0358e9ed2 100644
--- ql/src/test/queries/clientpositive/join39.q
+++ ql/src/test/queries/clientpositive/join39.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE dest_j1(key STRING, value STRING, key1 string, val2 STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/join4.q ql/src/test/queries/clientpositive/join4.q
index 2ab95068b7..055ac3dd3d 100644
--- ql/src/test/queries/clientpositive/join4.q
+++ ql/src/test/queries/clientpositive/join4.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join40.q ql/src/test/queries/clientpositive/join40.q
index ee349834e9..4c983d8029 100644
--- ql/src/test/queries/clientpositive/join40.q
+++ ql/src/test/queries/clientpositive/join40.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.join.cache.size=1;
 
diff --git ql/src/test/queries/clientpositive/join41.q ql/src/test/queries/clientpositive/join41.q
index b3bea805d8..33dfcb087e 100644
--- ql/src/test/queries/clientpositive/join41.q
+++ ql/src/test/queries/clientpositive/join41.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 create table s1 as select * from src where key = 0;
 
diff --git ql/src/test/queries/clientpositive/join44.q ql/src/test/queries/clientpositive/join44.q
index 01110792ad..69aa088264 100644
--- ql/src/test/queries/clientpositive/join44.q
+++ ql/src/test/queries/clientpositive/join44.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.cbo.enable=false;
 
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/join45.q ql/src/test/queries/clientpositive/join45.q
index 54e422d2c9..c0c7717dbe 100644
--- ql/src/test/queries/clientpositive/join45.q
+++ ql/src/test/queries/clientpositive/join45.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:cbo_t1
 set hive.strict.checks.cartesian.product=false;
 
 -- Conjunction with pred on multiple inputs and single inputs
diff --git ql/src/test/queries/clientpositive/join47.q ql/src/test/queries/clientpositive/join47.q
index 705c16a622..b5345d8492 100644
--- ql/src/test/queries/clientpositive/join47.q
+++ ql/src/test/queries/clientpositive/join47.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:cbo_t1
 set hive.strict.checks.cartesian.product=false;
 set hive.join.inner.residual=true;
 
diff --git ql/src/test/queries/clientpositive/join5.q ql/src/test/queries/clientpositive/join5.q
index f9154ba1ef..0cb12d5d1a 100644
--- ql/src/test/queries/clientpositive/join5.q
+++ ql/src/test/queries/clientpositive/join5.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join6.q ql/src/test/queries/clientpositive/join6.q
index 75426854b3..4fe1885890 100644
--- ql/src/test/queries/clientpositive/join6.q
+++ ql/src/test/queries/clientpositive/join6.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(c1 INT, c2 STRING, c3 INT, c4 STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/join7.q ql/src/test/queries/clientpositive/join7.q
index d87789f365..104770709d 100644
--- ql/src/test/queries/clientpositive/join7.q
+++ ql/src/test/queries/clientpositive/join7.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(c1 INT, c2 STRING, c3 INT, c4 STRING, c5 INT, c6 STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/join8.q ql/src/test/queries/clientpositive/join8.q
index 5c3ad60c7d..292c07c36a 100644
--- ql/src/test/queries/clientpositive/join8.q
+++ ql/src/test/queries/clientpositive/join8.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join9.q ql/src/test/queries/clientpositive/join9.q
index c3d61783b3..0c17b04bc1 100644
--- ql/src/test/queries/clientpositive/join9.q
+++ ql/src/test/queries/clientpositive/join9.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join_alt_syntax.q ql/src/test/queries/clientpositive/join_alt_syntax.q
index 7bf79437f0..4b0c93b3da 100644
--- ql/src/test/queries/clientpositive/join_alt_syntax.q
+++ ql/src/test/queries/clientpositive/join_alt_syntax.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 explain select p1.p_name, p2.p_name
 from part p1 , part p2;
diff --git ql/src/test/queries/clientpositive/join_cond_pushdown_1.q ql/src/test/queries/clientpositive/join_cond_pushdown_1.q
index c59e02c307..483be0c979 100644
--- ql/src/test/queries/clientpositive/join_cond_pushdown_1.q
+++ ql/src/test/queries/clientpositive/join_cond_pushdown_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 explain select *
 from part p1 join part p2 join part p3 on p1.p_name = p2.p_name and p2.p_name = p3.p_name;
diff --git ql/src/test/queries/clientpositive/join_cond_pushdown_2.q ql/src/test/queries/clientpositive/join_cond_pushdown_2.q
index 0fa29c7534..e74f29e9f5 100644
--- ql/src/test/queries/clientpositive/join_cond_pushdown_2.q
+++ ql/src/test/queries/clientpositive/join_cond_pushdown_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 explain select *
 from part p1 join part p2 join part p3 on p1.p_name = p2.p_name join part p4 on p2.p_name = p3.p_name and p1.p_name = p4.p_name;
diff --git ql/src/test/queries/clientpositive/join_cond_pushdown_3.q ql/src/test/queries/clientpositive/join_cond_pushdown_3.q
index f9595543aa..3c05554528 100644
--- ql/src/test/queries/clientpositive/join_cond_pushdown_3.q
+++ ql/src/test/queries/clientpositive/join_cond_pushdown_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 explain select *
 from part p1 join part p2 join part p3 
diff --git ql/src/test/queries/clientpositive/join_cond_pushdown_4.q ql/src/test/queries/clientpositive/join_cond_pushdown_4.q
index ee52342250..9f7945e96e 100644
--- ql/src/test/queries/clientpositive/join_cond_pushdown_4.q
+++ ql/src/test/queries/clientpositive/join_cond_pushdown_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 explain select *
 from part p1 join part p2 join part p3 on p1.p_name = p2.p_name join part p4 
diff --git ql/src/test/queries/clientpositive/join_cond_pushdown_unqual1.q ql/src/test/queries/clientpositive/join_cond_pushdown_unqual1.q
index a8aade85fd..2be8dcc846 100644
--- ql/src/test/queries/clientpositive/join_cond_pushdown_unqual1.q
+++ ql/src/test/queries/clientpositive/join_cond_pushdown_unqual1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 create table part2( 
     p2_partkey INT,
diff --git ql/src/test/queries/clientpositive/join_cond_pushdown_unqual2.q ql/src/test/queries/clientpositive/join_cond_pushdown_unqual2.q
index 0ab61d04b1..a5bb171623 100644
--- ql/src/test/queries/clientpositive/join_cond_pushdown_unqual2.q
+++ ql/src/test/queries/clientpositive/join_cond_pushdown_unqual2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 create table part2( 
     p2_partkey INT,
diff --git ql/src/test/queries/clientpositive/join_cond_pushdown_unqual3.q ql/src/test/queries/clientpositive/join_cond_pushdown_unqual3.q
index fbcebe3415..5f0c985651 100644
--- ql/src/test/queries/clientpositive/join_cond_pushdown_unqual3.q
+++ ql/src/test/queries/clientpositive/join_cond_pushdown_unqual3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 create table part2( 
     p2_partkey INT,
diff --git ql/src/test/queries/clientpositive/join_cond_pushdown_unqual4.q ql/src/test/queries/clientpositive/join_cond_pushdown_unqual4.q
index 160c29113f..9bbecca4b5 100644
--- ql/src/test/queries/clientpositive/join_cond_pushdown_unqual4.q
+++ ql/src/test/queries/clientpositive/join_cond_pushdown_unqual4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 create table part2( 
     p2_partkey INT,
diff --git ql/src/test/queries/clientpositive/join_empty.q ql/src/test/queries/clientpositive/join_empty.q
index 1409fa6b11..cab43df1c2 100644
--- ql/src/test/queries/clientpositive/join_empty.q
+++ ql/src/test/queries/clientpositive/join_empty.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create table srcpart_empty(key int, value string) partitioned by (ds string);
 create table src2_empty (key int, value string);
diff --git ql/src/test/queries/clientpositive/join_filters_overlap.q ql/src/test/queries/clientpositive/join_filters_overlap.q
index 277db70c5d..a361024ce4 100644
--- ql/src/test/queries/clientpositive/join_filters_overlap.q
+++ ql/src/test/queries/clientpositive/join_filters_overlap.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 -- HIVE-3411 Filter predicates on outer join overlapped on single alias is not handled properly
diff --git ql/src/test/queries/clientpositive/join_literals.q ql/src/test/queries/clientpositive/join_literals.q
index 3c79a12e05..a20e738420 100644
--- ql/src/test/queries/clientpositive/join_literals.q
+++ ql/src/test/queries/clientpositive/join_literals.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- Test Joins with a variety of literals in the on clause
 
diff --git ql/src/test/queries/clientpositive/join_map_ppr.q ql/src/test/queries/clientpositive/join_map_ppr.q
index 840d303ff9..4d0e559cb2 100644
--- ql/src/test/queries/clientpositive/join_map_ppr.q
+++ ql/src/test/queries/clientpositive/join_map_ppr.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE dest_j1(key STRING, value STRING, val2 STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/join_max_hashtable.q ql/src/test/queries/clientpositive/join_max_hashtable.q
index 8d0ccb76ed..58cfa96adb 100644
--- ql/src/test/queries/clientpositive/join_max_hashtable.q
+++ ql/src/test/queries/clientpositive/join_max_hashtable.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.auto.convert.join=true;
 set hive.optimize.dynamic.partition.hashjoin=true;
 set hive.auto.convert.join.hashtable.max.entries=500;
diff --git ql/src/test/queries/clientpositive/join_merge_multi_expressions.q ql/src/test/queries/clientpositive/join_merge_multi_expressions.q
index 6ce88eaf90..3eee4f67c6 100644
--- ql/src/test/queries/clientpositive/join_merge_multi_expressions.q
+++ ql/src/test/queries/clientpositive/join_merge_multi_expressions.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/join_merging.q ql/src/test/queries/clientpositive/join_merging.q
index 4efb860cf7..d27a1063d9 100644
--- ql/src/test/queries/clientpositive/join_merging.q
+++ ql/src/test/queries/clientpositive/join_merging.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 
 explain select p1.p_size, p2.p_size 
diff --git ql/src/test/queries/clientpositive/join_on_varchar.q ql/src/test/queries/clientpositive/join_on_varchar.q
index 5016369e07..d3c61f7d59 100644
--- ql/src/test/queries/clientpositive/join_on_varchar.q
+++ ql/src/test/queries/clientpositive/join_on_varchar.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join_parse.q ql/src/test/queries/clientpositive/join_parse.q
index 080933c545..a99d542dab 100644
--- ql/src/test/queries/clientpositive/join_parse.q
+++ ql/src/test/queries/clientpositive/join_parse.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 explain
 select srcpart.key, src1.value from
diff --git ql/src/test/queries/clientpositive/join_rc.q ql/src/test/queries/clientpositive/join_rc.q
index b02db62c35..e79f9ecfc0 100644
--- ql/src/test/queries/clientpositive/join_rc.q
+++ ql/src/test/queries/clientpositive/join_rc.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/join_reorder.q ql/src/test/queries/clientpositive/join_reorder.q
index 5161f1b5b2..9b87596b8f 100644
--- ql/src/test/queries/clientpositive/join_reorder.q
+++ ql/src/test/queries/clientpositive/join_reorder.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 set hive.cbo.enable=false;
diff --git ql/src/test/queries/clientpositive/join_thrift.q ql/src/test/queries/clientpositive/join_thrift.q
index 87fc636881..ed5c038df2 100644
--- ql/src/test/queries/clientpositive/join_thrift.q
+++ ql/src/test/queries/clientpositive/join_thrift.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 -- SORT_QUERY_RESULTS
 
 DESCRIBE src_thrift;
diff --git ql/src/test/queries/clientpositive/join_vc.q ql/src/test/queries/clientpositive/join_vc.q
index 6d2d9c57dc..7bfb6fa307 100644
--- ql/src/test/queries/clientpositive/join_vc.q
+++ ql/src/test/queries/clientpositive/join_vc.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- see HIVE-4033 earlier a flag named hasVC was not initialized correctly in MapOperator.java, resulting in NPE for following query. order by and limit in the query is not relevant, problem would be evident even without those. They are there to keep .q.out file small and sorted.
 
diff --git ql/src/test/queries/clientpositive/json_serde1.q ql/src/test/queries/clientpositive/json_serde1.q
index 85f5af2f15..b805925bfe 100644
--- ql/src/test/queries/clientpositive/json_serde1.q
+++ ql/src/test/queries/clientpositive/json_serde1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 add jar ${system:maven.local.repository}/org/apache/hive/hcatalog/hive-hcatalog-core/${system:hive.version}/hive-hcatalog-core-${system:hive.version}.jar;
 
diff --git ql/src/test/queries/clientpositive/keyword_2.q ql/src/test/queries/clientpositive/keyword_2.q
index e8be7605ba..7d3f20510a 100644
--- ql/src/test/queries/clientpositive/keyword_2.q
+++ ql/src/test/queries/clientpositive/keyword_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table varchar_udf_1;
 
 create table varchar_udf_1 (c1 string, c2 string, c3 varchar(10), c4 varchar(20));
diff --git ql/src/test/queries/clientpositive/keyword_3.q ql/src/test/queries/clientpositive/keyword_3.q
index 098d0f9130..93a0811f63 100644
--- ql/src/test/queries/clientpositive/keyword_3.q
+++ ql/src/test/queries/clientpositive/keyword_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table NULLS;
 
 create table NULLS (LAST string);
diff --git ql/src/test/queries/clientpositive/lateral_view.q ql/src/test/queries/clientpositive/lateral_view.q
index f0c094fae3..8454179d90 100644
--- ql/src/test/queries/clientpositive/lateral_view.q
+++ ql/src/test/queries/clientpositive/lateral_view.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 
diff --git ql/src/test/queries/clientpositive/lateral_view_cp.q ql/src/test/queries/clientpositive/lateral_view_cp.q
index 5e0b6fa20e..f50bb84f44 100644
--- ql/src/test/queries/clientpositive/lateral_view_cp.q
+++ ql/src/test/queries/clientpositive/lateral_view_cp.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 --HIVE 3226
 drop table array_valued_src;
 create table array_valued_src (key string, value array<string>);
diff --git ql/src/test/queries/clientpositive/lateral_view_explode2.q ql/src/test/queries/clientpositive/lateral_view_explode2.q
index 1b5479a38f..edcfd9fbfd 100644
--- ql/src/test/queries/clientpositive/lateral_view_explode2.q
+++ ql/src/test/queries/clientpositive/lateral_view_explode2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 CREATE TEMPORARY FUNCTION explode2 AS 'org.apache.hadoop.hive.contrib.udtf.example.GenericUDTFExplode2';
diff --git ql/src/test/queries/clientpositive/lateral_view_noalias.q ql/src/test/queries/clientpositive/lateral_view_noalias.q
index df7343259a..ae80ee34f1 100644
--- ql/src/test/queries/clientpositive/lateral_view_noalias.q
+++ ql/src/test/queries/clientpositive/lateral_view_noalias.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.fetch.task.conversion=more;
 
 --HIVE-2608 Do not require AS a,b,c part in LATERAL VIEW
diff --git ql/src/test/queries/clientpositive/lateral_view_onview.q ql/src/test/queries/clientpositive/lateral_view_onview.q
index fa559f4bc2..47134f1364 100644
--- ql/src/test/queries/clientpositive/lateral_view_onview.q
+++ ql/src/test/queries/clientpositive/lateral_view_onview.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE lv_table( c1 STRING,  c2 ARRAY<INT>, c3 INT, c4 CHAR(1));
 INSERT OVERWRITE TABLE lv_table SELECT 'abc  ', array(1,2,3), 100, 't' FROM src;
 
diff --git ql/src/test/queries/clientpositive/lateral_view_onview2.q ql/src/test/queries/clientpositive/lateral_view_onview2.q
index c13f7544c9..2c4836ede9 100644
--- ql/src/test/queries/clientpositive/lateral_view_onview2.q
+++ ql/src/test/queries/clientpositive/lateral_view_onview2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE lv_table( c1 STRING,  c2 ARRAY<INT>, c3 INT, c4 CHAR(1));
 INSERT OVERWRITE TABLE lv_table SELECT 'abc  ', array(1,2,3), 100, 't' FROM src;
 
diff --git ql/src/test/queries/clientpositive/lateral_view_outer.q ql/src/test/queries/clientpositive/lateral_view_outer.q
index d65e79df7b..ddb41a8fd0 100644
--- ql/src/test/queries/clientpositive/lateral_view_outer.q
+++ ql/src/test/queries/clientpositive/lateral_view_outer.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- UDTF forwards nothing, OUTER LV add null for that
 explain
 select * from src LATERAL VIEW OUTER explode(array()) C AS a limit 10;
diff --git ql/src/test/queries/clientpositive/lateral_view_ppd.q ql/src/test/queries/clientpositive/lateral_view_ppd.q
index 65ae518cd5..6b76a7b0c0 100644
--- ql/src/test/queries/clientpositive/lateral_view_ppd.q
+++ ql/src/test/queries/clientpositive/lateral_view_ppd.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.optimize.ppd=true;
 
 EXPLAIN SELECT value, myCol FROM (SELECT * FROM src LATERAL VIEW explode(array(1,2,3)) myTable AS myCol) a WHERE key='0';
diff --git ql/src/test/queries/clientpositive/lb_fs_stats.q ql/src/test/queries/clientpositive/lb_fs_stats.q
index 5ad3ff3a5e..08baae74bd 100644
--- ql/src/test/queries/clientpositive/lb_fs_stats.q
+++ ql/src/test/queries/clientpositive/lb_fs_stats.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 set hive.merge.mapfiles=false;	
 set hive.merge.mapredfiles=false; 
diff --git ql/src/test/queries/clientpositive/leadlag.q ql/src/test/queries/clientpositive/leadlag.q
index 7c85cf1365..36ae3e0b40 100644
--- ql/src/test/queries/clientpositive/leadlag.q
+++ ql/src/test/queries/clientpositive/leadlag.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 --1. testLagWithPTFWindowing
 select p_mfgr, p_name,
 rank() over (partition by p_mfgr order by p_name) as r,
diff --git ql/src/test/queries/clientpositive/leadlag_queries.q ql/src/test/queries/clientpositive/leadlag_queries.q
index 9b73685441..50210fee5e 100644
--- ql/src/test/queries/clientpositive/leadlag_queries.q
+++ ql/src/test/queries/clientpositive/leadlag_queries.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- 1. testLeadUDAF
 select p_mfgr, p_retailprice,
 lead(p_retailprice) over (partition by p_mfgr order by p_name) as l1,
diff --git ql/src/test/queries/clientpositive/leftsemijoin.q ql/src/test/queries/clientpositive/leftsemijoin.q
index 8974219348..c4717f6c2e 100644
--- ql/src/test/queries/clientpositive/leftsemijoin.q
+++ ql/src/test/queries/clientpositive/leftsemijoin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/limit0.q ql/src/test/queries/clientpositive/limit0.q
index 5d3fa9c658..00597cac23 100644
--- ql/src/test/queries/clientpositive/limit0.q
+++ ql/src/test/queries/clientpositive/limit0.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain select key from src limit 0;
 explain select key from src where key = '238' limit 0;
 explain select * from src where key = '238' limit 0;
diff --git ql/src/test/queries/clientpositive/limit_join_transpose.q ql/src/test/queries/clientpositive/limit_join_transpose.q
index 087839d11f..09faf9309a 100644
--- ql/src/test/queries/clientpositive/limit_join_transpose.q
+++ ql/src/test/queries/clientpositive/limit_join_transpose.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.limittranspose=false;
 
diff --git ql/src/test/queries/clientpositive/limit_pushdown.q ql/src/test/queries/clientpositive/limit_pushdown.q
index a2aeaed87d..68885775e6 100644
--- ql/src/test/queries/clientpositive/limit_pushdown.q
+++ ql/src/test/queries/clientpositive/limit_pushdown.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.limit.pushdown.memory.usage=0.3f;
diff --git ql/src/test/queries/clientpositive/limit_pushdown2.q ql/src/test/queries/clientpositive/limit_pushdown2.q
index 1f00182197..8971f32d21 100644
--- ql/src/test/queries/clientpositive/limit_pushdown2.q
+++ ql/src/test/queries/clientpositive/limit_pushdown2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.limit.pushdown.memory.usage=0.3f;
diff --git ql/src/test/queries/clientpositive/limit_pushdown3.q ql/src/test/queries/clientpositive/limit_pushdown3.q
index efe559db9c..02a79428ba 100644
--- ql/src/test/queries/clientpositive/limit_pushdown3.q
+++ ql/src/test/queries/clientpositive/limit_pushdown3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.limit.pushdown.memory.usage=0.3f;
diff --git ql/src/test/queries/clientpositive/limit_pushdown_negative.q ql/src/test/queries/clientpositive/limit_pushdown_negative.q
index 95c491ceb9..48f0c2af52 100644
--- ql/src/test/queries/clientpositive/limit_pushdown_negative.q
+++ ql/src/test/queries/clientpositive/limit_pushdown_negative.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.limit.pushdown.memory.usage=0.3f;
 
diff --git ql/src/test/queries/clientpositive/lineage1.q ql/src/test/queries/clientpositive/lineage1.q
index b5b099b72a..3a03876602 100644
--- ql/src/test/queries/clientpositive/lineage1.q
+++ ql/src/test/queries/clientpositive/lineage1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/lineage2.q ql/src/test/queries/clientpositive/lineage2.q
index 31694cb0f6..298116fe8e 100644
--- ql/src/test/queries/clientpositive/lineage2.q
+++ ql/src/test/queries/clientpositive/lineage2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.LineageLogger;
 
diff --git ql/src/test/queries/clientpositive/lineage3.q ql/src/test/queries/clientpositive/lineage3.q
index c907e21f0e..50e9c849fd 100644
--- ql/src/test/queries/clientpositive/lineage3.q
+++ ql/src/test/queries/clientpositive/lineage3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.LineageLogger;
 set hive.metastore.disallow.incompatible.col.type.changes=false;
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_1.q ql/src/test/queries/clientpositive/list_bucket_dml_1.q
index e38930f123..7196d6adc1 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_1.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_10.q ql/src/test/queries/clientpositive/list_bucket_dml_10.q
index f25c174692..60bad7fac2 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_10.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set mapred.input.dir.recursive=true;
 
 -- run this test case in minimr to ensure it works in cluster
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_11.q ql/src/test/queries/clientpositive/list_bucket_dml_11.q
index 8ac162768f..7ebf856fbc 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_11.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set mapred.input.dir.recursive=true;
 set hive.merge.mapfiles=false;	
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_12.q ql/src/test/queries/clientpositive/list_bucket_dml_12.q
index 9facfa5982..daaffbf04f 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_12.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set mapred.input.dir.recursive=true;
 set hive.merge.mapfiles=false;	
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_13.q ql/src/test/queries/clientpositive/list_bucket_dml_13.q
index 0fe7f612d0..091cf0cb58 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_13.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_13.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set mapred.input.dir.recursive=true;
 set hive.merge.mapfiles=false;	
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_14.q ql/src/test/queries/clientpositive/list_bucket_dml_14.q
index abe5ea7ba5..a0f9c2c376 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_14.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_14.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
 set hive.input.format=org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat;
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_2.q ql/src/test/queries/clientpositive/list_bucket_dml_2.q
index c6dceab736..948eabe4ad 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_2.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_3.q ql/src/test/queries/clientpositive/list_bucket_dml_3.q
index ef01529692..e66861ec39 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_3.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_4.q ql/src/test/queries/clientpositive/list_bucket_dml_4.q
index 950409d8c8..c19ebe7417 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_4.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_5.q ql/src/test/queries/clientpositive/list_bucket_dml_5.q
index fce8e2ea51..bd6a5cb728 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_5.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_6.q ql/src/test/queries/clientpositive/list_bucket_dml_6.q
index 631c938ee3..6cb29cb2a3 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_6.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_7.q ql/src/test/queries/clientpositive/list_bucket_dml_7.q
index e2af1b37ce..2c96407259 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_7.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_8.q ql/src/test/queries/clientpositive/list_bucket_dml_8.q
index 6d73896a54..f215852dcf 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_8.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/list_bucket_dml_9.q ql/src/test/queries/clientpositive/list_bucket_dml_9.q
index d2e24af481..b9de4307a4 100644
--- ql/src/test/queries/clientpositive/list_bucket_dml_9.q
+++ ql/src/test/queries/clientpositive/list_bucket_dml_9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/list_bucket_query_multiskew_1.q ql/src/test/queries/clientpositive/list_bucket_query_multiskew_1.q
index 1a4fbc26f3..9e377d5763 100644
--- ql/src/test/queries/clientpositive/list_bucket_query_multiskew_1.q
+++ ql/src/test/queries/clientpositive/list_bucket_query_multiskew_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.listbucketing=true;
 set mapred.input.dir.recursive=true;	
diff --git ql/src/test/queries/clientpositive/list_bucket_query_multiskew_2.q ql/src/test/queries/clientpositive/list_bucket_query_multiskew_2.q
index 996dce6b92..9af9132055 100644
--- ql/src/test/queries/clientpositive/list_bucket_query_multiskew_2.q
+++ ql/src/test/queries/clientpositive/list_bucket_query_multiskew_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.listbucketing=true;
 set mapred.input.dir.recursive=true;	
diff --git ql/src/test/queries/clientpositive/list_bucket_query_multiskew_3.q ql/src/test/queries/clientpositive/list_bucket_query_multiskew_3.q
index f09026f240..b68ec64ca5 100644
--- ql/src/test/queries/clientpositive/list_bucket_query_multiskew_3.q
+++ ql/src/test/queries/clientpositive/list_bucket_query_multiskew_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.listbucketing=true;
 set mapred.input.dir.recursive=true;	
diff --git ql/src/test/queries/clientpositive/list_bucket_query_oneskew_1.q ql/src/test/queries/clientpositive/list_bucket_query_oneskew_1.q
index cc597dcc65..9032542089 100644
--- ql/src/test/queries/clientpositive/list_bucket_query_oneskew_1.q
+++ ql/src/test/queries/clientpositive/list_bucket_query_oneskew_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.listbucketing=true;
 set mapred.input.dir.recursive=true;	
diff --git ql/src/test/queries/clientpositive/list_bucket_query_oneskew_2.q ql/src/test/queries/clientpositive/list_bucket_query_oneskew_2.q
index fb4cf6db41..1fa0638bf9 100644
--- ql/src/test/queries/clientpositive/list_bucket_query_oneskew_2.q
+++ ql/src/test/queries/clientpositive/list_bucket_query_oneskew_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.listbucketing=true;
 set mapred.input.dir.recursive=true;	
diff --git ql/src/test/queries/clientpositive/list_bucket_query_oneskew_3.q ql/src/test/queries/clientpositive/list_bucket_query_oneskew_3.q
index 702de64d75..7ff3d8dfbf 100644
--- ql/src/test/queries/clientpositive/list_bucket_query_oneskew_3.q
+++ ql/src/test/queries/clientpositive/list_bucket_query_oneskew_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.listbucketing=true;
 set mapred.input.dir.recursive=true;	
diff --git ql/src/test/queries/clientpositive/literal_decimal.q ql/src/test/queries/clientpositive/literal_decimal.q
index 1bafc24169..5acae188c6 100644
--- ql/src/test/queries/clientpositive/literal_decimal.q
+++ ql/src/test/queries/clientpositive/literal_decimal.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN SELECT -1BD, 0BD, 1BD, 3.14BD, -3.14BD, 99999999999999999BD, 99999999999999999.9999999999999BD, 1E99BD FROM src LIMIT 1;
diff --git ql/src/test/queries/clientpositive/literal_double.q ql/src/test/queries/clientpositive/literal_double.q
index 766da699ea..09f8cd36f1 100644
--- ql/src/test/queries/clientpositive/literal_double.q
+++ ql/src/test/queries/clientpositive/literal_double.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN SELECT 3.14, -3.14, 3.14e8, 3.14e-8, -3.14e8, -3.14e-8, 3.14e+8, 3.14E8, 3.14E-8 FROM src LIMIT 1;
diff --git ql/src/test/queries/clientpositive/literal_ints.q ql/src/test/queries/clientpositive/literal_ints.q
index 5fd0cfabf3..1ffe2dbdd4 100644
--- ql/src/test/queries/clientpositive/literal_ints.q
+++ ql/src/test/queries/clientpositive/literal_ints.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN SELECT 100, 100Y, 100S, 100L FROM src LIMIT 1;
diff --git ql/src/test/queries/clientpositive/literal_string.q ql/src/test/queries/clientpositive/literal_string.q
index c57dc57252..56cd160dfc 100644
--- ql/src/test/queries/clientpositive/literal_string.q
+++ ql/src/test/queries/clientpositive/literal_string.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN SELECT 'face''book', 'face' 'book', 'face'
diff --git ql/src/test/queries/clientpositive/llap_acid.q ql/src/test/queries/clientpositive/llap_acid.q
index e0bde30ccc..dfc7b0480b 100644
--- ql/src/test/queries/clientpositive/llap_acid.q
+++ ql/src/test/queries/clientpositive/llap_acid.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 
diff --git ql/src/test/queries/clientpositive/llap_acid2.q ql/src/test/queries/clientpositive/llap_acid2.q
index 76f6203d73..108f00a84e 100644
--- ql/src/test/queries/clientpositive/llap_acid2.q
+++ ql/src/test/queries/clientpositive/llap_acid2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 
diff --git ql/src/test/queries/clientpositive/llap_acid_fast.q ql/src/test/queries/clientpositive/llap_acid_fast.q
index 89ca45f722..1342efb71d 100644
--- ql/src/test/queries/clientpositive/llap_acid_fast.q
+++ ql/src/test/queries/clientpositive/llap_acid_fast.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 
diff --git ql/src/test/queries/clientpositive/llap_nullscan.q ql/src/test/queries/clientpositive/llap_nullscan.q
index eeb3100f52..c123e9e22b 100644
--- ql/src/test/queries/clientpositive/llap_nullscan.q
+++ ql/src/test/queries/clientpositive/llap_nullscan.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=false;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/llap_partitioned.q ql/src/test/queries/clientpositive/llap_partitioned.q
index f3375b8a8b..2ba38ce02a 100644
--- ql/src/test/queries/clientpositive/llap_partitioned.q
+++ ql/src/test/queries/clientpositive/llap_partitioned.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 
diff --git ql/src/test/queries/clientpositive/llap_smb.q ql/src/test/queries/clientpositive/llap_smb.q
index b09901de89..ac5faaa9b0 100644
--- ql/src/test/queries/clientpositive/llap_smb.q
+++ ql/src/test/queries/clientpositive/llap_smb.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 
diff --git ql/src/test/queries/clientpositive/llap_stats.q ql/src/test/queries/clientpositive/llap_stats.q
index 49b52bd4a6..2f5369efbe 100644
--- ql/src/test/queries/clientpositive/llap_stats.q
+++ ql/src/test/queries/clientpositive/llap_stats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/llap_text.q ql/src/test/queries/clientpositive/llap_text.q
index d0ad673bd4..e4cf2ab5ab 100644
--- ql/src/test/queries/clientpositive/llap_text.q
+++ ql/src/test/queries/clientpositive/llap_text.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/llap_udf.q ql/src/test/queries/clientpositive/llap_udf.q
index 8b1dcb73cd..65d930e456 100644
--- ql/src/test/queries/clientpositive/llap_udf.q
+++ ql/src/test/queries/clientpositive/llap_udf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.execution.mode=llap;
diff --git ql/src/test/queries/clientpositive/llap_uncompressed.q ql/src/test/queries/clientpositive/llap_uncompressed.q
index 34fd03fd66..0282457e8c 100644
--- ql/src/test/queries/clientpositive/llap_uncompressed.q
+++ ql/src/test/queries/clientpositive/llap_uncompressed.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.vectorized.execution.enabled=true;
 
 SET hive.llap.io.enabled=false;
diff --git ql/src/test/queries/clientpositive/llap_vector_nohybridgrace.q ql/src/test/queries/clientpositive/llap_vector_nohybridgrace.q
index 69f1819dd7..d637d36430 100644
--- ql/src/test/queries/clientpositive/llap_vector_nohybridgrace.q
+++ ql/src/test/queries/clientpositive/llap_vector_nohybridgrace.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 
 set hive.vectorized.execution.enabled=true;
 set hive.vectorized.execution.mapjoin.native.enabled=true;
diff --git ql/src/test/queries/clientpositive/llapdecider.q ql/src/test/queries/clientpositive/llapdecider.q
index 16b25218e7..86f4c6e385 100644
--- ql/src/test/queries/clientpositive/llapdecider.q
+++ ql/src/test/queries/clientpositive/llapdecider.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.stats.fetch.column.stats=true;
diff --git ql/src/test/queries/clientpositive/load_dyn_part1.q ql/src/test/queries/clientpositive/load_dyn_part1.q
index 68323ab6cf..bac1f1e73d 100644
--- ql/src/test/queries/clientpositive/load_dyn_part1.q
+++ ql/src/test/queries/clientpositive/load_dyn_part1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/load_dyn_part10.q ql/src/test/queries/clientpositive/load_dyn_part10.q
index 8bb30567b2..08929a161c 100644
--- ql/src/test/queries/clientpositive/load_dyn_part10.q
+++ ql/src/test/queries/clientpositive/load_dyn_part10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- SORT_QUERY_RESULTS
 
 show partitions srcpart;
diff --git ql/src/test/queries/clientpositive/load_dyn_part11.q ql/src/test/queries/clientpositive/load_dyn_part11.q
index 4cfbfe8eac..9e46d7615f 100644
--- ql/src/test/queries/clientpositive/load_dyn_part11.q
+++ ql/src/test/queries/clientpositive/load_dyn_part11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 show partitions srcpart;
 
 
diff --git ql/src/test/queries/clientpositive/load_dyn_part12.q ql/src/test/queries/clientpositive/load_dyn_part12.q
index dd8bd530af..8e704ede13 100644
--- ql/src/test/queries/clientpositive/load_dyn_part12.q
+++ ql/src/test/queries/clientpositive/load_dyn_part12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 show partitions srcpart;
 
 
diff --git ql/src/test/queries/clientpositive/load_dyn_part13.q ql/src/test/queries/clientpositive/load_dyn_part13.q
index 28b9aca28f..52d1b70d0b 100644
--- ql/src/test/queries/clientpositive/load_dyn_part13.q
+++ ql/src/test/queries/clientpositive/load_dyn_part13.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 show partitions srcpart;
 
diff --git ql/src/test/queries/clientpositive/load_dyn_part14.q ql/src/test/queries/clientpositive/load_dyn_part14.q
index eec0db8d7f..13bcc6fe96 100644
--- ql/src/test/queries/clientpositive/load_dyn_part14.q
+++ ql/src/test/queries/clientpositive/load_dyn_part14.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 create table if not exists nzhang_part14 (key string)
diff --git ql/src/test/queries/clientpositive/load_dyn_part15.q ql/src/test/queries/clientpositive/load_dyn_part15.q
index 3c3310882a..56eea1441c 100644
--- ql/src/test/queries/clientpositive/load_dyn_part15.q
+++ ql/src/test/queries/clientpositive/load_dyn_part15.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/load_dyn_part2.q ql/src/test/queries/clientpositive/load_dyn_part2.q
index ba9e7a8068..df728574bc 100644
--- ql/src/test/queries/clientpositive/load_dyn_part2.q
+++ ql/src/test/queries/clientpositive/load_dyn_part2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/load_dyn_part3.q ql/src/test/queries/clientpositive/load_dyn_part3.q
index 07423fd4c6..bb2364d52c 100644
--- ql/src/test/queries/clientpositive/load_dyn_part3.q
+++ ql/src/test/queries/clientpositive/load_dyn_part3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/load_dyn_part4.q ql/src/test/queries/clientpositive/load_dyn_part4.q
index b46613d30f..550a152a52 100644
--- ql/src/test/queries/clientpositive/load_dyn_part4.q
+++ ql/src/test/queries/clientpositive/load_dyn_part4.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 show partitions srcpart;
diff --git ql/src/test/queries/clientpositive/load_dyn_part5.q ql/src/test/queries/clientpositive/load_dyn_part5.q
index 5780f5d439..e845b4f9e2 100644
--- ql/src/test/queries/clientpositive/load_dyn_part5.q
+++ ql/src/test/queries/clientpositive/load_dyn_part5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 create table if not exists nzhang_part5 (key string) partitioned by (value string);
diff --git ql/src/test/queries/clientpositive/load_dyn_part6.q ql/src/test/queries/clientpositive/load_dyn_part6.q
index b5e85aebf4..3c624d96be 100644
--- ql/src/test/queries/clientpositive/load_dyn_part6.q
+++ ql/src/test/queries/clientpositive/load_dyn_part6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 show partitions srcpart;
 
 
diff --git ql/src/test/queries/clientpositive/load_dyn_part7.q ql/src/test/queries/clientpositive/load_dyn_part7.q
index b9e1da0326..6e1131e79c 100644
--- ql/src/test/queries/clientpositive/load_dyn_part7.q
+++ ql/src/test/queries/clientpositive/load_dyn_part7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 show partitions srcpart;
 
 
diff --git ql/src/test/queries/clientpositive/load_dyn_part8.q ql/src/test/queries/clientpositive/load_dyn_part8.q
index 1806c84733..4330e0cb6b 100644
--- ql/src/test/queries/clientpositive/load_dyn_part8.q
+++ ql/src/test/queries/clientpositive/load_dyn_part8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- SORT_QUERY_RESULTS
 
 show partitions srcpart;
diff --git ql/src/test/queries/clientpositive/load_dyn_part9.q ql/src/test/queries/clientpositive/load_dyn_part9.q
index 58eb66cc62..b8691a1e8a 100644
--- ql/src/test/queries/clientpositive/load_dyn_part9.q
+++ ql/src/test/queries/clientpositive/load_dyn_part9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- SORT_QUERY_RESULTS
 
 show partitions srcpart;
diff --git ql/src/test/queries/clientpositive/load_overwrite.q ql/src/test/queries/clientpositive/load_overwrite.q
index 080c78496a..e9e6280250 100644
--- ql/src/test/queries/clientpositive/load_overwrite.q
+++ ql/src/test/queries/clientpositive/load_overwrite.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table load_overwrite like src;
 
 insert overwrite table load_overwrite select * from src;
diff --git ql/src/test/queries/clientpositive/loadpart_err.q ql/src/test/queries/clientpositive/loadpart_err.q
index 86d63d10c3..1204622b10 100644
--- ql/src/test/queries/clientpositive/loadpart_err.q
+++ ql/src/test/queries/clientpositive/loadpart_err.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cli.errors.ignore=true;
 
 ADD FILE ../../data/scripts/error_script;
diff --git ql/src/test/queries/clientpositive/lock1.q ql/src/test/queries/clientpositive/lock1.q
index 326cf4910f..a6b2c5b4d4 100644
--- ql/src/test/queries/clientpositive/lock1.q
+++ ql/src/test/queries/clientpositive/lock1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table tstsrc;
 create table tstsrc like src;
 insert overwrite table tstsrc select key, value from src;
diff --git ql/src/test/queries/clientpositive/lock2.q ql/src/test/queries/clientpositive/lock2.q
index c8bff56ada..e990312268 100644
--- ql/src/test/queries/clientpositive/lock2.q
+++ ql/src/test/queries/clientpositive/lock2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 drop table tstsrc;
 create table tstsrc like src;
 insert overwrite table tstsrc select key, value from src;
diff --git ql/src/test/queries/clientpositive/lock3.q ql/src/test/queries/clientpositive/lock3.q
index 7f2178f540..dd1843f6b3 100644
--- ql/src/test/queries/clientpositive/lock3.q
+++ ql/src/test/queries/clientpositive/lock3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 drop table tstsrcpart;
 create table tstsrcpart like srcpart;
 
diff --git ql/src/test/queries/clientpositive/lock4.q ql/src/test/queries/clientpositive/lock4.q
index e07bfe867d..f11365961d 100644
--- ql/src/test/queries/clientpositive/lock4.q
+++ ql/src/test/queries/clientpositive/lock4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.lock.mapred.only.operation=true;
 drop table tstsrcpart;
 create table tstsrcpart like srcpart;
diff --git ql/src/test/queries/clientpositive/louter_join_ppr.q ql/src/test/queries/clientpositive/louter_join_ppr.q
index ef6f54108a..d8220d052a 100644
--- ql/src/test/queries/clientpositive/louter_join_ppr.q
+++ ql/src/test/queries/clientpositive/louter_join_ppr.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 
diff --git ql/src/test/queries/clientpositive/lvj_mapjoin.q ql/src/test/queries/clientpositive/lvj_mapjoin.q
index 5fb9a230f8..808d59adc8 100644
--- ql/src/test/queries/clientpositive/lvj_mapjoin.q
+++ ql/src/test/queries/clientpositive/lvj_mapjoin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/macro.q ql/src/test/queries/clientpositive/macro.q
index 47b05ff449..70511263dc 100644
--- ql/src/test/queries/clientpositive/macro.q
+++ ql/src/test/queries/clientpositive/macro.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 CREATE TEMPORARY MACRO SIGMOID (x DOUBLE) 1.0 / (1.0 + EXP(-x));
diff --git ql/src/test/queries/clientpositive/mapjoin1.q ql/src/test/queries/clientpositive/mapjoin1.q
index 568557d4eb..5e955f39ac 100644
--- ql/src/test/queries/clientpositive/mapjoin1.q
+++ ql/src/test/queries/clientpositive/mapjoin1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 
 set hive.auto.convert.join=true;
 SELECT  /*+ MAPJOIN(b) */ sum(a.key) as sum_a
diff --git ql/src/test/queries/clientpositive/mapjoin47.q ql/src/test/queries/clientpositive/mapjoin47.q
index 9abd4f55b2..0b654cbdcd 100644
--- ql/src/test/queries/clientpositive/mapjoin47.q
+++ ql/src/test/queries/clientpositive/mapjoin47.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:cbo_t1
 set hive.auto.convert.join=true;
 set hive.strict.checks.cartesian.product=false;
 set hive.join.emit.interval=2;
diff --git ql/src/test/queries/clientpositive/mapjoin_distinct.q ql/src/test/queries/clientpositive/mapjoin_distinct.q
index 3afc9c63bf..1a0c3093ec 100644
--- ql/src/test/queries/clientpositive/mapjoin_distinct.q
+++ ql/src/test/queries/clientpositive/mapjoin_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.map.aggr = true;
 set hive.auto.convert.join=true;
 set hive.groupby.skewindata = true;
diff --git ql/src/test/queries/clientpositive/mapjoin_filter_on_outerjoin.q ql/src/test/queries/clientpositive/mapjoin_filter_on_outerjoin.q
index bc98ca8f0e..5d061da3fc 100644
--- ql/src/test/queries/clientpositive/mapjoin_filter_on_outerjoin.q
+++ ql/src/test/queries/clientpositive/mapjoin_filter_on_outerjoin.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.auto.convert.join = false;
 
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/mapjoin_hint.q ql/src/test/queries/clientpositive/mapjoin_hint.q
index fc85cc97bc..21b4896b84 100644
--- ql/src/test/queries/clientpositive/mapjoin_hint.q
+++ ql/src/test/queries/clientpositive/mapjoin_hint.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:part
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/mapjoin_hook.q ql/src/test/queries/clientpositive/mapjoin_hook.q
index dd47d7301f..3dc479ca3d 100644
--- ql/src/test/queries/clientpositive/mapjoin_hook.q
+++ ql/src/test/queries/clientpositive/mapjoin_hook.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 set hive.exec.post.hooks = org.apache.hadoop.hive.ql.hooks.MapJoinCounterHook,org.apache.hadoop.hive.ql.hooks.PrintCompletedTasksHook;
 
diff --git ql/src/test/queries/clientpositive/mapjoin_mapjoin.q ql/src/test/queries/clientpositive/mapjoin_mapjoin.q
index ddfa608678..2b57e8a0eb 100644
--- ql/src/test/queries/clientpositive/mapjoin_mapjoin.q
+++ ql/src/test/queries/clientpositive/mapjoin_mapjoin.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.auto.convert.join=true;
diff --git ql/src/test/queries/clientpositive/mapjoin_memcheck.q ql/src/test/queries/clientpositive/mapjoin_memcheck.q
index 9ca1fa266d..11cf2cbfc9 100644
--- ql/src/test/queries/clientpositive/mapjoin_memcheck.q
+++ ql/src/test/queries/clientpositive/mapjoin_memcheck.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 set hive.auto.convert.join = true;
diff --git ql/src/test/queries/clientpositive/mapjoin_subquery.q ql/src/test/queries/clientpositive/mapjoin_subquery.q
index ebd584e133..79fe197330 100644
--- ql/src/test/queries/clientpositive/mapjoin_subquery.q
+++ ql/src/test/queries/clientpositive/mapjoin_subquery.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=true;
 set hive.auto.convert.join.noconditionaltask=true;
diff --git ql/src/test/queries/clientpositive/mapjoin_test_outer.q ql/src/test/queries/clientpositive/mapjoin_test_outer.q
index e2998d7cd2..96275aba44 100644
--- ql/src/test/queries/clientpositive/mapjoin_test_outer.q
+++ ql/src/test/queries/clientpositive/mapjoin_test_outer.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.auto.convert.join = false;
 
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/mapreduce1.q ql/src/test/queries/clientpositive/mapreduce1.q
index e2b314f598..06c7c53451 100644
--- ql/src/test/queries/clientpositive/mapreduce1.q
+++ ql/src/test/queries/clientpositive/mapreduce1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 CREATE TABLE dest1(key INT, ten INT, one INT, value STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/mapreduce2.q ql/src/test/queries/clientpositive/mapreduce2.q
index 5a19b3c7b0..dfb8ec399e 100644
--- ql/src/test/queries/clientpositive/mapreduce2.q
+++ ql/src/test/queries/clientpositive/mapreduce2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 CREATE TABLE dest1(key INT, ten INT, one INT, value STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/mapreduce3.q ql/src/test/queries/clientpositive/mapreduce3.q
index c31ede77d8..ad9908ffb3 100644
--- ql/src/test/queries/clientpositive/mapreduce3.q
+++ ql/src/test/queries/clientpositive/mapreduce3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, ten INT, one INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/mapreduce4.q ql/src/test/queries/clientpositive/mapreduce4.q
index 0c15f1fb55..74e907eb53 100644
--- ql/src/test/queries/clientpositive/mapreduce4.q
+++ ql/src/test/queries/clientpositive/mapreduce4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, ten INT, one INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/mapreduce5.q ql/src/test/queries/clientpositive/mapreduce5.q
index d7c53d2889..841ead5421 100644
--- ql/src/test/queries/clientpositive/mapreduce5.q
+++ ql/src/test/queries/clientpositive/mapreduce5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, ten INT, one INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/mapreduce6.q ql/src/test/queries/clientpositive/mapreduce6.q
index c37181d351..213db77e99 100644
--- ql/src/test/queries/clientpositive/mapreduce6.q
+++ ql/src/test/queries/clientpositive/mapreduce6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, ten INT, one INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/mapreduce7.q ql/src/test/queries/clientpositive/mapreduce7.q
index 0da41d2ecd..77b82ef3bc 100644
--- ql/src/test/queries/clientpositive/mapreduce7.q
+++ ql/src/test/queries/clientpositive/mapreduce7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(k STRING, v STRING, key INT, ten INT, one INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/mapreduce8.q ql/src/test/queries/clientpositive/mapreduce8.q
index 35d9ed90e7..7db7510ea8 100644
--- ql/src/test/queries/clientpositive/mapreduce8.q
+++ ql/src/test/queries/clientpositive/mapreduce8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(k STRING, v STRING, key INT, ten INT, one INT, value STRING) STORED AS TEXTFILE;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/masking_1.q ql/src/test/queries/clientpositive/masking_1.q
index 90f009d382..6e4f6a7680 100644
--- ql/src/test/queries/clientpositive/masking_1.q
+++ ql/src/test/queries/clientpositive/masking_1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_10.q ql/src/test/queries/clientpositive/masking_10.q
index e933253e34..a26d2dea95 100644
--- ql/src/test/queries/clientpositive/masking_10.q
+++ ql/src/test/queries/clientpositive/masking_10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_11.q ql/src/test/queries/clientpositive/masking_11.q
index dc46117ce2..53a90cd9ac 100644
--- ql/src/test/queries/clientpositive/masking_11.q
+++ ql/src/test/queries/clientpositive/masking_11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_12.q ql/src/test/queries/clientpositive/masking_12.q
index cf12da9549..707d53afd5 100644
--- ql/src/test/queries/clientpositive/masking_12.q
+++ ql/src/test/queries/clientpositive/masking_12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_1_newdb.q ql/src/test/queries/clientpositive/masking_1_newdb.q
index 42c33dc9fd..7438349b82 100644
--- ql/src/test/queries/clientpositive/masking_1_newdb.q
+++ ql/src/test/queries/clientpositive/masking_1_newdb.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_2.q ql/src/test/queries/clientpositive/masking_2.q
index fc4a71e51b..3192992811 100644
--- ql/src/test/queries/clientpositive/masking_2.q
+++ ql/src/test/queries/clientpositive/masking_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_3.q ql/src/test/queries/clientpositive/masking_3.q
index 584dac1b09..018f998791 100644
--- ql/src/test/queries/clientpositive/masking_3.q
+++ ql/src/test/queries/clientpositive/masking_3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_4.q ql/src/test/queries/clientpositive/masking_4.q
index 04dd185c8b..49af1cc0ec 100644
--- ql/src/test/queries/clientpositive/masking_4.q
+++ ql/src/test/queries/clientpositive/masking_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_5.q ql/src/test/queries/clientpositive/masking_5.q
index a2f7d1880e..e8f392fb96 100644
--- ql/src/test/queries/clientpositive/masking_5.q
+++ ql/src/test/queries/clientpositive/masking_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_6.q ql/src/test/queries/clientpositive/masking_6.q
index e266741d34..f773ec1f20 100644
--- ql/src/test/queries/clientpositive/masking_6.q
+++ ql/src/test/queries/clientpositive/masking_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_7.q ql/src/test/queries/clientpositive/masking_7.q
index 6d4784deae..16552218df 100644
--- ql/src/test/queries/clientpositive/masking_7.q
+++ ql/src/test/queries/clientpositive/masking_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_8.q ql/src/test/queries/clientpositive/masking_8.q
index d9a01af963..2db065275b 100644
--- ql/src/test/queries/clientpositive/masking_8.q
+++ ql/src/test/queries/clientpositive/masking_8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_9.q ql/src/test/queries/clientpositive/masking_9.q
index c8b54cee3f..a67b63dacb 100644
--- ql/src/test/queries/clientpositive/masking_9.q
+++ ql/src/test/queries/clientpositive/masking_9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
 
diff --git ql/src/test/queries/clientpositive/masking_disablecbo_1.q ql/src/test/queries/clientpositive/masking_disablecbo_1.q
index 8fefbcfbf2..aaf17e0bdc 100644
--- ql/src/test/queries/clientpositive/masking_disablecbo_1.q
+++ ql/src/test/queries/clientpositive/masking_disablecbo_1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
diff --git ql/src/test/queries/clientpositive/masking_disablecbo_2.q ql/src/test/queries/clientpositive/masking_disablecbo_2.q
index 8375c52d10..039ffe91f8 100644
--- ql/src/test/queries/clientpositive/masking_disablecbo_2.q
+++ ql/src/test/queries/clientpositive/masking_disablecbo_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
diff --git ql/src/test/queries/clientpositive/masking_disablecbo_3.q ql/src/test/queries/clientpositive/masking_disablecbo_3.q
index 9501eddba4..88ee96bc16 100644
--- ql/src/test/queries/clientpositive/masking_disablecbo_3.q
+++ ql/src/test/queries/clientpositive/masking_disablecbo_3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
diff --git ql/src/test/queries/clientpositive/masking_disablecbo_4.q ql/src/test/queries/clientpositive/masking_disablecbo_4.q
index 7279114932..9981969e3a 100644
--- ql/src/test/queries/clientpositive/masking_disablecbo_4.q
+++ ql/src/test/queries/clientpositive/masking_disablecbo_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
diff --git ql/src/test/queries/clientpositive/materialized_view_drop.q ql/src/test/queries/clientpositive/materialized_view_drop.q
index 88971595c7..39d63587de 100644
--- ql/src/test/queries/clientpositive/materialized_view_drop.q
+++ ql/src/test/queries/clientpositive/materialized_view_drop.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 create materialized view dmv_mat_view as select cint, cstring1 from alltypesorc where cint < 0;
 
 show table extended like dmv_mat_view;
diff --git ql/src/test/queries/clientpositive/materialized_view_rewrite_ssb.q ql/src/test/queries/clientpositive/materialized_view_rewrite_ssb.q
index 0177188443..ef85acb55b 100644
--- ql/src/test/queries/clientpositive/materialized_view_rewrite_ssb.q
+++ ql/src/test/queries/clientpositive/materialized_view_rewrite_ssb.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 set hive.strict.checks.cartesian.product=false;
diff --git ql/src/test/queries/clientpositive/materialized_view_rewrite_ssb_2.q ql/src/test/queries/clientpositive/materialized_view_rewrite_ssb_2.q
index 7c4d119540..d3914be722 100644
--- ql/src/test/queries/clientpositive/materialized_view_rewrite_ssb_2.q
+++ ql/src/test/queries/clientpositive/materialized_view_rewrite_ssb_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 set hive.strict.checks.cartesian.product=false;
diff --git ql/src/test/queries/clientpositive/merge1.q ql/src/test/queries/clientpositive/merge1.q
index e64492b06d..bd8a8570fc 100644
--- ql/src/test/queries/clientpositive/merge1.q
+++ ql/src/test/queries/clientpositive/merge1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.merge.mapredfiles=true;
diff --git ql/src/test/queries/clientpositive/merge2.q ql/src/test/queries/clientpositive/merge2.q
index c7197165f4..e3ec76a953 100644
--- ql/src/test/queries/clientpositive/merge2.q
+++ ql/src/test/queries/clientpositive/merge2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.merge.mapfiles=true;
diff --git ql/src/test/queries/clientpositive/merge3.q ql/src/test/queries/clientpositive/merge3.q
index 98b15d5dd7..2b8af625e9 100644
--- ql/src/test/queries/clientpositive/merge3.q
+++ ql/src/test/queries/clientpositive/merge3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.merge.mapfiles=false;
 set hive.merge.mapredfiles=false;
diff --git ql/src/test/queries/clientpositive/merge4.q ql/src/test/queries/clientpositive/merge4.q
index 14aca1acd3..6bcbe52704 100644
--- ql/src/test/queries/clientpositive/merge4.q
+++ ql/src/test/queries/clientpositive/merge4.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.merge.mapfiles=true;
 set hive.merge.mapredfiles=true;
diff --git ql/src/test/queries/clientpositive/merge_dynamic_partition.q ql/src/test/queries/clientpositive/merge_dynamic_partition.q
index f70d1c2d6b..3c0fda1d8a 100644
--- ql/src/test/queries/clientpositive/merge_dynamic_partition.q
+++ ql/src/test/queries/clientpositive/merge_dynamic_partition.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/merge_dynamic_partition2.q ql/src/test/queries/clientpositive/merge_dynamic_partition2.q
index e61b6152eb..0378e017f7 100644
--- ql/src/test/queries/clientpositive/merge_dynamic_partition2.q
+++ ql/src/test/queries/clientpositive/merge_dynamic_partition2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false;
 
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/merge_dynamic_partition3.q ql/src/test/queries/clientpositive/merge_dynamic_partition3.q
index 8caf93376f..1ede6daf83 100644
--- ql/src/test/queries/clientpositive/merge_dynamic_partition3.q
+++ ql/src/test/queries/clientpositive/merge_dynamic_partition3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false;
 
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/merge_dynamic_partition4.q ql/src/test/queries/clientpositive/merge_dynamic_partition4.q
index 9be7f165a8..b950a53789 100644
--- ql/src/test/queries/clientpositive/merge_dynamic_partition4.q
+++ ql/src/test/queries/clientpositive/merge_dynamic_partition4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/merge_dynamic_partition5.q ql/src/test/queries/clientpositive/merge_dynamic_partition5.q
index 89a8849997..7278869547 100644
--- ql/src/test/queries/clientpositive/merge_dynamic_partition5.q
+++ ql/src/test/queries/clientpositive/merge_dynamic_partition5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/merge_empty.q ql/src/test/queries/clientpositive/merge_empty.q
index 188b39e463..83c44b56ec 100644
--- ql/src/test/queries/clientpositive/merge_empty.q
+++ ql/src/test/queries/clientpositive/merge_empty.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.merge.mapredfiles=true;
 set hive.merge.sparkfiles=true;
 set hive.auto.convert.join=false;
diff --git ql/src/test/queries/clientpositive/mergejoin.q ql/src/test/queries/clientpositive/mergejoin.q
index 534f24c3e1..058588c960 100644
--- ql/src/test/queries/clientpositive/mergejoin.q
+++ ql/src/test/queries/clientpositive/mergejoin.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/mergejoin_3way.q ql/src/test/queries/clientpositive/mergejoin_3way.q
index 4c50f1de86..74fb887421 100644
--- ql/src/test/queries/clientpositive/mergejoin_3way.q
+++ ql/src/test/queries/clientpositive/mergejoin_3way.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.auto.convert.join=false;
 set hive.cbo.enable=false;
 
diff --git ql/src/test/queries/clientpositive/mergejoins.q ql/src/test/queries/clientpositive/mergejoins.q
index 2c11b3ac0f..2b1ecbac54 100644
--- ql/src/test/queries/clientpositive/mergejoins.q
+++ ql/src/test/queries/clientpositive/mergejoins.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create table a (val1 int, val2 int);
 create table b (val1 int, val2 int);
diff --git ql/src/test/queries/clientpositive/metadataOnlyOptimizer.q ql/src/test/queries/clientpositive/metadataOnlyOptimizer.q
index 77fa6542ab..bafdd58022 100644
--- ql/src/test/queries/clientpositive/metadataOnlyOptimizer.q
+++ ql/src/test/queries/clientpositive/metadataOnlyOptimizer.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 select key from(
 select '1' as key from srcpart where ds="2008-04-09"
diff --git ql/src/test/queries/clientpositive/metadataonly1.q ql/src/test/queries/clientpositive/metadataonly1.q
index 409109a490..e3bf819929 100644
--- ql/src/test/queries/clientpositive/metadataonly1.q
+++ ql/src/test/queries/clientpositive/metadataonly1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.optimize.metadataonly=true;
 CREATE TABLE TEST1(A INT, B DOUBLE) partitioned by (ds string);
diff --git ql/src/test/queries/clientpositive/mi.q ql/src/test/queries/clientpositive/mi.q
index b79b869270..4b3c66e4eb 100644
--- ql/src/test/queries/clientpositive/mi.q
+++ ql/src/test/queries/clientpositive/mi.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/mm_all.q ql/src/test/queries/clientpositive/mm_all.q
index b93e13e858..4ffbb6b98a 100644
--- ql/src/test/queries/clientpositive/mm_all.q
+++ ql/src/test/queries/clientpositive/mm_all.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/mm_buckets.q ql/src/test/queries/clientpositive/mm_buckets.q
index d5a047a920..3e91cdd713 100644
--- ql/src/test/queries/clientpositive/mm_buckets.q
+++ ql/src/test/queries/clientpositive/mm_buckets.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/mm_conversions.q ql/src/test/queries/clientpositive/mm_conversions.q
index 14d16abbff..55565a9428 100644
--- ql/src/test/queries/clientpositive/mm_conversions.q
+++ ql/src/test/queries/clientpositive/mm_conversions.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/mm_cttas.q ql/src/test/queries/clientpositive/mm_cttas.q
index b099d2f1fb..da8b84df50 100644
--- ql/src/test/queries/clientpositive/mm_cttas.q
+++ ql/src/test/queries/clientpositive/mm_cttas.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/mm_default.q ql/src/test/queries/clientpositive/mm_default.q
index a20d9cad35..0fa46a96f2 100644
--- ql/src/test/queries/clientpositive/mm_default.q
+++ ql/src/test/queries/clientpositive/mm_default.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/mm_exim.q ql/src/test/queries/clientpositive/mm_exim.q
index d084125e86..c47342bd23 100644
--- ql/src/test/queries/clientpositive/mm_exim.q
+++ ql/src/test/queries/clientpositive/mm_exim.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/mrr.q ql/src/test/queries/clientpositive/mrr.q
index c68ae693eb..0f2dd84741 100644
--- ql/src/test/queries/clientpositive/mrr.q
+++ ql/src/test/queries/clientpositive/mrr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.auto.convert.join.noconditionaltask.size=60000000;
diff --git ql/src/test/queries/clientpositive/multiMapJoin1.q ql/src/test/queries/clientpositive/multiMapJoin1.q
index 6e16af4617..a65ed72c27 100644
--- ql/src/test/queries/clientpositive/multiMapJoin1.q
+++ ql/src/test/queries/clientpositive/multiMapJoin1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 set hive.mapred.mode=nonstrict;
 set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.PostExecutePrinter,org.apache.hadoop.hive.ql.hooks.PrintCompletedTasksHook;
diff --git ql/src/test/queries/clientpositive/multiMapJoin2.q ql/src/test/queries/clientpositive/multiMapJoin2.q
index 14b2edaf9f..efaadcb597 100644
--- ql/src/test/queries/clientpositive/multiMapJoin2.q
+++ ql/src/test/queries/clientpositive/multiMapJoin2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.PostExecutePrinter,org.apache.hadoop.hive.ql.hooks.PrintCompletedTasksHook;
 set hive.auto.convert.join=true;
diff --git ql/src/test/queries/clientpositive/multi_column_in_single.q ql/src/test/queries/clientpositive/multi_column_in_single.q
index ca2d16c872..7151fc4792 100644
--- ql/src/test/queries/clientpositive/multi_column_in_single.q
+++ ql/src/test/queries/clientpositive/multi_column_in_single.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 select * from src where (key, value) in (('238','val_238'));
diff --git ql/src/test/queries/clientpositive/multi_insert.q ql/src/test/queries/clientpositive/multi_insert.q
index 1fdfa597d1..9e33a84361 100644
--- ql/src/test/queries/clientpositive/multi_insert.q
+++ ql/src/test/queries/clientpositive/multi_insert.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 create table src_multi1 like src;
diff --git ql/src/test/queries/clientpositive/multi_insert_gby.q ql/src/test/queries/clientpositive/multi_insert_gby.q
index 2d5a31234f..7c9e8dee9c 100644
--- ql/src/test/queries/clientpositive/multi_insert_gby.q
+++ ql/src/test/queries/clientpositive/multi_insert_gby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 --HIVE-3699 Multiple insert overwrite into multiple tables query stores same results in all tables
diff --git ql/src/test/queries/clientpositive/multi_insert_gby2.q ql/src/test/queries/clientpositive/multi_insert_gby2.q
index c23c854275..a477f839c8 100644
--- ql/src/test/queries/clientpositive/multi_insert_gby2.q
+++ ql/src/test/queries/clientpositive/multi_insert_gby2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 --HIVE-3699 Multiple insert overwrite into multiple tables query stores same results in all tables
 create table e1 (count int);
diff --git ql/src/test/queries/clientpositive/multi_insert_gby3.q ql/src/test/queries/clientpositive/multi_insert_gby3.q
index 68f6644864..6bed476fff 100644
--- ql/src/test/queries/clientpositive/multi_insert_gby3.q
+++ ql/src/test/queries/clientpositive/multi_insert_gby3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 create table e1 (key string, keyD double);
diff --git ql/src/test/queries/clientpositive/multi_insert_gby4.q ql/src/test/queries/clientpositive/multi_insert_gby4.q
index 2e22096f7e..d4858137d8 100644
--- ql/src/test/queries/clientpositive/multi_insert_gby4.q
+++ ql/src/test/queries/clientpositive/multi_insert_gby4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 create table e1 (key string, count int);
diff --git ql/src/test/queries/clientpositive/multi_insert_lateral_view.q ql/src/test/queries/clientpositive/multi_insert_lateral_view.q
index d80717fb25..481bdf2095 100644
--- ql/src/test/queries/clientpositive/multi_insert_lateral_view.q
+++ ql/src/test/queries/clientpositive/multi_insert_lateral_view.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.dbclass=fs;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/multi_insert_mixed.q ql/src/test/queries/clientpositive/multi_insert_mixed.q
index 7be6d13513..a5c1e8738c 100644
--- ql/src/test/queries/clientpositive/multi_insert_mixed.q
+++ ql/src/test/queries/clientpositive/multi_insert_mixed.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create table src_multi1 like src;
 create table src_multi2 like src;
diff --git ql/src/test/queries/clientpositive/multi_insert_move_tasks_share_dependencies.q ql/src/test/queries/clientpositive/multi_insert_move_tasks_share_dependencies.q
index 3ddaa47f78..670211c6aa 100644
--- ql/src/test/queries/clientpositive/multi_insert_move_tasks_share_dependencies.q
+++ ql/src/test/queries/clientpositive/multi_insert_move_tasks_share_dependencies.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.multi.insert.move.tasks.share.dependencies=true;
 set hive.stats.dbclass=fs;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/multi_insert_union_src.q ql/src/test/queries/clientpositive/multi_insert_union_src.q
index 51b4695a86..ae4c8d4b60 100644
--- ql/src/test/queries/clientpositive/multi_insert_union_src.q
+++ ql/src/test/queries/clientpositive/multi_insert_union_src.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table if exists src2;
 drop table if exists src_multi1;
diff --git ql/src/test/queries/clientpositive/multi_join_union.q ql/src/test/queries/clientpositive/multi_join_union.q
index 2bdc9212fb..fad3577331 100644
--- ql/src/test/queries/clientpositive/multi_join_union.q
+++ ql/src/test/queries/clientpositive/multi_join_union.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=true;
 
diff --git ql/src/test/queries/clientpositive/newline.q ql/src/test/queries/clientpositive/newline.q
index e7dcb62cee..584ff9805c 100644
--- ql/src/test/queries/clientpositive/newline.q
+++ ql/src/test/queries/clientpositive/newline.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 add file ../../data/scripts/newline.py;
 set hive.transform.escape.input=true;
diff --git ql/src/test/queries/clientpositive/no_hooks.q ql/src/test/queries/clientpositive/no_hooks.q
index 7e80a9dddd..6191743d9e 100644
--- ql/src/test/queries/clientpositive/no_hooks.q
+++ ql/src/test/queries/clientpositive/no_hooks.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.pre.hooks=;
 
diff --git ql/src/test/queries/clientpositive/noalias_subq1.q ql/src/test/queries/clientpositive/noalias_subq1.q
index cf49301e4e..c346f7eaba 100644
--- ql/src/test/queries/clientpositive/noalias_subq1.q
+++ ql/src/test/queries/clientpositive/noalias_subq1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 EXPLAIN
 SELECT c1 FROM (select value as c1, key as c2 from src) x where c2 < 100;
diff --git ql/src/test/queries/clientpositive/nomore_ambiguous_table_col.q ql/src/test/queries/clientpositive/nomore_ambiguous_table_col.q
index 6795475699..77b782cd24 100644
--- ql/src/test/queries/clientpositive/nomore_ambiguous_table_col.q
+++ ql/src/test/queries/clientpositive/nomore_ambiguous_table_col.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- was negative/ambiguous_table_col.q
 
 drop table ambiguous;
diff --git ql/src/test/queries/clientpositive/non_ascii_literal1.q ql/src/test/queries/clientpositive/non_ascii_literal1.q
index 9573653591..ae6d16b8cb 100644
--- ql/src/test/queries/clientpositive/non_ascii_literal1.q
+++ ql/src/test/queries/clientpositive/non_ascii_literal1.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select concat("Абвгде", "谢谢") from src limit 1;
diff --git ql/src/test/queries/clientpositive/non_native_window_udf.q ql/src/test/queries/clientpositive/non_native_window_udf.q
index c3b88453d8..1a49398202 100644
--- ql/src/test/queries/clientpositive/non_native_window_udf.q
+++ ql/src/test/queries/clientpositive/non_native_window_udf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 
 create temporary function mylastval as 'org.apache.hadoop.hive.ql.udf.generic.GenericUDAFLastValue';
 
diff --git ql/src/test/queries/clientpositive/nonblock_op_deduplicate.q ql/src/test/queries/clientpositive/nonblock_op_deduplicate.q
index 77dee5a976..677b4c9d27 100644
--- ql/src/test/queries/clientpositive/nonblock_op_deduplicate.q
+++ ql/src/test/queries/clientpositive/nonblock_op_deduplicate.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/nonmr_fetch.q ql/src/test/queries/clientpositive/nonmr_fetch.q
index dffdc2c7a8..1b5ab5615f 100644
--- ql/src/test/queries/clientpositive/nonmr_fetch.q
+++ ql/src/test/queries/clientpositive/nonmr_fetch.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=minimal;
 set hive.exec.submitviachild=false;
diff --git ql/src/test/queries/clientpositive/nonmr_fetch_threshold.q ql/src/test/queries/clientpositive/nonmr_fetch_threshold.q
index ddb9d8235f..6cc4543aab 100644
--- ql/src/test/queries/clientpositive/nonmr_fetch_threshold.q
+++ ql/src/test/queries/clientpositive/nonmr_fetch_threshold.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 set hive.explain.user=true;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/nonreserved_keywords_insert_into1.q ql/src/test/queries/clientpositive/nonreserved_keywords_insert_into1.q
index 5393664159..c27394122b 100644
--- ql/src/test/queries/clientpositive/nonreserved_keywords_insert_into1.q
+++ ql/src/test/queries/clientpositive/nonreserved_keywords_insert_into1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE `insert`;
 
 CREATE TABLE `insert` (key INT, `as` STRING);
diff --git ql/src/test/queries/clientpositive/notable_alias1.q ql/src/test/queries/clientpositive/notable_alias1.q
index 90230d52c1..846660b961 100644
--- ql/src/test/queries/clientpositive/notable_alias1.q
+++ ql/src/test/queries/clientpositive/notable_alias1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(dummy STRING, key INT, value DOUBLE) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/notable_alias2.q ql/src/test/queries/clientpositive/notable_alias2.q
index 2f32b328bd..be858074ac 100644
--- ql/src/test/queries/clientpositive/notable_alias2.q
+++ ql/src/test/queries/clientpositive/notable_alias2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(dummy STRING, key INT, value DOUBLE) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/notable_alias3.q ql/src/test/queries/clientpositive/notable_alias3.q
index aa79674409..9cb76053df 100644
--- ql/src/test/queries/clientpositive/notable_alias3.q
+++ ql/src/test/queries/clientpositive/notable_alias3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(c string, key INT, value DOUBLE) STORED AS TEXTFILE;
 
 FROM src
diff --git ql/src/test/queries/clientpositive/null_cast.q ql/src/test/queries/clientpositive/null_cast.q
index bd0cb8d12d..a2b734a6cc 100644
--- ql/src/test/queries/clientpositive/null_cast.q
+++ ql/src/test/queries/clientpositive/null_cast.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN SELECT ARRAY(NULL, 0), 
                ARRAY(NULL, ARRAY()),
                ARRAY(NULL, MAP()),
diff --git ql/src/test/queries/clientpositive/null_column.q ql/src/test/queries/clientpositive/null_column.q
index 4b43d608e8..4275ce5537 100644
--- ql/src/test/queries/clientpositive/null_column.q
+++ ql/src/test/queries/clientpositive/null_column.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 
diff --git ql/src/test/queries/clientpositive/nullgroup.q ql/src/test/queries/clientpositive/nullgroup.q
index 1e4cffc4cb..7dd134bc01 100644
--- ql/src/test/queries/clientpositive/nullgroup.q
+++ ql/src/test/queries/clientpositive/nullgroup.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/nullgroup2.q ql/src/test/queries/clientpositive/nullgroup2.q
index bdee893f4b..532225373d 100644
--- ql/src/test/queries/clientpositive/nullgroup2.q
+++ ql/src/test/queries/clientpositive/nullgroup2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/nullgroup4.q ql/src/test/queries/clientpositive/nullgroup4.q
index 61b0f2c902..7b75d59f56 100644
--- ql/src/test/queries/clientpositive/nullgroup4.q
+++ ql/src/test/queries/clientpositive/nullgroup4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=true;
diff --git ql/src/test/queries/clientpositive/nullgroup4_multi_distinct.q ql/src/test/queries/clientpositive/nullgroup4_multi_distinct.q
index 500cb9ef9a..fee55752f0 100644
--- ql/src/test/queries/clientpositive/nullgroup4_multi_distinct.q
+++ ql/src/test/queries/clientpositive/nullgroup4_multi_distinct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr=true;
 set hive.groupby.skewindata=false;
diff --git ql/src/test/queries/clientpositive/num_op_type_conv.q ql/src/test/queries/clientpositive/num_op_type_conv.q
index d51c2107e1..086a760446 100644
--- ql/src/test/queries/clientpositive/num_op_type_conv.q
+++ ql/src/test/queries/clientpositive/num_op_type_conv.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN SELECT null + 7, 1.0 - null, null + null,
diff --git ql/src/test/queries/clientpositive/offset_limit.q ql/src/test/queries/clientpositive/offset_limit.q
index 8f50f300d0..eb97bcf856 100644
--- ql/src/test/queries/clientpositive/offset_limit.q
+++ ql/src/test/queries/clientpositive/offset_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 SELECT src.key, sum(substr(src.value,5)) FROM src GROUP BY src.key ORDER BY src.key LIMIT 10,10;
 
diff --git ql/src/test/queries/clientpositive/offset_limit_global_optimizer.q ql/src/test/queries/clientpositive/offset_limit_global_optimizer.q
index 5ddb9a6ce3..52cab5ebc1 100644
--- ql/src/test/queries/clientpositive/offset_limit_global_optimizer.q
+++ ql/src/test/queries/clientpositive/offset_limit_global_optimizer.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.limit.optimize.enable=true;
 set hive.limit.row.max.size=12;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/offset_limit_ppd_optimizer.q ql/src/test/queries/clientpositive/offset_limit_ppd_optimizer.q
index 4e05868490..1a600e38ce 100644
--- ql/src/test/queries/clientpositive/offset_limit_ppd_optimizer.q
+++ ql/src/test/queries/clientpositive/offset_limit_ppd_optimizer.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 set hive.limit.pushdown.memory.usage=0.3f;
 set hive.optimize.reducededuplication.min.reducer=1;
diff --git ql/src/test/queries/clientpositive/ops_comparison.q ql/src/test/queries/clientpositive/ops_comparison.q
index ec9e8076fd..76b7ee0b27 100644
--- ql/src/test/queries/clientpositive/ops_comparison.q
+++ ql/src/test/queries/clientpositive/ops_comparison.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 select 1.0 < 2.0 from src limit 1;
diff --git ql/src/test/queries/clientpositive/optimize_nullscan.q ql/src/test/queries/clientpositive/optimize_nullscan.q
index ac5627580a..bda17d78fd 100644
--- ql/src/test/queries/clientpositive/optimize_nullscan.q
+++ ql/src/test/queries/clientpositive/optimize_nullscan.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=false;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/optional_outer.q ql/src/test/queries/clientpositive/optional_outer.q
index 518e9c5c3c..e12a8ac7ff 100644
--- ql/src/test/queries/clientpositive/optional_outer.q
+++ ql/src/test/queries/clientpositive/optional_outer.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 EXPLAIN SELECT * FROM src a LEFT OUTER JOIN src b on (a.key=b.key);
 EXPLAIN SELECT * FROM src a LEFT JOIN src b on (a.key=b.key);
diff --git ql/src/test/queries/clientpositive/orc_avro_partition_uniontype.q ql/src/test/queries/clientpositive/orc_avro_partition_uniontype.q
index 47ac526152..ab484ced73 100644
--- ql/src/test/queries/clientpositive/orc_avro_partition_uniontype.q
+++ ql/src/test/queries/clientpositive/orc_avro_partition_uniontype.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.exec.schema.evolution = false;
 
 CREATE TABLE avro_orc_partitioned_uniontype (a uniontype<boolean, string>) PARTITIONED BY (b int) STORED AS ORC;
diff --git ql/src/test/queries/clientpositive/orc_create.q ql/src/test/queries/clientpositive/orc_create.q
index 06472008ed..ec0f700959 100644
--- ql/src/test/queries/clientpositive/orc_create.q
+++ ql/src/test/queries/clientpositive/orc_create.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/orc_createas1.q ql/src/test/queries/clientpositive/orc_createas1.q
index b39d65de3d..ee7881c60e 100644
--- ql/src/test/queries/clientpositive/orc_createas1.q
+++ ql/src/test/queries/clientpositive/orc_createas1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set mapred.max.split.size=100;
 set mapred.min.split.size=1;
diff --git ql/src/test/queries/clientpositive/orc_dictionary_threshold.q ql/src/test/queries/clientpositive/orc_dictionary_threshold.q
index a0eaab75fa..de7b4a49af 100644
--- ql/src/test/queries/clientpositive/orc_dictionary_threshold.q
+++ ql/src/test/queries/clientpositive/orc_dictionary_threshold.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.orc.dictionary.key.size.threshold=-1;
 
 -- Set the threshold to -1 to guarantee dictionary encoding is turned off
diff --git ql/src/test/queries/clientpositive/orc_diff_part_cols.q ql/src/test/queries/clientpositive/orc_diff_part_cols.q
index 3bfdf99a0d..e11890805a 100644
--- ql/src/test/queries/clientpositive/orc_diff_part_cols.q
+++ ql/src/test/queries/clientpositive/orc_diff_part_cols.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/orc_diff_part_cols2.q ql/src/test/queries/clientpositive/orc_diff_part_cols2.q
index 3fe42bb21d..ce86e5d323 100644
--- ql/src/test/queries/clientpositive/orc_diff_part_cols2.q
+++ ql/src/test/queries/clientpositive/orc_diff_part_cols2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Create a table with one column, write to it, then add an additional column
 -- This can break reads
 
diff --git ql/src/test/queries/clientpositive/orc_empty_files.q ql/src/test/queries/clientpositive/orc_empty_files.q
index dd0e81a1a2..11e8c23e10 100644
--- ql/src/test/queries/clientpositive/orc_empty_files.q
+++ ql/src/test/queries/clientpositive/orc_empty_files.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE test_orc (key STRING, cnt INT)
 CLUSTERED BY (key) INTO 3 BUCKETS
 ROW FORMAT SERDE 'org.apache.hadoop.hive.ql.io.orc.OrcSerde' 
diff --git ql/src/test/queries/clientpositive/orc_empty_strings.q ql/src/test/queries/clientpositive/orc_empty_strings.q
index c69414a034..e0d4e95d27 100644
--- ql/src/test/queries/clientpositive/orc_empty_strings.q
+++ ql/src/test/queries/clientpositive/orc_empty_strings.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE test_orc (key STRING)
diff --git ql/src/test/queries/clientpositive/orc_int_type_promotion.q ql/src/test/queries/clientpositive/orc_int_type_promotion.q
index 9be46f0d5a..aa373a0bcb 100644
--- ql/src/test/queries/clientpositive/orc_int_type_promotion.q
+++ ql/src/test/queries/clientpositive/orc_int_type_promotion.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.metastore.disallow.incompatible.col.type.changes=false;
 create table if not exists alltypes (
diff --git ql/src/test/queries/clientpositive/orc_llap.q ql/src/test/queries/clientpositive/orc_llap.q
index 7b7f240464..7a41a20fe7 100644
--- ql/src/test/queries/clientpositive/orc_llap.q
+++ ql/src/test/queries/clientpositive/orc_llap.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 
diff --git ql/src/test/queries/clientpositive/orc_llap_nonvector.q ql/src/test/queries/clientpositive/orc_llap_nonvector.q
index 1fc60b2fe8..5616769299 100644
--- ql/src/test/queries/clientpositive/orc_llap_nonvector.q
+++ ql/src/test/queries/clientpositive/orc_llap_nonvector.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 
diff --git ql/src/test/queries/clientpositive/orc_merge1.q ql/src/test/queries/clientpositive/orc_merge1.q
index f704a1c8c1..1f1af37723 100644
--- ql/src/test/queries/clientpositive/orc_merge1.q
+++ ql/src/test/queries/clientpositive/orc_merge1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/orc_merge10.q ql/src/test/queries/clientpositive/orc_merge10.q
index b84ed80a3f..263f478d09 100644
--- ql/src/test/queries/clientpositive/orc_merge10.q
+++ ql/src/test/queries/clientpositive/orc_merge10.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/orc_merge13.q ql/src/test/queries/clientpositive/orc_merge13.q
index 8f013a0d09..ff98b64d84 100644
--- ql/src/test/queries/clientpositive/orc_merge13.q
+++ ql/src/test/queries/clientpositive/orc_merge13.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 drop table aa;
 create table aa (a string, b int) stored as orc;
 insert into table aa values("b",2);
diff --git ql/src/test/queries/clientpositive/orc_merge2.q ql/src/test/queries/clientpositive/orc_merge2.q
index 667e878518..3253c4411a 100644
--- ql/src/test/queries/clientpositive/orc_merge2.q
+++ ql/src/test/queries/clientpositive/orc_merge2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.merge.orcfile.stripe.level=true;
diff --git ql/src/test/queries/clientpositive/orc_merge3.q ql/src/test/queries/clientpositive/orc_merge3.q
index d5230b1ae2..3ab1bd666b 100644
--- ql/src/test/queries/clientpositive/orc_merge3.q
+++ ql/src/test/queries/clientpositive/orc_merge3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.merge.orcfile.stripe.level=true;
diff --git ql/src/test/queries/clientpositive/orc_merge4.q ql/src/test/queries/clientpositive/orc_merge4.q
index 0f916413b1..ca9335c815 100644
--- ql/src/test/queries/clientpositive/orc_merge4.q
+++ ql/src/test/queries/clientpositive/orc_merge4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.merge.orcfile.stripe.level=true;
diff --git ql/src/test/queries/clientpositive/orc_merge9.q ql/src/test/queries/clientpositive/orc_merge9.q
index 5f387bacea..3ac7ff725c 100644
--- ql/src/test/queries/clientpositive/orc_merge9.q
+++ ql/src/test/queries/clientpositive/orc_merge9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 create table ts_merge (
 userid bigint,
 string1 string,
diff --git ql/src/test/queries/clientpositive/orc_merge_diff_fs.q ql/src/test/queries/clientpositive/orc_merge_diff_fs.q
index 94c0e6a35b..8dd9f74d44 100644
--- ql/src/test/queries/clientpositive/orc_merge_diff_fs.q
+++ ql/src/test/queries/clientpositive/orc_merge_diff_fs.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/orc_merge_incompat3.q ql/src/test/queries/clientpositive/orc_merge_incompat3.q
index d6be11186c..562f998f1c 100644
--- ql/src/test/queries/clientpositive/orc_merge_incompat3.q
+++ ql/src/test/queries/clientpositive/orc_merge_incompat3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 create table concat_incompat like alltypesorc;
 
 load data local inpath '../../data/files/alltypesorc' into table concat_incompat;
diff --git ql/src/test/queries/clientpositive/orc_merge_incompat_writer_version.q ql/src/test/queries/clientpositive/orc_merge_incompat_writer_version.q
index 5e188f7d36..5febb3bd5d 100644
--- ql/src/test/queries/clientpositive/orc_merge_incompat_writer_version.q
+++ ql/src/test/queries/clientpositive/orc_merge_incompat_writer_version.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 DROP TABLE part_orc;
 CREATE TABLE part_orc(
   p_partkey int,
diff --git ql/src/test/queries/clientpositive/orc_mr_pathalias.q ql/src/test/queries/clientpositive/orc_mr_pathalias.q
index b92bb9c06c..ded6f252d4 100644
--- ql/src/test/queries/clientpositive/orc_mr_pathalias.q
+++ ql/src/test/queries/clientpositive/orc_mr_pathalias.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create database if not exists test;
 drop table if exists test.test_orc_src;
 drop table if exists test.test_orc_src2;
diff --git ql/src/test/queries/clientpositive/orc_null_check.q ql/src/test/queries/clientpositive/orc_null_check.q
index 2cb119024a..8b51bc95cc 100644
--- ql/src/test/queries/clientpositive/orc_null_check.q
+++ ql/src/test/queries/clientpositive/orc_null_check.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table listtable(l array<string>);
 create table listtable_orc(l array<string>) stored as orc;
 
diff --git ql/src/test/queries/clientpositive/orc_ppd_basic.q ql/src/test/queries/clientpositive/orc_ppd_basic.q
index 1c9e4dd6cb..dfd89a75ff 100644
--- ql/src/test/queries/clientpositive/orc_ppd_basic.q
+++ ql/src/test/queries/clientpositive/orc_ppd_basic.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 SET hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/orc_ppd_boolean.q ql/src/test/queries/clientpositive/orc_ppd_boolean.q
index d344714e2d..75650710d5 100644
--- ql/src/test/queries/clientpositive/orc_ppd_boolean.q
+++ ql/src/test/queries/clientpositive/orc_ppd_boolean.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
 SET mapred.max.split.size=5000;
diff --git ql/src/test/queries/clientpositive/orc_ppd_char.q ql/src/test/queries/clientpositive/orc_ppd_char.q
index 5c34d04636..48cbcf7d48 100644
--- ql/src/test/queries/clientpositive/orc_ppd_char.q
+++ ql/src/test/queries/clientpositive/orc_ppd_char.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
diff --git ql/src/test/queries/clientpositive/orc_ppd_date.q ql/src/test/queries/clientpositive/orc_ppd_date.q
index 3d21d4120b..2252b02050 100644
--- ql/src/test/queries/clientpositive/orc_ppd_date.q
+++ ql/src/test/queries/clientpositive/orc_ppd_date.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
 SET mapred.max.split.size=5000;
diff --git ql/src/test/queries/clientpositive/orc_ppd_decimal.q ql/src/test/queries/clientpositive/orc_ppd_decimal.q
index a54b8629ef..91faa191b5 100644
--- ql/src/test/queries/clientpositive/orc_ppd_decimal.q
+++ ql/src/test/queries/clientpositive/orc_ppd_decimal.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
 SET mapred.max.split.size=5000;
diff --git ql/src/test/queries/clientpositive/orc_ppd_is_null.q ql/src/test/queries/clientpositive/orc_ppd_is_null.q
index 862a9616b1..241f4d073f 100644
--- ql/src/test/queries/clientpositive/orc_ppd_is_null.q
+++ ql/src/test/queries/clientpositive/orc_ppd_is_null.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
 SET mapred.max.split.size=5000;
diff --git ql/src/test/queries/clientpositive/orc_ppd_timestamp.q ql/src/test/queries/clientpositive/orc_ppd_timestamp.q
index dafd6cfb45..062b5bea6c 100644
--- ql/src/test/queries/clientpositive/orc_ppd_timestamp.q
+++ ql/src/test/queries/clientpositive/orc_ppd_timestamp.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
 SET mapred.max.split.size=5000;
diff --git ql/src/test/queries/clientpositive/orc_ppd_varchar.q ql/src/test/queries/clientpositive/orc_ppd_varchar.q
index 0fecc664e4..e17f547230 100644
--- ql/src/test/queries/clientpositive/orc_ppd_varchar.q
+++ ql/src/test/queries/clientpositive/orc_ppd_varchar.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
 SET mapred.max.split.size=5000;
diff --git ql/src/test/queries/clientpositive/orc_remove_cols.q ql/src/test/queries/clientpositive/orc_remove_cols.q
index c3c95f36dd..fe7cc74f35 100644
--- ql/src/test/queries/clientpositive/orc_remove_cols.q
+++ ql/src/test/queries/clientpositive/orc_remove_cols.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.exec.schema.evolution=false;
 set hive.fetch.task.conversion=more;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/orc_schema_evolution.q ql/src/test/queries/clientpositive/orc_schema_evolution.q
index aa6fc58716..639dbb9531 100644
--- ql/src/test/queries/clientpositive/orc_schema_evolution.q
+++ ql/src/test/queries/clientpositive/orc_schema_evolution.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=none;
 SET hive.exec.schema.evolution=true;
 
diff --git ql/src/test/queries/clientpositive/orc_vectorization_ppd.q ql/src/test/queries/clientpositive/orc_vectorization_ppd.q
index 1760813769..cc3a7ab3ad 100644
--- ql/src/test/queries/clientpositive/orc_vectorization_ppd.q
+++ ql/src/test/queries/clientpositive/orc_vectorization_ppd.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- create table with 1000 rows
 create table srcorc(key string, value string) stored as textfile;
diff --git ql/src/test/queries/clientpositive/order.q ql/src/test/queries/clientpositive/order.q
index d389892eda..9a0c2ebfa7 100644
--- ql/src/test/queries/clientpositive/order.q
+++ ql/src/test/queries/clientpositive/order.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 SELECT x.* FROM SRC x ORDER BY key limit 10;
 
diff --git ql/src/test/queries/clientpositive/order2.q ql/src/test/queries/clientpositive/order2.q
index 504589a696..57615ac3ba 100644
--- ql/src/test/queries/clientpositive/order2.q
+++ ql/src/test/queries/clientpositive/order2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 
diff --git ql/src/test/queries/clientpositive/order_within_subquery.q ql/src/test/queries/clientpositive/order_within_subquery.q
index daac4a6fb5..c51165c334 100644
--- ql/src/test/queries/clientpositive/order_within_subquery.q
+++ ql/src/test/queries/clientpositive/order_within_subquery.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 select t1.p_name, t2.p_name 
 from (select * from part order by p_size limit 10) t1 join part t2 on t1.p_partkey = t2.p_partkey and t1.p_size = t2.p_size 
 where t1.p_partkey < 100000;
diff --git ql/src/test/queries/clientpositive/outer_join_ppr.q ql/src/test/queries/clientpositive/outer_join_ppr.q
index 60a06ae11e..1063a52d57 100644
--- ql/src/test/queries/clientpositive/outer_join_ppr.q
+++ ql/src/test/queries/clientpositive/outer_join_ppr.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 
diff --git ql/src/test/queries/clientpositive/overridden_confs.q ql/src/test/queries/clientpositive/overridden_confs.q
index c7e0551712..227f4dcfd2 100644
--- ql/src/test/queries/clientpositive/overridden_confs.q
+++ ql/src/test/queries/clientpositive/overridden_confs.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.VerifyOverriddenConfigsHook;
 set some.hive.config.doesnt.exit=abc;
 
diff --git ql/src/test/queries/clientpositive/parallel.q ql/src/test/queries/clientpositive/parallel.q
index f2f0d3551c..ae6ae9c1ee 100644
--- ql/src/test/queries/clientpositive/parallel.q
+++ ql/src/test/queries/clientpositive/parallel.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.query.name='test_parallel';
 set hive.exec.parallel=true;
diff --git ql/src/test/queries/clientpositive/parallel_colstats.q ql/src/test/queries/clientpositive/parallel_colstats.q
index 86603c110a..541b0e69c6 100644
--- ql/src/test/queries/clientpositive/parallel_colstats.q
+++ ql/src/test/queries/clientpositive/parallel_colstats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set mapred.job.name='test_parallel';
 set hive.exec.parallel=true;
diff --git ql/src/test/queries/clientpositive/parallel_join0.q ql/src/test/queries/clientpositive/parallel_join0.q
index 69afcb126e..544a5a1c0c 100644
--- ql/src/test/queries/clientpositive/parallel_join0.q
+++ ql/src/test/queries/clientpositive/parallel_join0.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set mapreduce.job.reduces=4;
 
diff --git ql/src/test/queries/clientpositive/parallel_join1.q ql/src/test/queries/clientpositive/parallel_join1.q
index ac92efd70b..3bd5fbe0ad 100644
--- ql/src/test/queries/clientpositive/parallel_join1.q
+++ ql/src/test/queries/clientpositive/parallel_join1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set mapreduce.job.reduces=4;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
diff --git ql/src/test/queries/clientpositive/parenthesis_star_by.q ql/src/test/queries/clientpositive/parenthesis_star_by.q
index 925bc78f22..ad94c292dd 100644
--- ql/src/test/queries/clientpositive/parenthesis_star_by.q
+++ ql/src/test/queries/clientpositive/parenthesis_star_by.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 SELECT key, value FROM src CLUSTER BY key, value;
 SELECT key, value FROM src ORDER BY key ASC, value ASC;
diff --git ql/src/test/queries/clientpositive/parquet_array_map_emptynullvals.q ql/src/test/queries/clientpositive/parquet_array_map_emptynullvals.q
index eeae5cf72f..03ed961fa2 100644
--- ql/src/test/queries/clientpositive/parquet_array_map_emptynullvals.q
+++ ql/src/test/queries/clientpositive/parquet_array_map_emptynullvals.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table if exists testSets;
 drop table if exists testSets2;
 create table testSets (
diff --git ql/src/test/queries/clientpositive/parquet_ctas.q ql/src/test/queries/clientpositive/parquet_ctas.q
index b8a3f95e18..1b1dd0cdb0 100644
--- ql/src/test/queries/clientpositive/parquet_ctas.q
+++ ql/src/test/queries/clientpositive/parquet_ctas.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table staging;
 drop table parquet_ctas;
diff --git ql/src/test/queries/clientpositive/parquet_join.q ql/src/test/queries/clientpositive/parquet_join.q
index 2a2e85bf2e..09b85d5880 100644
--- ql/src/test/queries/clientpositive/parquet_join.q
+++ ql/src/test/queries/clientpositive/parquet_join.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 drop table if exists staging;
diff --git ql/src/test/queries/clientpositive/parquet_partitioned.q ql/src/test/queries/clientpositive/parquet_partitioned.q
index 4f6a1a85ae..f588dcdf65 100644
--- ql/src/test/queries/clientpositive/parquet_partitioned.q
+++ ql/src/test/queries/clientpositive/parquet_partitioned.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.exec.dynamic.partition.mode=nonstrict;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/parquet_ppd.q ql/src/test/queries/clientpositive/parquet_ppd.q
index 56ca96ee61..5e82f958ae 100644
--- ql/src/test/queries/clientpositive/parquet_ppd.q
+++ ql/src/test/queries/clientpositive/parquet_ppd.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE parquet_tbl(
   key int,
   ldate string)
diff --git ql/src/test/queries/clientpositive/parquet_ppd_boolean.q ql/src/test/queries/clientpositive/parquet_ppd_boolean.q
index 059da6890b..818f65c62a 100644
--- ql/src/test/queries/clientpositive/parquet_ppd_boolean.q
+++ ql/src/test/queries/clientpositive/parquet_ppd_boolean.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
 SET mapred.max.split.size=5000;
diff --git ql/src/test/queries/clientpositive/parquet_ppd_char.q ql/src/test/queries/clientpositive/parquet_ppd_char.q
index eaddcb4fc2..664bd35af8 100644
--- ql/src/test/queries/clientpositive/parquet_ppd_char.q
+++ ql/src/test/queries/clientpositive/parquet_ppd_char.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET hive.optimize.ppd=true;
 SET mapred.min.split.size=1000;
diff --git ql/src/test/queries/clientpositive/parquet_ppd_date.q ql/src/test/queries/clientpositive/parquet_ppd_date.q
index 41d0d64a7c..c635128722 100644
--- ql/src/test/queries/clientpositive/parquet_ppd_date.q
+++ ql/src/test/queries/clientpositive/parquet_ppd_date.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET hive.optimize.ppd=true;
 SET mapred.min.split.size=1000;
diff --git ql/src/test/queries/clientpositive/parquet_ppd_decimal.q ql/src/test/queries/clientpositive/parquet_ppd_decimal.q
index ff883dbf48..684544c40c 100644
--- ql/src/test/queries/clientpositive/parquet_ppd_decimal.q
+++ ql/src/test/queries/clientpositive/parquet_ppd_decimal.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
 SET mapred.max.split.size=5000;
diff --git ql/src/test/queries/clientpositive/parquet_ppd_timestamp.q ql/src/test/queries/clientpositive/parquet_ppd_timestamp.q
index 1b9f6ff1a3..60fbe53c68 100644
--- ql/src/test/queries/clientpositive/parquet_ppd_timestamp.q
+++ ql/src/test/queries/clientpositive/parquet_ppd_timestamp.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET hive.optimize.ppd=true;
 SET mapred.min.split.size=1000;
diff --git ql/src/test/queries/clientpositive/parquet_ppd_varchar.q ql/src/test/queries/clientpositive/parquet_ppd_varchar.q
index 6449c6de0f..c30f0b3e7a 100644
--- ql/src/test/queries/clientpositive/parquet_ppd_varchar.q
+++ ql/src/test/queries/clientpositive/parquet_ppd_varchar.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET hive.optimize.ppd=true;
 SET mapred.min.split.size=1000;
diff --git ql/src/test/queries/clientpositive/parquet_read_backward_compatible_files.q ql/src/test/queries/clientpositive/parquet_read_backward_compatible_files.q
index f4928c7872..b2fa90e423 100644
--- ql/src/test/queries/clientpositive/parquet_read_backward_compatible_files.q
+++ ql/src/test/queries/clientpositive/parquet_read_backward_compatible_files.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 -- This test makes sure that parquet can read older parquet files written by Hive <= 0.12
 -- alltypesparquet is a files written by older version of Hive
 
diff --git ql/src/test/queries/clientpositive/parquet_schema_evolution.q ql/src/test/queries/clientpositive/parquet_schema_evolution.q
index e767b8186e..00cad9ef92 100644
--- ql/src/test/queries/clientpositive/parquet_schema_evolution.q
+++ ql/src/test/queries/clientpositive/parquet_schema_evolution.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 -- Some tables might have extra columns and struct elements on the schema than the on Parquet schema;
 -- This is called 'schema evolution' as the Parquet file is not ready yet for such new columns;
diff --git ql/src/test/queries/clientpositive/parquet_serde.q ql/src/test/queries/clientpositive/parquet_serde.q
index 275f92ad93..9661f5b3bb 100644
--- ql/src/test/queries/clientpositive/parquet_serde.q
+++ ql/src/test/queries/clientpositive/parquet_serde.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 DROP TABLE if exists parquet_mixed_fileformat;
 
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_0.q ql/src/test/queries/clientpositive/parquet_vectorization_0.q
index 69628b8a0d..fa8ec8633c 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_0.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_0.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcbucket
+--! qt:dataset:src
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_1.q ql/src/test/queries/clientpositive/parquet_vectorization_1.q
index 95b2c9e82f..311334da11 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_1.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 set hive.vectorized.execution.reduce.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_10.q ql/src/test/queries/clientpositive/parquet_vectorization_10.q
index 14077e377a..c560515a5f 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_10.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_11.q ql/src/test/queries/clientpositive/parquet_vectorization_11.q
index 48ddecf87a..a6e6810f0d 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_11.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_12.q ql/src/test/queries/clientpositive/parquet_vectorization_12.q
index e3606e6a80..ff6949aefe 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_12.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_13.q ql/src/test/queries/clientpositive/parquet_vectorization_13.q
index 07633308bd..e5f48c8c65 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_13.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_13.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_14.q ql/src/test/queries/clientpositive/parquet_vectorization_14.q
index ac8eecc088..3ec437f754 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_14.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_14.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_15.q ql/src/test/queries/clientpositive/parquet_vectorization_15.q
index 4024b32a38..69065232e5 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_15.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_15.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_16.q ql/src/test/queries/clientpositive/parquet_vectorization_16.q
index c773e9ee7b..49d7b5a99c 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_16.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_16.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_17.q ql/src/test/queries/clientpositive/parquet_vectorization_17.q
index 7a216b755a..dafe677ff9 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_17.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_17.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_2.q ql/src/test/queries/clientpositive/parquet_vectorization_2.q
index 193523e781..a2c87f73fb 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_2.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_3.q ql/src/test/queries/clientpositive/parquet_vectorization_3.q
index a58e60a789..7b08952982 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_3.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_4.q ql/src/test/queries/clientpositive/parquet_vectorization_4.q
index 78e5ada3d9..d2bd83241c 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_4.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_5.q ql/src/test/queries/clientpositive/parquet_vectorization_5.q
index d5758e718b..071048c99e 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_5.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_6.q ql/src/test/queries/clientpositive/parquet_vectorization_6.q
index 50f987e9e5..7a7a18b0c9 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_6.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_7.q ql/src/test/queries/clientpositive/parquet_vectorization_7.q
index 1888535262..d0a73a3618 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_7.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_8.q ql/src/test/queries/clientpositive/parquet_vectorization_8.q
index 7d3223eebf..4d97cad717 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_8.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_9.q ql/src/test/queries/clientpositive/parquet_vectorization_9.q
index c773e9ee7b..49d7b5a99c 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_9.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_decimal_date.q ql/src/test/queries/clientpositive/parquet_vectorization_decimal_date.q
index fac6ad9370..b7c88a0bd0 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_decimal_date.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_decimal_date.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_div0.q ql/src/test/queries/clientpositive/parquet_vectorization_div0.q
index e8a4aa7e55..feeed574d2 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_div0.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_div0.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled = true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_limit.q ql/src/test/queries/clientpositive/parquet_vectorization_limit.q
index 76d1bd5c1a..399c67eb3c 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_limit.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_nested_udf.q ql/src/test/queries/clientpositive/parquet_vectorization_nested_udf.q
index 2f65b40b02..c488f891cc 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_nested_udf.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_nested_udf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_not.q ql/src/test/queries/clientpositive/parquet_vectorization_not.q
index 343b8577d5..70ee84330b 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_not.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_not.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_offset_limit.q ql/src/test/queries/clientpositive/parquet_vectorization_offset_limit.q
index 99e6139bd2..e89966b9d2 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_offset_limit.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_offset_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_part.q ql/src/test/queries/clientpositive/parquet_vectorization_part.q
index 49eecf1b12..66fe98129c 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_part.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_part_project.q ql/src/test/queries/clientpositive/parquet_vectorization_part_project.q
index 0eb8965ada..d5b2e3c8da 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_part_project.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_part_project.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_part_varchar.q ql/src/test/queries/clientpositive/parquet_vectorization_part_varchar.q
index b231b371c1..e266d582de 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_part_varchar.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_part_varchar.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/parquet_vectorization_pushdown.q ql/src/test/queries/clientpositive/parquet_vectorization_pushdown.q
index b83b556635..2c52bebfb1 100644
--- ql/src/test/queries/clientpositive/parquet_vectorization_pushdown.q
+++ ql/src/test/queries/clientpositive/parquet_vectorization_pushdown.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesparquet
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/parquet_write_correct_definition_levels.q ql/src/test/queries/clientpositive/parquet_write_correct_definition_levels.q
index 172fda63ce..8992ccd6df 100644
--- ql/src/test/queries/clientpositive/parquet_write_correct_definition_levels.q
+++ ql/src/test/queries/clientpositive/parquet_write_correct_definition_levels.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE text_tbl (a STRUCT<b:STRUCT<c:INT>>)
 STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/partcols1.q ql/src/test/queries/clientpositive/partcols1.q
index 03a5760e69..7f47005a91 100644
--- ql/src/test/queries/clientpositive/partcols1.q
+++ ql/src/test/queries/clientpositive/partcols1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 create table test1(col1 string) partitioned by (partitionId int);
 insert overwrite table test1 partition (partitionId=1)
diff --git ql/src/test/queries/clientpositive/partialdhj.q ql/src/test/queries/clientpositive/partialdhj.q
index c4fe1f7771..ef60d4bc0b 100644
--- ql/src/test/queries/clientpositive/partialdhj.q
+++ ql/src/test/queries/clientpositive/partialdhj.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.auto.convert.join=true;
 set hive.strict.checks.cartesian.product=false;
 set hive.merge.nway.joins=false;
diff --git ql/src/test/queries/clientpositive/partition_boolexpr.q ql/src/test/queries/clientpositive/partition_boolexpr.q
index 6178aabddc..cae3b7678f 100644
--- ql/src/test/queries/clientpositive/partition_boolexpr.q
+++ ql/src/test/queries/clientpositive/partition_boolexpr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 -- create testing table.
 create table part_boolexpr(key int, value string) partitioned by (dt int, ts string);
diff --git ql/src/test/queries/clientpositive/partition_char.q ql/src/test/queries/clientpositive/partition_char.q
index ca4447b8b7..4d97b6448d 100644
--- ql/src/test/queries/clientpositive/partition_char.q
+++ ql/src/test/queries/clientpositive/partition_char.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table partition_char_1;
 
diff --git ql/src/test/queries/clientpositive/partition_coltype_literals.q ql/src/test/queries/clientpositive/partition_coltype_literals.q
index 8da4876b70..e65371e8c8 100644
--- ql/src/test/queries/clientpositive/partition_coltype_literals.q
+++ ql/src/test/queries/clientpositive/partition_coltype_literals.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 set hive.compute.query.using.stats=false;
 drop table if exists partcoltypenum;
diff --git ql/src/test/queries/clientpositive/partition_condition_remover.q ql/src/test/queries/clientpositive/partition_condition_remover.q
index 39e58b8146..f417eb7be5 100644
--- ql/src/test/queries/clientpositive/partition_condition_remover.q
+++ ql/src/test/queries/clientpositive/partition_condition_remover.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 
 drop table foo;
 
diff --git ql/src/test/queries/clientpositive/partition_date.q ql/src/test/queries/clientpositive/partition_date.q
index ffac790076..3d131d8067 100644
--- ql/src/test/queries/clientpositive/partition_date.q
+++ ql/src/test/queries/clientpositive/partition_date.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table partition_date_1;
 
diff --git ql/src/test/queries/clientpositive/partition_date2.q ql/src/test/queries/clientpositive/partition_date2.q
index cb8e5db351..ae430e60df 100644
--- ql/src/test/queries/clientpositive/partition_date2.q
+++ ql/src/test/queries/clientpositive/partition_date2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.metadataonly=true;
 
diff --git ql/src/test/queries/clientpositive/partition_decode_name.q ql/src/test/queries/clientpositive/partition_decode_name.q
index a8381a4200..7d851d9dcc 100644
--- ql/src/test/queries/clientpositive/partition_decode_name.q
+++ ql/src/test/queries/clientpositive/partition_decode_name.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table sc as select * 
 from (select '2011-01-11', '2011-01-11+14:18:26' from src tablesample (1 rows)
       union all 
diff --git ql/src/test/queries/clientpositive/partition_multilevels.q ql/src/test/queries/clientpositive/partition_multilevels.q
index 5acc5bc4f3..5009769db7 100644
--- ql/src/test/queries/clientpositive/partition_multilevels.q
+++ ql/src/test/queries/clientpositive/partition_multilevels.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 create table partition_test_multilevel (key string, value string) partitioned by (level1 string, level2 string, level3 string);
 
diff --git ql/src/test/queries/clientpositive/partition_schema1.q ql/src/test/queries/clientpositive/partition_schema1.q
index 550ea47beb..b8482be8a3 100644
--- ql/src/test/queries/clientpositive/partition_schema1.q
+++ ql/src/test/queries/clientpositive/partition_schema1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 
 create table partition_schema1(key string, value string) partitioned by (dt string);
 
diff --git ql/src/test/queries/clientpositive/partition_serde_format.q ql/src/test/queries/clientpositive/partition_serde_format.q
index 9f7620c148..c583454331 100644
--- ql/src/test/queries/clientpositive/partition_serde_format.q
+++ ql/src/test/queries/clientpositive/partition_serde_format.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table src_part_serde (key int, value string) partitioned by (ds string) stored as sequencefile;
 insert overwrite table src_part_serde partition (ds='2011') select * from src;
 alter table src_part_serde set serde 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' with SERDEPROPERTIES ('serialization.format'='\t');
diff --git ql/src/test/queries/clientpositive/partition_shared_scan.q ql/src/test/queries/clientpositive/partition_shared_scan.q
index 7ddf294b6d..ccb8e74260 100644
--- ql/src/test/queries/clientpositive/partition_shared_scan.q
+++ ql/src/test/queries/clientpositive/partition_shared_scan.q
@@ -1,3 +1,5 @@
+--! qt:dataset:part
+--! qt:dataset:alltypesorc
 set hive.merge.nway.joins=false;
 
 drop table foo;
diff --git ql/src/test/queries/clientpositive/partition_special_char.q ql/src/test/queries/clientpositive/partition_special_char.q
index b0b1ff4db6..319671a4e5 100644
--- ql/src/test/queries/clientpositive/partition_special_char.q
+++ ql/src/test/queries/clientpositive/partition_special_char.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table sc as select * 
 from (select '2011-01-11', '2011-01-11+14:18:26' from src tablesample (1 rows)
       union all 
diff --git ql/src/test/queries/clientpositive/partition_timestamp.q ql/src/test/queries/clientpositive/partition_timestamp.q
index 45bbba1c7a..17c164ac3d 100644
--- ql/src/test/queries/clientpositive/partition_timestamp.q
+++ ql/src/test/queries/clientpositive/partition_timestamp.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table partition_timestamp_1;
 
diff --git ql/src/test/queries/clientpositive/partition_timestamp2.q ql/src/test/queries/clientpositive/partition_timestamp2.q
index ba4ec17eb4..4cf3632d7c 100644
--- ql/src/test/queries/clientpositive/partition_timestamp2.q
+++ ql/src/test/queries/clientpositive/partition_timestamp2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.metadataonly=true;
 drop table partition_timestamp2_1;
diff --git ql/src/test/queries/clientpositive/partition_type_check.q ql/src/test/queries/clientpositive/partition_type_check.q
index c459eec3fa..081d0a3290 100644
--- ql/src/test/queries/clientpositive/partition_type_check.q
+++ ql/src/test/queries/clientpositive/partition_type_check.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.typecheck.on.insert = true;
 
diff --git ql/src/test/queries/clientpositive/partition_type_in_plan.q ql/src/test/queries/clientpositive/partition_type_in_plan.q
index 693dd2412a..a92b68a80e 100644
--- ql/src/test/queries/clientpositive/partition_type_in_plan.q
+++ ql/src/test/queries/clientpositive/partition_type_in_plan.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Test partition column type is considered as the type given in table def
 -- and not as 'string'
 CREATE TABLE datePartTbl(col1 string) PARTITIONED BY (date_prt date);
diff --git ql/src/test/queries/clientpositive/partition_varchar1.q ql/src/test/queries/clientpositive/partition_varchar1.q
index dd991fd96f..216bcf542d 100644
--- ql/src/test/queries/clientpositive/partition_varchar1.q
+++ ql/src/test/queries/clientpositive/partition_varchar1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table partition_varchar_1;
 
diff --git ql/src/test/queries/clientpositive/partition_varchar2.q ql/src/test/queries/clientpositive/partition_varchar2.q
index 92cb742f15..0053903153 100644
--- ql/src/test/queries/clientpositive/partition_varchar2.q
+++ ql/src/test/queries/clientpositive/partition_varchar2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table partition_varchar_2;
 
 create table partition_varchar_2 (key string, value varchar(20)) partitioned by (dt varchar(15), region int);
diff --git ql/src/test/queries/clientpositive/partition_vs_table_metadata.q ql/src/test/queries/clientpositive/partition_vs_table_metadata.q
index dbb63938fc..eca49e2902 100644
--- ql/src/test/queries/clientpositive/partition_vs_table_metadata.q
+++ ql/src/test/queries/clientpositive/partition_vs_table_metadata.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat.q ql/src/test/queries/clientpositive/partition_wise_fileformat.q
index 7b2f48d586..3b547c3182 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat10.q ql/src/test/queries/clientpositive/partition_wise_fileformat10.q
index f15f72c08e..bc57a9686f 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat10.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
 -- This tests that the schema can be changed for binary serde data
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat11.q ql/src/test/queries/clientpositive/partition_wise_fileformat11.q
index b2db2f12a0..2ff680eae3 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat11.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
 -- This tests that the schema can be changed for binary serde data
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat12.q ql/src/test/queries/clientpositive/partition_wise_fileformat12.q
index 632d02258c..0eb6d18fd0 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat12.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
 -- This tests that the schema can be changed for binary serde data
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat13.q ql/src/test/queries/clientpositive/partition_wise_fileformat13.q
index 645d53a648..f495d72ba7 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat13.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat13.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat14.q ql/src/test/queries/clientpositive/partition_wise_fileformat14.q
index dba4f309a1..c27e45b05a 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat14.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat14.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.reducers.max = 1;
 
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat15.q ql/src/test/queries/clientpositive/partition_wise_fileformat15.q
index 70a454f6de..ad2f068263 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat15.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat15.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
 -- This tests that the schema can be changed for binary serde data
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat16.q ql/src/test/queries/clientpositive/partition_wise_fileformat16.q
index 92757f61cf..a97619fba4 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat16.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat16.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
 -- This tests that the schema can be changed for binary serde data
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat2.q ql/src/test/queries/clientpositive/partition_wise_fileformat2.q
index b8dddc980f..62e8a1c978 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat2.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.mapred.mode=nonstrict;
 -- SORT_BEFORE_DIFF
 
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat3.q ql/src/test/queries/clientpositive/partition_wise_fileformat3.q
index b85fec538f..f9f97119b3 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat3.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 
 
 create table partition_test_partitioned(key string, value string) partitioned by (dt string);
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat4.q ql/src/test/queries/clientpositive/partition_wise_fileformat4.q
index 33decec6ed..14ed9460cf 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat4.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 create table partition_test_partitioned(key string, value string) partitioned by (dt string);
 alter table partition_test_partitioned set fileformat sequencefile;
 insert overwrite table partition_test_partitioned partition(dt='1') select * from src1;
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat5.q ql/src/test/queries/clientpositive/partition_wise_fileformat5.q
index fc3bb8458b..f41c88e114 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat5.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
 create table partition_test_partitioned(key string, value string) partitioned by (dt string);
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat6.q ql/src/test/queries/clientpositive/partition_wise_fileformat6.q
index dac5ef213e..73f2266ee3 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat6.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
 create table partition_test_partitioned(key string, value string) partitioned by (dt string);
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat7.q ql/src/test/queries/clientpositive/partition_wise_fileformat7.q
index c4a19ada5f..e695df76ac 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat7.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
 create table partition_test_partitioned(key string, value string) partitioned by (dt string);
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat8.q ql/src/test/queries/clientpositive/partition_wise_fileformat8.q
index 46ea10f4b7..30eea0a677 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat8.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
 -- This tests that a query can span multiple partitions which can not only have different file formats, but
diff --git ql/src/test/queries/clientpositive/partition_wise_fileformat9.q ql/src/test/queries/clientpositive/partition_wise_fileformat9.q
index 5205585853..05fc20fa04 100644
--- ql/src/test/queries/clientpositive/partition_wise_fileformat9.q
+++ ql/src/test/queries/clientpositive/partition_wise_fileformat9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
 
 -- This tests that a query can span multiple partitions which can not only have different file formats, but
diff --git ql/src/test/queries/clientpositive/pcr.q ql/src/test/queries/clientpositive/pcr.q
index bfa29a5023..70ea05ba99 100644
--- ql/src/test/queries/clientpositive/pcr.q
+++ ql/src/test/queries/clientpositive/pcr.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table pcr_t1;
 drop table pcr_t2;
diff --git ql/src/test/queries/clientpositive/pcs.q ql/src/test/queries/clientpositive/pcs.q
index eb16647a51..2e7eff472b 100644
--- ql/src/test/queries/clientpositive/pcs.q
+++ ql/src/test/queries/clientpositive/pcs.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table pcs_t1; 
 drop table pcs_t2; 
diff --git ql/src/test/queries/clientpositive/plan_json.q ql/src/test/queries/clientpositive/plan_json.q
index 503b55d8b9..8243743b62 100644
--- ql/src/test/queries/clientpositive/plan_json.q
+++ ql/src/test/queries/clientpositive/plan_json.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- explain plan json:  the query gets the formatted json output of the query plan of the hive query
 
 
diff --git ql/src/test/queries/clientpositive/pointlookup.q ql/src/test/queries/clientpositive/pointlookup.q
index 951f77e6d1..1b65cec71c 100644
--- ql/src/test/queries/clientpositive/pointlookup.q
+++ ql/src/test/queries/clientpositive/pointlookup.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain
 SELECT key
 FROM src
diff --git ql/src/test/queries/clientpositive/pointlookup2.q ql/src/test/queries/clientpositive/pointlookup2.q
index 6e1cb078d5..8ec07a0971 100644
--- ql/src/test/queries/clientpositive/pointlookup2.q
+++ ql/src/test/queries/clientpositive/pointlookup2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table pcr_t1;
 drop table pcr_t2;
diff --git ql/src/test/queries/clientpositive/pointlookup3.q ql/src/test/queries/clientpositive/pointlookup3.q
index bb934d02b1..facfec038a 100644
--- ql/src/test/queries/clientpositive/pointlookup3.q
+++ ql/src/test/queries/clientpositive/pointlookup3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table pcr_t1;
 
diff --git ql/src/test/queries/clientpositive/pointlookup4.q ql/src/test/queries/clientpositive/pointlookup4.q
index ba25301092..5eaa58e176 100644
--- ql/src/test/queries/clientpositive/pointlookup4.q
+++ ql/src/test/queries/clientpositive/pointlookup4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table pcr_t1;
 
diff --git ql/src/test/queries/clientpositive/ppd1.q ql/src/test/queries/clientpositive/ppd1.q
index a5a4db0544..0c9c407915 100644
--- ql/src/test/queries/clientpositive/ppd1.q
+++ ql/src/test/queries/clientpositive/ppd1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
 
diff --git ql/src/test/queries/clientpositive/ppd2.q ql/src/test/queries/clientpositive/ppd2.q
index 75eb6a8ced..39e3170d1c 100644
--- ql/src/test/queries/clientpositive/ppd2.q
+++ ql/src/test/queries/clientpositive/ppd2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=true;
diff --git ql/src/test/queries/clientpositive/ppd_clusterby.q ql/src/test/queries/clientpositive/ppd_clusterby.q
index 0c8b245d81..a4cfe21646 100644
--- ql/src/test/queries/clientpositive/ppd_clusterby.q
+++ ql/src/test/queries/clientpositive/ppd_clusterby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
 
diff --git ql/src/test/queries/clientpositive/ppd_constant_expr.q ql/src/test/queries/clientpositive/ppd_constant_expr.q
index 14518e8a10..11e562fcd8 100644
--- ql/src/test/queries/clientpositive/ppd_constant_expr.q
+++ ql/src/test/queries/clientpositive/ppd_constant_expr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_constant_where.q ql/src/test/queries/clientpositive/ppd_constant_where.q
index 0c102354fe..b55df0cba7 100644
--- ql/src/test/queries/clientpositive/ppd_constant_where.q
+++ ql/src/test/queries/clientpositive/ppd_constant_where.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- Test that the partition pruner does not fail when there is a constant expression in the filter
 
 EXPLAIN SELECT COUNT(*) FROM srcpart WHERE ds = '2008-04-08' and 'a' = 'a';
diff --git ql/src/test/queries/clientpositive/ppd_gby.q ql/src/test/queries/clientpositive/ppd_gby.q
index e02754496c..8806f2e72a 100644
--- ql/src/test/queries/clientpositive/ppd_gby.q
+++ ql/src/test/queries/clientpositive/ppd_gby.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_gby2.q ql/src/test/queries/clientpositive/ppd_gby2.q
index 689a0d3bf6..a824740c4c 100644
--- ql/src/test/queries/clientpositive/ppd_gby2.q
+++ ql/src/test/queries/clientpositive/ppd_gby2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_gby_join.q ql/src/test/queries/clientpositive/ppd_gby_join.q
index e074ae4f70..51b5d4359f 100644
--- ql/src/test/queries/clientpositive/ppd_gby_join.q
+++ ql/src/test/queries/clientpositive/ppd_gby_join.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_join.q ql/src/test/queries/clientpositive/ppd_join.q
index 8e68518bdd..78757d2df4 100644
--- ql/src/test/queries/clientpositive/ppd_join.q
+++ ql/src/test/queries/clientpositive/ppd_join.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_join2.q ql/src/test/queries/clientpositive/ppd_join2.q
index 1aee943616..5a5d7a290e 100644
--- ql/src/test/queries/clientpositive/ppd_join2.q
+++ ql/src/test/queries/clientpositive/ppd_join2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_join3.q ql/src/test/queries/clientpositive/ppd_join3.q
index d7bd4db084..6ca1f1d0b2 100644
--- ql/src/test/queries/clientpositive/ppd_join3.q
+++ ql/src/test/queries/clientpositive/ppd_join3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_join5.q ql/src/test/queries/clientpositive/ppd_join5.q
index f6371553be..b13e35975b 100644
--- ql/src/test/queries/clientpositive/ppd_join5.q
+++ ql/src/test/queries/clientpositive/ppd_join5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create table t1 (id1 string, id2 string);
 create table t2 (id string, d int);
diff --git ql/src/test/queries/clientpositive/ppd_join_filter.q ql/src/test/queries/clientpositive/ppd_join_filter.q
index e909b3d62a..03cd8ce696 100644
--- ql/src/test/queries/clientpositive/ppd_join_filter.q
+++ ql/src/test/queries/clientpositive/ppd_join_filter.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_multi_insert.q ql/src/test/queries/clientpositive/ppd_multi_insert.q
index 775cefceae..9bec0bc1eb 100644
--- ql/src/test/queries/clientpositive/ppd_multi_insert.q
+++ ql/src/test/queries/clientpositive/ppd_multi_insert.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_outer_join1.q ql/src/test/queries/clientpositive/ppd_outer_join1.q
index 30f5b843d4..5f9373a69d 100644
--- ql/src/test/queries/clientpositive/ppd_outer_join1.q
+++ ql/src/test/queries/clientpositive/ppd_outer_join1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_outer_join2.q ql/src/test/queries/clientpositive/ppd_outer_join2.q
index b7c8833ec6..c3d2661725 100644
--- ql/src/test/queries/clientpositive/ppd_outer_join2.q
+++ ql/src/test/queries/clientpositive/ppd_outer_join2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_outer_join3.q ql/src/test/queries/clientpositive/ppd_outer_join3.q
index 930803cde8..6bb43b75e9 100644
--- ql/src/test/queries/clientpositive/ppd_outer_join3.q
+++ ql/src/test/queries/clientpositive/ppd_outer_join3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_outer_join4.q ql/src/test/queries/clientpositive/ppd_outer_join4.q
index e3aaa0e78e..a11a666cc2 100644
--- ql/src/test/queries/clientpositive/ppd_outer_join4.q
+++ ql/src/test/queries/clientpositive/ppd_outer_join4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_random.q ql/src/test/queries/clientpositive/ppd_random.q
index 341f5f19bf..787bb57311 100644
--- ql/src/test/queries/clientpositive/ppd_random.q
+++ ql/src/test/queries/clientpositive/ppd_random.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_transform.q ql/src/test/queries/clientpositive/ppd_transform.q
index cd416ff9e6..e9192ccc19 100644
--- ql/src/test/queries/clientpositive/ppd_transform.q
+++ ql/src/test/queries/clientpositive/ppd_transform.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
 set hive.entity.capture.transform=true;
diff --git ql/src/test/queries/clientpositive/ppd_udf_case.q ql/src/test/queries/clientpositive/ppd_udf_case.q
index 2aad141ffa..bf8ddcdd74 100644
--- ql/src/test/queries/clientpositive/ppd_udf_case.q
+++ ql/src/test/queries/clientpositive/ppd_udf_case.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_udf_col.q ql/src/test/queries/clientpositive/ppd_udf_col.q
index 451edd59a3..9c7d4fdc20 100644
--- ql/src/test/queries/clientpositive/ppd_udf_col.q
+++ ql/src/test/queries/clientpositive/ppd_udf_col.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_udtf.q ql/src/test/queries/clientpositive/ppd_udtf.q
index d90532cfa4..1210f367d4 100644
--- ql/src/test/queries/clientpositive/ppd_udtf.q
+++ ql/src/test/queries/clientpositive/ppd_udtf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain
 SELECT value from (
   select explode(array(key, value)) as (value) from (
diff --git ql/src/test/queries/clientpositive/ppd_union.q ql/src/test/queries/clientpositive/ppd_union.q
index ca1ff40751..de15daa1c2 100644
--- ql/src/test/queries/clientpositive/ppd_union.q
+++ ql/src/test/queries/clientpositive/ppd_union.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_union_view.q ql/src/test/queries/clientpositive/ppd_union_view.q
index 08b4fce024..8302868881 100644
--- ql/src/test/queries/clientpositive/ppd_union_view.q
+++ ql/src/test/queries/clientpositive/ppd_union_view.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- test predicate pushdown on a view with a union
 
diff --git ql/src/test/queries/clientpositive/ppd_vc.q ql/src/test/queries/clientpositive/ppd_vc.q
index 0bb949d2e3..a3abf7bb9d 100644
--- ql/src/test/queries/clientpositive/ppd_vc.q
+++ ql/src/test/queries/clientpositive/ppd_vc.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 --HIVE-3926 PPD on virtual column of partitioned table is not working
 
diff --git ql/src/test/queries/clientpositive/ppd_windowing1.q ql/src/test/queries/clientpositive/ppd_windowing1.q
index f380eab72b..e7d74fd51b 100644
--- ql/src/test/queries/clientpositive/ppd_windowing1.q
+++ ql/src/test/queries/clientpositive/ppd_windowing1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppd_windowing2.q ql/src/test/queries/clientpositive/ppd_windowing2.q
index abfe89e299..4f045a4c37 100644
--- ql/src/test/queries/clientpositive/ppd_windowing2.q
+++ ql/src/test/queries/clientpositive/ppd_windowing2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=false;
diff --git ql/src/test/queries/clientpositive/ppr_allchildsarenull.q ql/src/test/queries/clientpositive/ppr_allchildsarenull.q
index 6146073ae7..5345c51736 100644
--- ql/src/test/queries/clientpositive/ppr_allchildsarenull.q
+++ ql/src/test/queries/clientpositive/ppr_allchildsarenull.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 
diff --git ql/src/test/queries/clientpositive/ppr_pushdown.q ql/src/test/queries/clientpositive/ppr_pushdown.q
index a3e6d6e8ae..c721744acb 100644
--- ql/src/test/queries/clientpositive/ppr_pushdown.q
+++ ql/src/test/queries/clientpositive/ppr_pushdown.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=more;
 
diff --git ql/src/test/queries/clientpositive/ppr_pushdown2.q ql/src/test/queries/clientpositive/ppr_pushdown2.q
index 8c60906538..68e5ade6cc 100644
--- ql/src/test/queries/clientpositive/ppr_pushdown2.q
+++ ql/src/test/queries/clientpositive/ppr_pushdown2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 create table ppr_test (key string) partitioned by (ds string);
diff --git ql/src/test/queries/clientpositive/ppr_pushdown3.q ql/src/test/queries/clientpositive/ppr_pushdown3.q
index 35c11be2d6..40f91de6dc 100644
--- ql/src/test/queries/clientpositive/ppr_pushdown3.q
+++ ql/src/test/queries/clientpositive/ppr_pushdown3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 
 explain select * from srcpart where key < 10;
diff --git ql/src/test/queries/clientpositive/print_header.q ql/src/test/queries/clientpositive/print_header.q
index 9deeb1d941..aa7e1e04da 100644
--- ql/src/test/queries/clientpositive/print_header.q
+++ ql/src/test/queries/clientpositive/print_header.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 set hive.cli.print.header=true;
diff --git ql/src/test/queries/clientpositive/ptf.q ql/src/test/queries/clientpositive/ptf.q
index 5ab6cdcc4d..bcdbaabab7 100644
--- ql/src/test/queries/clientpositive/ptf.q
+++ ql/src/test/queries/clientpositive/ptf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/ptf_decimal.q ql/src/test/queries/clientpositive/ptf_decimal.q
index 94885e3836..8eea0e7315 100644
--- ql/src/test/queries/clientpositive/ptf_decimal.q
+++ ql/src/test/queries/clientpositive/ptf_decimal.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- SORT_QUERY_RESULTS
 
 -- 1. aggregate functions with decimal type
diff --git ql/src/test/queries/clientpositive/ptf_general_queries.q ql/src/test/queries/clientpositive/ptf_general_queries.q
index 9942063876..0ab756eccd 100644
--- ql/src/test/queries/clientpositive/ptf_general_queries.q
+++ ql/src/test/queries/clientpositive/ptf_general_queries.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- SORT_QUERY_RESULTS
 
 -- 1. testNoPTFNoWindowing
diff --git ql/src/test/queries/clientpositive/ptf_rcfile.q ql/src/test/queries/clientpositive/ptf_rcfile.q
index 501d2a4412..1bed12b536 100644
--- ql/src/test/queries/clientpositive/ptf_rcfile.q
+++ ql/src/test/queries/clientpositive/ptf_rcfile.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 DROP TABLE part_rc;
 
 CREATE TABLE part_rc( 
diff --git ql/src/test/queries/clientpositive/ptf_seqfile.q ql/src/test/queries/clientpositive/ptf_seqfile.q
index ac55714c55..d59665f6be 100644
--- ql/src/test/queries/clientpositive/ptf_seqfile.q
+++ ql/src/test/queries/clientpositive/ptf_seqfile.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 DROP TABLE part_seq;
 
 CREATE TABLE part_seq( 
diff --git ql/src/test/queries/clientpositive/ptf_streaming.q ql/src/test/queries/clientpositive/ptf_streaming.q
index aa70a5c83d..5d7e531800 100644
--- ql/src/test/queries/clientpositive/ptf_streaming.q
+++ ql/src/test/queries/clientpositive/ptf_streaming.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/push_or.q ql/src/test/queries/clientpositive/push_or.q
index c962452ffb..8de259d247 100644
--- ql/src/test/queries/clientpositive/push_or.q
+++ ql/src/test/queries/clientpositive/push_or.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table push_or;
 
diff --git ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx.q ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx.q
index 240e74e095..36da2892cd 100644
--- ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx.q
+++ ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:lineitem
 set hive.stats.dbclass=fs;
 set hive.stats.autogather=true;
 set hive.cbo.enable=false;
diff --git ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx_cbo_1.q ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx_cbo_1.q
index 82e67ab5a0..0941493505 100644
--- ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx_cbo_1.q
+++ ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx_cbo_1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:lineitem
 set hive.stats.dbclass=fs;
 set hive.stats.autogather=true;
 set hive.cbo.enable=true;
diff --git ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx_cbo_2.q ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx_cbo_2.q
index cfc5b0c4b8..14197f41cf 100644
--- ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx_cbo_2.q
+++ ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx_cbo_2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:lineitem
 set hive.stats.dbclass=fs;
 set hive.stats.autogather=true;
 set hive.cbo.enable=true;
diff --git ql/src/test/queries/clientpositive/query_lifetime_hook.q ql/src/test/queries/clientpositive/query_lifetime_hook.q
index 6793faa06d..5b6ffb702f 100644
--- ql/src/test/queries/clientpositive/query_lifetime_hook.q
+++ ql/src/test/queries/clientpositive/query_lifetime_hook.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.query.lifetime.hooks=org.apache.hadoop.hive.ql.hooks.QueryLifeTimeHookTest;
 
 SELECT * FROM src LIMIT 1;
diff --git ql/src/test/queries/clientpositive/query_properties.q ql/src/test/queries/clientpositive/query_properties.q
index 78ac32d3d9..1449a4f664 100644
--- ql/src/test/queries/clientpositive/query_properties.q
+++ ql/src/test/queries/clientpositive/query_properties.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 set hive.exec.post.hooks = org.apache.hadoop.hive.ql.hooks.CheckQueryPropertiesHook;
 
diff --git ql/src/test/queries/clientpositive/query_result_fileformat.q ql/src/test/queries/clientpositive/query_result_fileformat.q
index 3b87e4d170..a4c63e1ec4 100644
--- ql/src/test/queries/clientpositive/query_result_fileformat.q
+++ ql/src/test/queries/clientpositive/query_result_fileformat.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table nzhang_test1 stored as sequencefile as select 'key1' as key, 'value
 1
 
diff --git ql/src/test/queries/clientpositive/query_with_semi.q ql/src/test/queries/clientpositive/query_with_semi.q
index e0f90d5edb..646bd6fc8d 100644
--- ql/src/test/queries/clientpositive/query_with_semi.q
+++ ql/src/test/queries/clientpositive/query_with_semi.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 from src
 select transform('aa\;') using 'cat' as a  limit 1;
 
diff --git ql/src/test/queries/clientpositive/quote1.q ql/src/test/queries/clientpositive/quote1.q
index e46402c9d9..3f38597aab 100644
--- ql/src/test/queries/clientpositive/quote1.q
+++ ql/src/test/queries/clientpositive/quote1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(`location` INT, `type` STRING) PARTITIONED BY(`table` STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/quote2.q ql/src/test/queries/clientpositive/quote2.q
index 17cbfcab12..72599d23ae 100644
--- ql/src/test/queries/clientpositive/quote2.q
+++ ql/src/test/queries/clientpositive/quote2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/quotedid_alter.q ql/src/test/queries/clientpositive/quotedid_alter.q
index a34a25af4b..441cfc4fbb 100644
--- ql/src/test/queries/clientpositive/quotedid_alter.q
+++ ql/src/test/queries/clientpositive/quotedid_alter.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.support.quoted.identifiers=column;
 
diff --git ql/src/test/queries/clientpositive/quotedid_basic.q ql/src/test/queries/clientpositive/quotedid_basic.q
index a16f6f5772..8d6136b233 100644
--- ql/src/test/queries/clientpositive/quotedid_basic.q
+++ ql/src/test/queries/clientpositive/quotedid_basic.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 set hive.support.quoted.identifiers=column;
diff --git ql/src/test/queries/clientpositive/quotedid_partition.q ql/src/test/queries/clientpositive/quotedid_partition.q
index 67eca1092f..34c40cac05 100644
--- ql/src/test/queries/clientpositive/quotedid_partition.q
+++ ql/src/test/queries/clientpositive/quotedid_partition.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 set hive.support.quoted.identifiers=column;
diff --git ql/src/test/queries/clientpositive/quotedid_smb.q ql/src/test/queries/clientpositive/quotedid_smb.q
index 11642f52a4..acc7626407 100644
--- ql/src/test/queries/clientpositive/quotedid_smb.q
+++ ql/src/test/queries/clientpositive/quotedid_smb.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.support.quoted.identifiers=column;
 
diff --git ql/src/test/queries/clientpositive/rand_partitionpruner1.q ql/src/test/queries/clientpositive/rand_partitionpruner1.q
index 3eeb5e7b88..42ca756d31 100644
--- ql/src/test/queries/clientpositive/rand_partitionpruner1.q
+++ ql/src/test/queries/clientpositive/rand_partitionpruner1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- scanning un-partitioned data
 explain extended select * from src where rand(1) < 0.1;
 select * from src where rand(1) < 0.1;
diff --git ql/src/test/queries/clientpositive/rand_partitionpruner2.q ql/src/test/queries/clientpositive/rand_partitionpruner2.q
index e2f280efe7..05da3d4268 100644
--- ql/src/test/queries/clientpositive/rand_partitionpruner2.q
+++ ql/src/test/queries/clientpositive/rand_partitionpruner2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- scanning partitioned data
 
 create table tmptable(key string, value string, hr string, ds string);
diff --git ql/src/test/queries/clientpositive/rand_partitionpruner3.q ql/src/test/queries/clientpositive/rand_partitionpruner3.q
index 481ba0864f..004e1a1fb1 100644
--- ql/src/test/queries/clientpositive/rand_partitionpruner3.q
+++ ql/src/test/queries/clientpositive/rand_partitionpruner3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 -- complex predicates in the where clause
diff --git ql/src/test/queries/clientpositive/rcfile_bigdata.q ql/src/test/queries/clientpositive/rcfile_bigdata.q
index df460c89aa..dda8ecfeff 100644
--- ql/src/test/queries/clientpositive/rcfile_bigdata.q
+++ ql/src/test/queries/clientpositive/rcfile_bigdata.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.map.aggr.hash.percentmemory = 0.3;
 set hive.mapred.local.mem = 256;
 
diff --git ql/src/test/queries/clientpositive/rcfile_columnar.q ql/src/test/queries/clientpositive/rcfile_columnar.q
index 5fd94e79de..ca1ba4af28 100644
--- ql/src/test/queries/clientpositive/rcfile_columnar.q
+++ ql/src/test/queries/clientpositive/rcfile_columnar.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 CREATE table columnTable (key STRING, value STRING)
diff --git ql/src/test/queries/clientpositive/rcfile_createas1.q ql/src/test/queries/clientpositive/rcfile_createas1.q
index 200c0ec6cb..eb017e3e61 100644
--- ql/src/test/queries/clientpositive/rcfile_createas1.q
+++ ql/src/test/queries/clientpositive/rcfile_createas1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.merge.rcfile.block.level=true;
 set mapred.max.split.size=100;
diff --git ql/src/test/queries/clientpositive/rcfile_default_format.q ql/src/test/queries/clientpositive/rcfile_default_format.q
index e61292e7f1..5c03510025 100644
--- ql/src/test/queries/clientpositive/rcfile_default_format.q
+++ ql/src/test/queries/clientpositive/rcfile_default_format.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.default.fileformat = RCFile;
 
 CREATE TABLE rcfile_default_format (key STRING);
diff --git ql/src/test/queries/clientpositive/rcfile_lazydecompress.q ql/src/test/queries/clientpositive/rcfile_lazydecompress.q
index a6d39c48f9..9de7dd52aa 100644
--- ql/src/test/queries/clientpositive/rcfile_lazydecompress.q
+++ ql/src/test/queries/clientpositive/rcfile_lazydecompress.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 CREATE table rcfileTableLazyDecompress (key STRING, value STRING) STORED AS RCFile;
diff --git ql/src/test/queries/clientpositive/rcfile_merge1.q ql/src/test/queries/clientpositive/rcfile_merge1.q
index 1f6f1bd251..d72cfa3440 100644
--- ql/src/test/queries/clientpositive/rcfile_merge1.q
+++ ql/src/test/queries/clientpositive/rcfile_merge1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.merge.rcfile.block.level=false;
 set hive.exec.dynamic.partition=true;
 set mapred.max.split.size=100;
diff --git ql/src/test/queries/clientpositive/rcfile_merge2.q ql/src/test/queries/clientpositive/rcfile_merge2.q
index f5b7add54d..f3051eccca 100644
--- ql/src/test/queries/clientpositive/rcfile_merge2.q
+++ ql/src/test/queries/clientpositive/rcfile_merge2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.merge.rcfile.block.level=true;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/rcfile_merge3.q ql/src/test/queries/clientpositive/rcfile_merge3.q
index 25d115c48e..fa30ee75be 100644
--- ql/src/test/queries/clientpositive/rcfile_merge3.q
+++ ql/src/test/queries/clientpositive/rcfile_merge3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.merge.rcfile.block.level=true;
 set mapred.max.split.size=100;
diff --git ql/src/test/queries/clientpositive/rcfile_merge4.q ql/src/test/queries/clientpositive/rcfile_merge4.q
index cf18f804d6..95e0f9bd5e 100644
--- ql/src/test/queries/clientpositive/rcfile_merge4.q
+++ ql/src/test/queries/clientpositive/rcfile_merge4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.merge.rcfile.block.level=true;
 set mapred.max.split.size=100;
diff --git ql/src/test/queries/clientpositive/rcfile_null_value.q ql/src/test/queries/clientpositive/rcfile_null_value.q
index 5ef80a7d33..da64b6ef45 100644
--- ql/src/test/queries/clientpositive/rcfile_null_value.q
+++ ql/src/test/queries/clientpositive/rcfile_null_value.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE src1_rc(key STRING, value STRING) STORED AS RCFILE;
 INSERT OVERWRITE TABLE src1_rc SELECT * FROM src1;
diff --git ql/src/test/queries/clientpositive/rcfile_toleratecorruptions.q ql/src/test/queries/clientpositive/rcfile_toleratecorruptions.q
index cd3267f49b..1344a60f34 100644
--- ql/src/test/queries/clientpositive/rcfile_toleratecorruptions.q
+++ ql/src/test/queries/clientpositive/rcfile_toleratecorruptions.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE test_src(key int, value string) stored as RCFILE;
 set hive.io.rcfile.record.interval=5;
diff --git ql/src/test/queries/clientpositive/rcfile_union.q ql/src/test/queries/clientpositive/rcfile_union.q
index 8308acc038..5547c1f42b 100644
--- ql/src/test/queries/clientpositive/rcfile_union.q
+++ ql/src/test/queries/clientpositive/rcfile_union.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 CREATE table rcfile_unionTable (b STRING, c STRING)
diff --git ql/src/test/queries/clientpositive/recursive_dir.q ql/src/test/queries/clientpositive/recursive_dir.q
index d703b8ee50..eea365dc6b 100644
--- ql/src/test/queries/clientpositive/recursive_dir.q
+++ ql/src/test/queries/clientpositive/recursive_dir.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- INCLUDE_HADOOP_MAJOR_VERSIONS(0.23)
 
 CREATE TABLE fact_daily(x int) PARTITIONED BY (ds STRING);
diff --git ql/src/test/queries/clientpositive/reduceSinkDeDuplication_pRS_key_empty.q ql/src/test/queries/clientpositive/reduceSinkDeDuplication_pRS_key_empty.q
index d72fad5c0f..f92229560a 100644
--- ql/src/test/queries/clientpositive/reduceSinkDeDuplication_pRS_key_empty.q
+++ ql/src/test/queries/clientpositive/reduceSinkDeDuplication_pRS_key_empty.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=false;
 
diff --git ql/src/test/queries/clientpositive/reduce_deduplicate.q ql/src/test/queries/clientpositive/reduce_deduplicate.q
index 5386590e05..7581982740 100644
--- ql/src/test/queries/clientpositive/reduce_deduplicate.q
+++ ql/src/test/queries/clientpositive/reduce_deduplicate.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 ;
 set hive.exec.reducers.max = 1;
diff --git ql/src/test/queries/clientpositive/reduce_deduplicate_exclude_join.q ql/src/test/queries/clientpositive/reduce_deduplicate_exclude_join.q
index ff09754dd1..93e1cb4d00 100644
--- ql/src/test/queries/clientpositive/reduce_deduplicate_exclude_join.q
+++ ql/src/test/queries/clientpositive/reduce_deduplicate_exclude_join.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.reducededuplication=true;
 set hive.auto.convert.join=true;
 explain select * from (select * from src cluster by key) a join src b on a.key = b.key limit 1;
diff --git ql/src/test/queries/clientpositive/reduce_deduplicate_extended.q ql/src/test/queries/clientpositive/reduce_deduplicate_extended.q
index 8c9ff661b6..f05fa9fafb 100644
--- ql/src/test/queries/clientpositive/reduce_deduplicate_extended.q
+++ ql/src/test/queries/clientpositive/reduce_deduplicate_extended.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.reducededuplication=true;
 set hive.optimize.reducededuplication.min.reducer=1;
diff --git ql/src/test/queries/clientpositive/reduce_deduplicate_extended2.q ql/src/test/queries/clientpositive/reduce_deduplicate_extended2.q
index cd67f4c2ab..f88fd50250 100644
--- ql/src/test/queries/clientpositive/reduce_deduplicate_extended2.q
+++ ql/src/test/queries/clientpositive/reduce_deduplicate_extended2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.auto.convert.join=false;
diff --git ql/src/test/queries/clientpositive/reducesink_dedup.q ql/src/test/queries/clientpositive/reducesink_dedup.q
index d429a1f9bd..352a558bea 100644
--- ql/src/test/queries/clientpositive/reducesink_dedup.q
+++ ql/src/test/queries/clientpositive/reducesink_dedup.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 select p_name 
 from (select p_name from part distribute by 1 sort by 1) p 
 distribute by 1 sort by 1
diff --git ql/src/test/queries/clientpositive/regex_col.q ql/src/test/queries/clientpositive/regex_col.q
index 774cb626cd..d422f75a0b 100644
--- ql/src/test/queries/clientpositive/regex_col.q
+++ ql/src/test/queries/clientpositive/regex_col.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.support.quoted.identifiers=none;
 
diff --git ql/src/test/queries/clientpositive/regexp_extract.q ql/src/test/queries/clientpositive/regexp_extract.q
index 2074eea439..678b8faf6e 100644
--- ql/src/test/queries/clientpositive/regexp_extract.q
+++ ql/src/test/queries/clientpositive/regexp_extract.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN EXTENDED
 FROM (
   FROM src
diff --git ql/src/test/queries/clientpositive/reloadJar.q ql/src/test/queries/clientpositive/reloadJar.q
index 6768a4f32d..e7a50e188b 100644
--- ql/src/test/queries/clientpositive/reloadJar.q
+++ ql/src/test/queries/clientpositive/reloadJar.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 dfs -mkdir  ${system:test.tmp.dir}/aux;
 dfs -cp ${system:hive.root}/data/files/identity_udf.jar ${system:test.tmp.dir}/aux/udfexample.jar;
 
diff --git ql/src/test/queries/clientpositive/remote_script.q ql/src/test/queries/clientpositive/remote_script.q
index ba0d00fc96..19657bc93e 100644
--- ql/src/test/queries/clientpositive/remote_script.q
+++ ql/src/test/queries/clientpositive/remote_script.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 dfs -put ../../data/scripts/newline.py /newline.py;
 add file hdfs:///newline.py;
diff --git ql/src/test/queries/clientpositive/rename_column.q ql/src/test/queries/clientpositive/rename_column.q
index a211cfaf48..96daf9d658 100644
--- ql/src/test/queries/clientpositive/rename_column.q
+++ ql/src/test/queries/clientpositive/rename_column.q
@@ -23,7 +23,7 @@ ALTER TABLE kv_rename_test CHANGE COLUMN a2 a INT AFTER b;
 DESCRIBE kv_rename_test;
 
 DROP TABLE kv_rename_test;
-SHOW TABLES;
+SHOW TABLES LIKE "kv_rename_*";
 
 -- Using non-default Database
 CREATE DATABASE kv_rename_test_db;
@@ -54,4 +54,4 @@ ALTER TABLE kv_rename_test CHANGE COLUMN a2 a INT AFTER b;
 DESCRIBE kv_rename_test;
 reset hive.metastore.disallow.incompatible.col.type.changes;
 DROP TABLE kv_rename_test;
-SHOW TABLES;
+SHOW TABLES LIKE "kv_rename_*";
diff --git ql/src/test/queries/clientpositive/rename_external_partition_location.q ql/src/test/queries/clientpositive/rename_external_partition_location.q
index 44500d3fdf..d9625e970e 100644
--- ql/src/test/queries/clientpositive/rename_external_partition_location.q
+++ ql/src/test/queries/clientpositive/rename_external_partition_location.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 
 dfs ${system:test.dfs.mkdir} ${system:test.tmp.dir}/ex_table;
diff --git ql/src/test/queries/clientpositive/rename_partition_location.q ql/src/test/queries/clientpositive/rename_partition_location.q
index 583c10a4ee..09114d6705 100644
--- ql/src/test/queries/clientpositive/rename_partition_location.q
+++ ql/src/test/queries/clientpositive/rename_partition_location.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 -- This test verifies that if the tables location changes, renaming a partition will not change
 -- the partition location accordingly
 
diff --git ql/src/test/queries/clientpositive/rename_table_location.q ql/src/test/queries/clientpositive/rename_table_location.q
index a2103ee6bc..1523dbb57b 100644
--- ql/src/test/queries/clientpositive/rename_table_location.q
+++ ql/src/test/queries/clientpositive/rename_table_location.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 -- This test verifies that if the tables location changes, renaming a table will not change
 -- the table location scheme
 
diff --git ql/src/test/queries/clientpositive/rename_table_update_column_stats.q ql/src/test/queries/clientpositive/rename_table_update_column_stats.q
index 8e5766cc14..c220d44820 100644
--- ql/src/test/queries/clientpositive/rename_table_update_column_stats.q
+++ ql/src/test/queries/clientpositive/rename_table_update_column_stats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.metastore.try.direct.sql=true;
 
diff --git ql/src/test/queries/clientpositive/results_cache_1.q ql/src/test/queries/clientpositive/results_cache_1.q
index 4aea60e1e5..b4149fd778 100644
--- ql/src/test/queries/clientpositive/results_cache_1.q
+++ ql/src/test/queries/clientpositive/results_cache_1.q
@@ -1,3 +1,7 @@
+--! qt:dataset:src
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 
 set hive.query.results.cache.enabled=true;
 
diff --git ql/src/test/queries/clientpositive/results_cache_2.q ql/src/test/queries/clientpositive/results_cache_2.q
index 96a90925f6..2fbb381cf1 100644
--- ql/src/test/queries/clientpositive/results_cache_2.q
+++ ql/src/test/queries/clientpositive/results_cache_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.query.results.cache.enabled=true;
 set hive.fetch.task.conversion=more;
diff --git ql/src/test/queries/clientpositive/results_cache_capacity.q ql/src/test/queries/clientpositive/results_cache_capacity.q
index 9f54577009..c29ff29094 100644
--- ql/src/test/queries/clientpositive/results_cache_capacity.q
+++ ql/src/test/queries/clientpositive/results_cache_capacity.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.query.results.cache.enabled=true;
 
diff --git ql/src/test/queries/clientpositive/results_cache_empty_result.q ql/src/test/queries/clientpositive/results_cache_empty_result.q
index 621367141e..a18a6c070a 100644
--- ql/src/test/queries/clientpositive/results_cache_empty_result.q
+++ ql/src/test/queries/clientpositive/results_cache_empty_result.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.query.results.cache.enabled=true;
 
diff --git ql/src/test/queries/clientpositive/results_cache_lifetime.q ql/src/test/queries/clientpositive/results_cache_lifetime.q
index 60ffe96a04..1140404626 100644
--- ql/src/test/queries/clientpositive/results_cache_lifetime.q
+++ ql/src/test/queries/clientpositive/results_cache_lifetime.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.query.results.cache.enabled=true;
 set hive.query.results.cache.max.entry.lifetime=2;
diff --git ql/src/test/queries/clientpositive/results_cache_quoted_identifiers.q ql/src/test/queries/clientpositive/results_cache_quoted_identifiers.q
index 4802f43ba9..29595ed071 100644
--- ql/src/test/queries/clientpositive/results_cache_quoted_identifiers.q
+++ ql/src/test/queries/clientpositive/results_cache_quoted_identifiers.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 create table quoted1 (
   `_c1` int,
diff --git ql/src/test/queries/clientpositive/results_cache_temptable.q ql/src/test/queries/clientpositive/results_cache_temptable.q
index 9e0de765cb..fc41722cdc 100644
--- ql/src/test/queries/clientpositive/results_cache_temptable.q
+++ ql/src/test/queries/clientpositive/results_cache_temptable.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.query.results.cache.enabled=true;
 
 create table rct (key string, value string);
diff --git ql/src/test/queries/clientpositive/results_cache_with_masking.q ql/src/test/queries/clientpositive/results_cache_with_masking.q
index b4fcdd57eb..e9e7982eb9 100644
--- ql/src/test/queries/clientpositive/results_cache_with_masking.q
+++ ql/src/test/queries/clientpositive/results_cache_with_masking.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.mapred.mode=nonstrict;
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;
diff --git ql/src/test/queries/clientpositive/root_dir_external_table.q ql/src/test/queries/clientpositive/root_dir_external_table.q
index a242ca7b4e..a08d640fe5 100644
--- ql/src/test/queries/clientpositive/root_dir_external_table.q
+++ ql/src/test/queries/clientpositive/root_dir_external_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 dfs ${system:test.dfs.mkdir} hdfs:///tmp/test_root_dir_external_table;
 
diff --git ql/src/test/queries/clientpositive/router_join_ppr.q ql/src/test/queries/clientpositive/router_join_ppr.q
index d659944975..0984f90e88 100644
--- ql/src/test/queries/clientpositive/router_join_ppr.q
+++ ql/src/test/queries/clientpositive/router_join_ppr.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 
diff --git ql/src/test/queries/clientpositive/runtime_skewjoin_mapjoin_spark.q ql/src/test/queries/clientpositive/runtime_skewjoin_mapjoin_spark.q
index ca9e9cfe4d..7ebe1270a9 100644
--- ql/src/test/queries/clientpositive/runtime_skewjoin_mapjoin_spark.q
+++ ql/src/test/queries/clientpositive/runtime_skewjoin_mapjoin_spark.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.stats.deserialization.factor=1.0;
 set hive.mapred.mode=nonstrict;
 set hive.optimize.skewjoin = true;
diff --git ql/src/test/queries/clientpositive/sample1.q ql/src/test/queries/clientpositive/sample1.q
index 6e86cef267..16c5bcddf2 100644
--- ql/src/test/queries/clientpositive/sample1.q
+++ ql/src/test/queries/clientpositive/sample1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:srcbucket
 CREATE TABLE dest1(key INT, value STRING, dt STRING, hr STRING) STORED AS TEXTFILE;
 
 -- no input pruning, no sample filter
diff --git ql/src/test/queries/clientpositive/sample10.q ql/src/test/queries/clientpositive/sample10.q
index a5a8c8fc7e..7c2de2e47b 100644
--- ql/src/test/queries/clientpositive/sample10.q
+++ ql/src/test/queries/clientpositive/sample10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.exec.submitviachild=false;
 set hive.exec.submit.local.task.via.child=false;
diff --git ql/src/test/queries/clientpositive/sample2.q ql/src/test/queries/clientpositive/sample2.q
index 119afc9e15..b9edb7dc06 100644
--- ql/src/test/queries/clientpositive/sample2.q
+++ ql/src/test/queries/clientpositive/sample2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 -- input pruning, no sample filter
diff --git ql/src/test/queries/clientpositive/sample3.q ql/src/test/queries/clientpositive/sample3.q
index fe001a3d5e..0318e64c22 100644
--- ql/src/test/queries/clientpositive/sample3.q
+++ ql/src/test/queries/clientpositive/sample3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 -- SORT_QUERY_RESULTS
 
 -- no input pruning, sample filter
diff --git ql/src/test/queries/clientpositive/sample4.q ql/src/test/queries/clientpositive/sample4.q
index 0fa55f7872..49d7418feb 100644
--- ql/src/test/queries/clientpositive/sample4.q
+++ ql/src/test/queries/clientpositive/sample4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 -- bucket column is the same as table sample
diff --git ql/src/test/queries/clientpositive/sample5.q ql/src/test/queries/clientpositive/sample5.q
index ddbeac03f3..5cb6ffdc3e 100644
--- ql/src/test/queries/clientpositive/sample5.q
+++ ql/src/test/queries/clientpositive/sample5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/sample6.q ql/src/test/queries/clientpositive/sample6.q
index 0e094b1a5d..6972897102 100644
--- ql/src/test/queries/clientpositive/sample6.q
+++ ql/src/test/queries/clientpositive/sample6.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcbucket2
+--! qt:dataset:srcbucket
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/sample7.q ql/src/test/queries/clientpositive/sample7.q
index 20584aa5d4..e8f533678f 100644
--- ql/src/test/queries/clientpositive/sample7.q
+++ ql/src/test/queries/clientpositive/sample7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 -- both input pruning and sample filter
diff --git ql/src/test/queries/clientpositive/sample8.q ql/src/test/queries/clientpositive/sample8.q
index d53d510556..33304f4c73 100644
--- ql/src/test/queries/clientpositive/sample8.q
+++ ql/src/test/queries/clientpositive/sample8.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- sampling with join and alias
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/sample9.q ql/src/test/queries/clientpositive/sample9.q
index 13cc04f691..46949cd282 100644
--- ql/src/test/queries/clientpositive/sample9.q
+++ ql/src/test/queries/clientpositive/sample9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 EXPLAIN EXTENDED
 SELECT s.*
 FROM (SELECT a.* FROM srcbucket TABLESAMPLE (BUCKET 1 OUT OF 2 on key) a) s;
diff --git ql/src/test/queries/clientpositive/sample_islocalmode_hook.q ql/src/test/queries/clientpositive/sample_islocalmode_hook.q
index 08f8cdfb84..15185292a0 100644
--- ql/src/test/queries/clientpositive/sample_islocalmode_hook.q
+++ ql/src/test/queries/clientpositive/sample_islocalmode_hook.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.submitviachild=false;
 set hive.exec.submit.local.task.via.child=false;
diff --git ql/src/test/queries/clientpositive/sample_islocalmode_hook_hadoop20.q ql/src/test/queries/clientpositive/sample_islocalmode_hook_hadoop20.q
index 7429932618..772b8a8fa3 100644
--- ql/src/test/queries/clientpositive/sample_islocalmode_hook_hadoop20.q
+++ ql/src/test/queries/clientpositive/sample_islocalmode_hook_hadoop20.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 USE default;
 
 set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;
diff --git ql/src/test/queries/clientpositive/sample_islocalmode_hook_use_metadata.q ql/src/test/queries/clientpositive/sample_islocalmode_hook_use_metadata.q
index b523f06396..cb80ef4e11 100644
--- ql/src/test/queries/clientpositive/sample_islocalmode_hook_use_metadata.q
+++ ql/src/test/queries/clientpositive/sample_islocalmode_hook_use_metadata.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.submitviachild=false;
 set hive.exec.submit.local.task.via.child=false;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_acid_part.q ql/src/test/queries/clientpositive/schema_evol_orc_acid_part.q
index e2e356ef79..df526964c3 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_acid_part.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_acid_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_llap_io.q ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_llap_io.q
index 1e5f69b98f..3d13f7690c 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_update.q ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_update.q
index b58bb567de..70f8cc9b7e 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_update.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_update.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcbucket
+--! qt:dataset:part
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_update_llap_io.q ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_update_llap_io.q
index 2f825832bd..0d528ea6d4 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_update_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_acid_part_update_llap_io.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcbucket
+--! qt:dataset:part
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part.q ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part.q
index fb863927fa..d84f47674e 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_llap_io.q ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_llap_io.q
index 7509d3d6f2..a632855b87 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_update.q ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_update.q
index aba65c9a55..760deb4725 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_update.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_update.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_update_llap_io.q ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_update_llap_io.q
index 6191d3406a..3ece4773d6 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_update_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_acidvec_part_update_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part.q ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part.q
index c4acf27db9..c15792e7b9 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_complex.q ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_complex.q
index 614a5be0ca..76e2f57ae9 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_complex.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_complex.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_complex_llap_io.q ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_complex_llap_io.q
index c401b251e9..a2800b521e 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_complex_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_complex_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_primitive.q ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_primitive.q
index c2d83086b7..336a9ad0d3 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_primitive.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_primitive.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_primitive_llap_io.q ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_primitive_llap_io.q
index a91fcef10b..b1b414d030 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_primitive_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_all_primitive_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_llap_io.q ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_llap_io.q
index bb9bb01e64..52f10e1050 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_nonvec_part_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_vec_part.q ql/src/test/queries/clientpositive/schema_evol_orc_vec_part.q
index d8148700f3..d401679fa6 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_vec_part.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_vec_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_complex.q ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_complex.q
index bff7cca888..91b3c4efe9 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_complex.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_complex.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_complex_llap_io.q ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_complex_llap_io.q
index af6129e15b..d79bc826b8 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_complex_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_complex_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_primitive.q ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_primitive.q
index 76ab011f87..552c25d656 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_primitive.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_primitive.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_primitive_llap_io.q ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_primitive_llap_io.q
index d7eb636cab..2132cfa758 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_primitive_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_all_primitive_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_llap_io.q ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_llap_io.q
index 52535dd89f..99782277bf 100644
--- ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_orc_vec_part_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_stats.q ql/src/test/queries/clientpositive/schema_evol_stats.q
index 210146b4d9..6a5688a216 100644
--- ql/src/test/queries/clientpositive/schema_evol_stats.q
+++ ql/src/test/queries/clientpositive/schema_evol_stats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 SET hive.exec.schema.evolution=true;
 set hive.llap.io.enabled=false;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part.q ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part.q
index 6746fae0d9..159f326de3 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_complex.q ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_complex.q
index 7c846e7b9d..c444246d3a 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_complex.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_complex.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_complex_llap_io.q ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_complex_llap_io.q
index c679ea992f..0bc9f83f30 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_complex_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_complex_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_primitive.q ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_primitive.q
index 3f2f9ed020..5d91055459 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_primitive.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_primitive.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_primitive_llap_io.q ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_primitive_llap_io.q
index 4bd2f30338..93494c0fbb 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_primitive_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_all_primitive_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_llap_io.q ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_llap_io.q
index ca2cfda01c..821f8cfe17 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_nonvec_part_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vec_part.q ql/src/test/queries/clientpositive/schema_evol_text_vec_part.q
index 0b322b02af..142ab28780 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vec_part.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vec_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_complex.q ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_complex.q
index 131a1af262..dc870bee76 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_complex.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_complex.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_complex_llap_io.q ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_complex_llap_io.q
index c19d32df27..8e0c780875 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_complex_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_complex_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_primitive.q ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_primitive.q
index 2448268eae..b86423beb4 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_primitive.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_primitive.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_primitive_llap_io.q ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_primitive_llap_io.q
index e72c7491bc..b64ed2d269 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_primitive_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vec_part_all_primitive_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vec_part_llap_io.q ql/src/test/queries/clientpositive/schema_evol_text_vec_part_llap_io.q
index 4cd3ad7337..4cf867c49c 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vec_part_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vec_part_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part.q ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part.q
index 0ab1f33caf..06685139c8 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_complex.q ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_complex.q
index b4a9d664e2..55163c8297 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_complex.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_complex.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_complex_llap_io.q ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_complex_llap_io.q
index 6368d82dbe..09f06d377d 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_complex_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_complex_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_primitive.q ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_primitive.q
index 83fc17397e..d9ff65e3b3 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_primitive.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_primitive.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_primitive_llap_io.q ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_primitive_llap_io.q
index a191d79d01..28885c8e45 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_primitive_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_all_primitive_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_llap_io.q ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_llap_io.q
index 4a91a95844..201795528f 100644
--- ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_llap_io.q
+++ ql/src/test/queries/clientpositive/schema_evol_text_vecrow_part_llap_io.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/schemeAuthority.q ql/src/test/queries/clientpositive/schemeAuthority.q
index 6f545b1f44..15713f0cf4 100644
--- ql/src/test/queries/clientpositive/schemeAuthority.q
+++ ql/src/test/queries/clientpositive/schemeAuthority.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 dfs ${system:test.dfs.mkdir} file:///tmp/test;
 dfs ${system:test.dfs.mkdir} hdfs:///tmp/test;
diff --git ql/src/test/queries/clientpositive/schemeAuthority2.q ql/src/test/queries/clientpositive/schemeAuthority2.q
index 7f879099f7..cfb4be8a79 100644
--- ql/src/test/queries/clientpositive/schemeAuthority2.q
+++ ql/src/test/queries/clientpositive/schemeAuthority2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 dfs ${system:test.dfs.mkdir} file:///tmp/test;
 dfs ${system:test.dfs.mkdir} hdfs:///tmp/test;
diff --git ql/src/test/queries/clientpositive/schemeAuthority3.q ql/src/test/queries/clientpositive/schemeAuthority3.q
index 4a7f5c51fd..9bdc669ac4 100644
--- ql/src/test/queries/clientpositive/schemeAuthority3.q
+++ ql/src/test/queries/clientpositive/schemeAuthority3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 create table noschemeTable(key string) partitioned by (value string, value2 string) row format delimited fields terminated by '\\t' stored as textfile;
diff --git ql/src/test/queries/clientpositive/script_env_var1.q ql/src/test/queries/clientpositive/script_env_var1.q
index 77d9945541..54e7e3fd12 100644
--- ql/src/test/queries/clientpositive/script_env_var1.q
+++ ql/src/test/queries/clientpositive/script_env_var1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Verifies that script operator ID environment variables have unique values
 -- in each instance of the script operator.
 SELECT count(1) FROM
diff --git ql/src/test/queries/clientpositive/script_env_var2.q ql/src/test/queries/clientpositive/script_env_var2.q
index 01e399b1a1..f1badef4c9 100644
--- ql/src/test/queries/clientpositive/script_env_var2.q
+++ ql/src/test/queries/clientpositive/script_env_var2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.script.operator.id.env.var = MY_ID;
 -- Same test as script_env_var1, but test setting the variable name
 SELECT count(1) FROM
diff --git ql/src/test/queries/clientpositive/script_pipe.q ql/src/test/queries/clientpositive/script_pipe.q
index 95a08ddff5..350a693f54 100644
--- ql/src/test/queries/clientpositive/script_pipe.q
+++ ql/src/test/queries/clientpositive/script_pipe.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.exec.script.allow.partial.consumption = true;
 -- Tests exception in ScriptOperator.close() by passing to the operator a small amount of data
diff --git ql/src/test/queries/clientpositive/scriptfile1.q ql/src/test/queries/clientpositive/scriptfile1.q
index 988cdcaa05..9604c57ad7 100644
--- ql/src/test/queries/clientpositive/scriptfile1.q
+++ ql/src/test/queries/clientpositive/scriptfile1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/selectDistinctStar.q ql/src/test/queries/clientpositive/selectDistinctStar.q
index 3168531d0c..05542ce96a 100644
--- ql/src/test/queries/clientpositive/selectDistinctStar.q
+++ ql/src/test/queries/clientpositive/selectDistinctStar.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/select_as_omitted.q ql/src/test/queries/clientpositive/select_as_omitted.q
index f0fe03f180..aa3a31cf24 100644
--- ql/src/test/queries/clientpositive/select_as_omitted.q
+++ ql/src/test/queries/clientpositive/select_as_omitted.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 EXPLAIn
 SELECT a, b FROM (
   SELECT key a, value b
diff --git ql/src/test/queries/clientpositive/select_column_pruning.q ql/src/test/queries/clientpositive/select_column_pruning.q
index 207cd32ebb..b7083d872c 100644
--- ql/src/test/queries/clientpositive/select_column_pruning.q
+++ ql/src/test/queries/clientpositive/select_column_pruning.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE lv_table1( c1 STRING,  c2 ARRAY<INT>, c3 INT, c4 CHAR(1), c5 STRING, c6 STRING, c7 STRING, c8 STRING, c9 STRING, c10 STRING, c11 STRING);
 INSERT OVERWRITE TABLE lv_table1 SELECT 'abc  ', array(1,2,3), 100, 't', 'test', 'test', 'test', 'test', 'test', 'test', 'test' FROM src;
 EXPLAIN SELECT * FROM lv_table1 LATERAL VIEW explode(array(1,2,3)) myTable AS myCol WHERE c3 = 100 SORT BY c1 ASC, myCol ASC LIMIT 1;
diff --git ql/src/test/queries/clientpositive/select_same_col.q ql/src/test/queries/clientpositive/select_same_col.q
index 96bed1a841..1c62a7c066 100644
--- ql/src/test/queries/clientpositive/select_same_col.q
+++ ql/src/test/queries/clientpositive/select_same_col.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=true;
 
diff --git ql/src/test/queries/clientpositive/select_transform_hint.q ql/src/test/queries/clientpositive/select_transform_hint.q
index b5a814709d..39577d1376 100644
--- ql/src/test/queries/clientpositive/select_transform_hint.q
+++ ql/src/test/queries/clientpositive/select_transform_hint.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.entity.capture.transform=true;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/select_unquote_and.q ql/src/test/queries/clientpositive/select_unquote_and.q
index 529cbc33e1..79894eab39 100644
--- ql/src/test/queries/clientpositive/select_unquote_and.q
+++ ql/src/test/queries/clientpositive/select_unquote_and.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE npe_test (key STRING, value STRING) PARTITIONED BY (ds STRING);
 
diff --git ql/src/test/queries/clientpositive/select_unquote_not.q ql/src/test/queries/clientpositive/select_unquote_not.q
index b5f3a678b0..ee5d304b99 100644
--- ql/src/test/queries/clientpositive/select_unquote_not.q
+++ ql/src/test/queries/clientpositive/select_unquote_not.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE npe_test (key STRING, value STRING) PARTITIONED BY (ds STRING);
 
diff --git ql/src/test/queries/clientpositive/select_unquote_or.q ql/src/test/queries/clientpositive/select_unquote_or.q
index 79ef863d2c..6e60f41880 100644
--- ql/src/test/queries/clientpositive/select_unquote_or.q
+++ ql/src/test/queries/clientpositive/select_unquote_or.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE npe_test (key STRING, value STRING) PARTITIONED BY (ds STRING);
 
diff --git ql/src/test/queries/clientpositive/semicolon.q ql/src/test/queries/clientpositive/semicolon.q
index fef2687308..55d551489a 100644
--- ql/src/test/queries/clientpositive/semicolon.q
+++ ql/src/test/queries/clientpositive/semicolon.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- comment
 -- comment;
 -- comment
diff --git ql/src/test/queries/clientpositive/semijoin.q ql/src/test/queries/clientpositive/semijoin.q
index 8f3a6ad8fb..9df6bc2d3d 100644
--- ql/src/test/queries/clientpositive/semijoin.q
+++ ql/src/test/queries/clientpositive/semijoin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/semijoin3.q ql/src/test/queries/clientpositive/semijoin3.q
index a502b9bf8c..14442acc94 100644
--- ql/src/test/queries/clientpositive/semijoin3.q
+++ ql/src/test/queries/clientpositive/semijoin3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table t1 as select cast(key as int) key, value from src;
 
 create table t2 as select cast(key as int) key, value from src;
diff --git ql/src/test/queries/clientpositive/semijoin_hint.q ql/src/test/queries/clientpositive/semijoin_hint.q
index 0586dbc3fc..de176affd3 100644
--- ql/src/test/queries/clientpositive/semijoin_hint.q
+++ ql/src/test/queries/clientpositive/semijoin_hint.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.cbo.enable=true;
diff --git ql/src/test/queries/clientpositive/serde_user_properties.q ql/src/test/queries/clientpositive/serde_user_properties.q
index 4d523e1bf7..2805a1a162 100644
--- ql/src/test/queries/clientpositive/serde_user_properties.q
+++ ql/src/test/queries/clientpositive/serde_user_properties.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- HIVE-2906 Table properties in SQL
 
 explain extended select key from src;
diff --git ql/src/test/queries/clientpositive/set_processor_namespaces.q ql/src/test/queries/clientpositive/set_processor_namespaces.q
index 1f9e282c3b..d496a4d1b2 100644
--- ql/src/test/queries/clientpositive/set_processor_namespaces.q
+++ ql/src/test/queries/clientpositive/set_processor_namespaces.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set zzz=5;
 set zzz;
diff --git ql/src/test/queries/clientpositive/set_variable_sub.q ql/src/test/queries/clientpositive/set_variable_sub.q
index 7bf1e60a5d..0804c2d2bf 100644
--- ql/src/test/queries/clientpositive/set_variable_sub.q
+++ ql/src/test/queries/clientpositive/set_variable_sub.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hivevar:key1=value1;
 
 EXPLAIN SELECT * FROM src where key="${key1}";
diff --git ql/src/test/queries/clientpositive/setop_subq.q ql/src/test/queries/clientpositive/setop_subq.q
index a88e512998..b968a13051 100644
--- ql/src/test/queries/clientpositive/setop_subq.q
+++ ql/src/test/queries/clientpositive/setop_subq.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 explain select key from ((select key from src) union (select key from src))subq;
diff --git ql/src/test/queries/clientpositive/sharedworkext.q ql/src/test/queries/clientpositive/sharedworkext.q
index b1801eabea..ed42676c29 100644
--- ql/src/test/queries/clientpositive/sharedworkext.q
+++ ql/src/test/queries/clientpositive/sharedworkext.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 EXPLAIN
 SELECT a.key FROM
 (
diff --git ql/src/test/queries/clientpositive/show_create_table_view.q ql/src/test/queries/clientpositive/show_create_table_view.q
index a378456494..42b74677bd 100644
--- ql/src/test/queries/clientpositive/show_create_table_view.q
+++ ql/src/test/queries/clientpositive/show_create_table_view.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Test SHOW CREATE TABLE on a view name.
 
 CREATE VIEW tmp_copy_src AS SELECT * FROM src;
diff --git ql/src/test/queries/clientpositive/show_partitions.q ql/src/test/queries/clientpositive/show_partitions.q
index 5b746e6a24..d22c483fea 100644
--- ql/src/test/queries/clientpositive/show_partitions.q
+++ ql/src/test/queries/clientpositive/show_partitions.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 SHOW PARTITIONS srcpart;
 SHOW PARTITIONS default.srcpart;
 SHOW PARTITIONS srcpart PARTITION(hr='11');
diff --git ql/src/test/queries/clientpositive/show_tables.q ql/src/test/queries/clientpositive/show_tables.q
index 447f9a84e3..619065711d 100644
--- ql/src/test/queries/clientpositive/show_tables.q
+++ ql/src/test/queries/clientpositive/show_tables.q
@@ -21,9 +21,7 @@ CREATE TABLE baz(a INT);
 -- SHOW TABLES basic syntax tests
 USE default;
 SHOW TABLES FROM test_db;
-SHOW TABLES FROM default;
 SHOW TABLES IN test_db;
-SHOW TABLES IN default;
 SHOW TABLES IN test_db "test*";
 SHOW TABLES IN test_db LIKE "nomatch";
 
diff --git ql/src/test/queries/clientpositive/show_tablestatus.q ql/src/test/queries/clientpositive/show_tablestatus.q
index 55fb7b67ff..d8f04ec30d 100644
--- ql/src/test/queries/clientpositive/show_tablestatus.q
+++ ql/src/test/queries/clientpositive/show_tablestatus.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.support.quoted.identifiers=none;
 EXPLAIN 
 SHOW TABLE EXTENDED IN default LIKE `src`;
diff --git ql/src/test/queries/clientpositive/showparts.q ql/src/test/queries/clientpositive/showparts.q
index dbee3efc24..ea28669c90 100644
--- ql/src/test/queries/clientpositive/showparts.q
+++ ql/src/test/queries/clientpositive/showparts.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 EXPLAIN
 SHOW PARTITIONS srcpart; 
 
diff --git ql/src/test/queries/clientpositive/skewjoin.q ql/src/test/queries/clientpositive/skewjoin.q
index e4b178a1e3..9972eddebe 100644
--- ql/src/test/queries/clientpositive/skewjoin.q
+++ ql/src/test/queries/clientpositive/skewjoin.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.optimize.skewjoin = true;
diff --git ql/src/test/queries/clientpositive/skewjoin_noskew.q ql/src/test/queries/clientpositive/skewjoin_noskew.q
index 228373cbb6..8678c283c7 100644
--- ql/src/test/queries/clientpositive/skewjoin_noskew.q
+++ ql/src/test/queries/clientpositive/skewjoin_noskew.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=false;
 set hive.optimize.skewjoin=true;
diff --git ql/src/test/queries/clientpositive/smb_mapjoin9.q ql/src/test/queries/clientpositive/smb_mapjoin9.q
index e915951a5b..653f4a8ad4 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin9.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table hive_test_smb_bucket1 (key int, value string) partitioned by (ds string) clustered by (key) sorted by (key) into 2 buckets;
 create table hive_test_smb_bucket2 (key int, value string) partitioned by (ds string) clustered by (key) sorted by (key) into 2 buckets;
 
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_11.q ql/src/test/queries/clientpositive/smb_mapjoin_11.q
index 66bdff17c3..ebab7b9811 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_11.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_12.q ql/src/test/queries/clientpositive/smb_mapjoin_12.q
index c209308ad9..136b4238ce 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_12.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
 set hive.input.format = org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat;
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_13.q ql/src/test/queries/clientpositive/smb_mapjoin_13.q
index 6cba8ea9e8..728ec157e7 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_13.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_13.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
 set hive.input.format = org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat;
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_14.q ql/src/test/queries/clientpositive/smb_mapjoin_14.q
index f0b0e6e7ad..25457d5744 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_14.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_14.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.exec.reducers.max = 1;
 
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_15.q ql/src/test/queries/clientpositive/smb_mapjoin_15.q
index 4a16c0d238..b4539c5632 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_15.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_15.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
 set hive.input.format = org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat;
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_16.q ql/src/test/queries/clientpositive/smb_mapjoin_16.q
index 4bf6379d27..b4fe0749cb 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_16.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_16.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
 set hive.input.format = org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat;
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_17.q ql/src/test/queries/clientpositive/smb_mapjoin_17.q
index 3374693c60..2b7d7d1704 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_17.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_17.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_18.q ql/src/test/queries/clientpositive/smb_mapjoin_18.q
index a89bc1c9a8..71d99737c1 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_18.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_18.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
 
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_19.q ql/src/test/queries/clientpositive/smb_mapjoin_19.q
index 01972c9529..1026cf137a 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_19.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_19.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
 
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_20.q ql/src/test/queries/clientpositive/smb_mapjoin_20.q
index c01d587e86..94842ba717 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_20.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_20.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_BEFORE_DIFF
 
 set hive.optimize.bucketmapjoin = true;
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_21.q ql/src/test/queries/clientpositive/smb_mapjoin_21.q
index 08b13aaac7..7d7dedea50 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_21.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_21.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
 
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_22.q ql/src/test/queries/clientpositive/smb_mapjoin_22.q
index 2f1a6b62a8..4c5fcf738c 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_22.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_22.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.optimize.bucketmapjoin = true;
 set hive.optimize.bucketmapjoin.sortedmerge = true;
 
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_25.q ql/src/test/queries/clientpositive/smb_mapjoin_25.q
index 491db2e50e..a6214c2ca3 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_25.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_25.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_6.q ql/src/test/queries/clientpositive/smb_mapjoin_6.q
index ab95b46979..cb7e540e25 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_6.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.reducers.max = 1;
 
diff --git ql/src/test/queries/clientpositive/smb_mapjoin_7.q ql/src/test/queries/clientpositive/smb_mapjoin_7.q
index fed931c897..eb4164e0b1 100644
--- ql/src/test/queries/clientpositive/smb_mapjoin_7.q
+++ ql/src/test/queries/clientpositive/smb_mapjoin_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/sort.q ql/src/test/queries/clientpositive/sort.q
index e46d787ef5..cab2712810 100644
--- ql/src/test/queries/clientpositive/sort.q
+++ ql/src/test/queries/clientpositive/sort.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/sort_merge_join_desc_1.q ql/src/test/queries/clientpositive/sort_merge_join_desc_1.q
index c02f5004dc..1547cdff46 100644
--- ql/src/test/queries/clientpositive/sort_merge_join_desc_1.q
+++ ql/src/test/queries/clientpositive/sort_merge_join_desc_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table table_desc1;
 drop table table_desc2;
 
diff --git ql/src/test/queries/clientpositive/sort_merge_join_desc_2.q ql/src/test/queries/clientpositive/sort_merge_join_desc_2.q
index 6044c51270..9453ed8f05 100644
--- ql/src/test/queries/clientpositive/sort_merge_join_desc_2.q
+++ ql/src/test/queries/clientpositive/sort_merge_join_desc_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table table_desc1;
 drop table table_desc2;
 
diff --git ql/src/test/queries/clientpositive/sort_merge_join_desc_3.q ql/src/test/queries/clientpositive/sort_merge_join_desc_3.q
index 2a5e6e216d..f8cb824eeb 100644
--- ql/src/test/queries/clientpositive/sort_merge_join_desc_3.q
+++ ql/src/test/queries/clientpositive/sort_merge_join_desc_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table table_desc1;
 drop table table_desc2;
 
diff --git ql/src/test/queries/clientpositive/sort_merge_join_desc_4.q ql/src/test/queries/clientpositive/sort_merge_join_desc_4.q
index 3b23304413..494168d3b4 100644
--- ql/src/test/queries/clientpositive/sort_merge_join_desc_4.q
+++ ql/src/test/queries/clientpositive/sort_merge_join_desc_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table table_desc1;
 drop table table_desc2;
 
diff --git ql/src/test/queries/clientpositive/sort_merge_join_desc_5.q ql/src/test/queries/clientpositive/sort_merge_join_desc_5.q
index 5be80b43e6..fbe8e5ba93 100644
--- ql/src/test/queries/clientpositive/sort_merge_join_desc_5.q
+++ ql/src/test/queries/clientpositive/sort_merge_join_desc_5.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 
 set hive.cbo.enable=false;
 
diff --git ql/src/test/queries/clientpositive/sort_merge_join_desc_6.q ql/src/test/queries/clientpositive/sort_merge_join_desc_6.q
index 0c0422f0a2..7d4dfdf0a6 100644
--- ql/src/test/queries/clientpositive/sort_merge_join_desc_6.q
+++ ql/src/test/queries/clientpositive/sort_merge_join_desc_6.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 
 
 set hive.exec.reducers.max = 1;
diff --git ql/src/test/queries/clientpositive/sort_merge_join_desc_7.q ql/src/test/queries/clientpositive/sort_merge_join_desc_7.q
index 3be7c2da66..8b65854065 100644
--- ql/src/test/queries/clientpositive/sort_merge_join_desc_7.q
+++ ql/src/test/queries/clientpositive/sort_merge_join_desc_7.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 
 
 set hive.exec.reducers.max = 1;
diff --git ql/src/test/queries/clientpositive/sort_merge_join_desc_8.q ql/src/test/queries/clientpositive/sort_merge_join_desc_8.q
index 89d2c9d2d5..5903faec2e 100644
--- ql/src/test/queries/clientpositive/sort_merge_join_desc_8.q
+++ ql/src/test/queries/clientpositive/sort_merge_join_desc_8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table table_desc1;
 drop table table_desc2;
 drop table table_desc3;
diff --git ql/src/test/queries/clientpositive/spark_combine_equivalent_work_2.q ql/src/test/queries/clientpositive/spark_combine_equivalent_work_2.q
index 2ff786a448..21767375fc 100644
--- ql/src/test/queries/clientpositive/spark_combine_equivalent_work_2.q
+++ ql/src/test/queries/clientpositive/spark_combine_equivalent_work_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 explain
diff --git ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning.q ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning.q
index 71a7399692..285d7c2bcf 100644
--- ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning.q
+++ ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=true;
 set hive.spark.dynamic.partition.pruning=true;
diff --git ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_2.q ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_2.q
index 22027098b8..248342485a 100644
--- ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_2.q
+++ ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=true;
 set hive.spark.dynamic.partition.pruning=true;
diff --git ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_4.q ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_4.q
index e5f4874ace..4e8bd1aa6f 100644
--- ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_4.q
+++ ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.spark.dynamic.partition.pruning=true;
 set hive.combine.equivalent.work.optimization=true;
 
diff --git ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_5.q ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_5.q
index 488378776e..c5c6a9565d 100644
--- ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_5.q
+++ ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.spark.dynamic.partition.pruning=true;
 
 -- This qfile tests whether we can handle nested DPP sinks
diff --git ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_mapjoin_only.q ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_mapjoin_only.q
index 7c2164d5df..468dea4a08 100644
--- ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_mapjoin_only.q
+++ ql/src/test/queries/clientpositive/spark_dynamic_partition_pruning_mapjoin_only.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=true;
 set hive.optimize.metadataonly=false;
diff --git ql/src/test/queries/clientpositive/spark_explain_groupbyshuffle.q ql/src/test/queries/clientpositive/spark_explain_groupbyshuffle.q
index cd2cba11eb..c9dc56c365 100644
--- ql/src/test/queries/clientpositive/spark_explain_groupbyshuffle.q
+++ ql/src/test/queries/clientpositive/spark_explain_groupbyshuffle.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.spark.use.groupby.shuffle=true;
 
 explain select key, count(value) from src group by key;
diff --git ql/src/test/queries/clientpositive/spark_explainuser_1.q ql/src/test/queries/clientpositive/spark_explainuser_1.q
index 43252f04cd..92e65548c5 100644
--- ql/src/test/queries/clientpositive/spark_explainuser_1.q
+++ ql/src/test/queries/clientpositive/spark_explainuser_1.q
@@ -1,3 +1,12 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src_cbo
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:part
+--! qt:dataset:lineitem
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/spark_local_queries.q ql/src/test/queries/clientpositive/spark_local_queries.q
index 82381136c7..e43f440c96 100644
--- ql/src/test/queries/clientpositive/spark_local_queries.q
+++ ql/src/test/queries/clientpositive/spark_local_queries.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src1
+--! qt:dataset:src
 -- Some basic tests to test HoS works with spark.master = local
 
 -- Test that a basic explain plan can be generated
diff --git ql/src/test/queries/clientpositive/spark_multi_insert_parallel_orderby.q ql/src/test/queries/clientpositive/spark_multi_insert_parallel_orderby.q
index 2be0d52cca..bef1f853fa 100644
--- ql/src/test/queries/clientpositive/spark_multi_insert_parallel_orderby.q
+++ ql/src/test/queries/clientpositive/spark_multi_insert_parallel_orderby.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.reducers.bytes.per.reducer=256;
 set hive.optimize.sampling.orderby=true;
diff --git ql/src/test/queries/clientpositive/spark_opt_shuffle_serde.q ql/src/test/queries/clientpositive/spark_opt_shuffle_serde.q
index 2c4691a08c..94d4d7a8a2 100644
--- ql/src/test/queries/clientpositive/spark_opt_shuffle_serde.q
+++ ql/src/test/queries/clientpositive/spark_opt_shuffle_serde.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.spark.optimize.shuffle.serde=true;
 
 set hive.spark.use.groupby.shuffle=true;
diff --git ql/src/test/queries/clientpositive/spark_union_merge.q ql/src/test/queries/clientpositive/spark_union_merge.q
index 31210788a9..6f2b059958 100644
--- ql/src/test/queries/clientpositive/spark_union_merge.q
+++ ql/src/test/queries/clientpositive/spark_union_merge.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- union case: both subqueries are map jobs on same input, followed by filesink
 -- mostly copied from union.q
diff --git ql/src/test/queries/clientpositive/spark_use_op_stats.q ql/src/test/queries/clientpositive/spark_use_op_stats.q
index b559bc0ab8..8a7ce2cb3b 100644
--- ql/src/test/queries/clientpositive/spark_use_op_stats.q
+++ ql/src/test/queries/clientpositive/spark_use_op_stats.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.spark.use.op.stats=false;
 set hive.auto.convert.join=false;
diff --git ql/src/test/queries/clientpositive/spark_use_ts_stats_for_mapjoin.q ql/src/test/queries/clientpositive/spark_use_ts_stats_for_mapjoin.q
index b1df562be2..5ee09fc684 100644
--- ql/src/test/queries/clientpositive/spark_use_ts_stats_for_mapjoin.q
+++ ql/src/test/queries/clientpositive/spark_use_ts_stats_for_mapjoin.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=true;
 set hive.spark.use.ts.stats.for.mapjoin=true;
diff --git ql/src/test/queries/clientpositive/spark_vectorized_dynamic_partition_pruning.q ql/src/test/queries/clientpositive/spark_vectorized_dynamic_partition_pruning.q
index 0de55ce493..47c826adba 100644
--- ql/src/test/queries/clientpositive/spark_vectorized_dynamic_partition_pruning.q
+++ ql/src/test/queries/clientpositive/spark_vectorized_dynamic_partition_pruning.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.optimize.ppd=true;
 set hive.ppd.remove.duplicatefilters=true;
 set hive.spark.dynamic.partition.pruning=true;
diff --git ql/src/test/queries/clientpositive/special_character_in_tabnames_1.q ql/src/test/queries/clientpositive/special_character_in_tabnames_1.q
index adc23e99b3..67ba28db8f 100644
--- ql/src/test/queries/clientpositive/special_character_in_tabnames_1.q
+++ ql/src/test/queries/clientpositive/special_character_in_tabnames_1.q
@@ -1,3 +1,9 @@
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:lineitem
+--! qt:dataset:cbo_t3
+--! qt:dataset:cbo_t2
+--! qt:dataset:cbo_t1
 set hive.cbo.enable=true;
 set hive.exec.check.crossproducts=false;
 set hive.stats.fetch.column.stats=true;
diff --git ql/src/test/queries/clientpositive/stats0.q ql/src/test/queries/clientpositive/stats0.q
index 48b5c52600..2c2fdac821 100644
--- ql/src/test/queries/clientpositive/stats0.q
+++ ql/src/test/queries/clientpositive/stats0.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.autogather=true;
 set datanucleus.cache.collections=false;
 
diff --git ql/src/test/queries/clientpositive/stats1.q ql/src/test/queries/clientpositive/stats1.q
index a7591220a8..89fe14c22c 100644
--- ql/src/test/queries/clientpositive/stats1.q
+++ ql/src/test/queries/clientpositive/stats1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/stats10.q ql/src/test/queries/clientpositive/stats10.q
index 1732f36418..0516b7d3cd 100644
--- ql/src/test/queries/clientpositive/stats10.q
+++ ql/src/test/queries/clientpositive/stats10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set datanucleus.cache.collections=false;
 set hive.stats.autogather=true;
diff --git ql/src/test/queries/clientpositive/stats12.q ql/src/test/queries/clientpositive/stats12.q
index c1db34618e..9231d6f4df 100644
--- ql/src/test/queries/clientpositive/stats12.q
+++ ql/src/test/queries/clientpositive/stats12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set datanucleus.cache.collections=false;
 set hive.stats.autogather=false;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/stats13.q ql/src/test/queries/clientpositive/stats13.q
index beb7bfa42e..58b26fb20d 100644
--- ql/src/test/queries/clientpositive/stats13.q
+++ ql/src/test/queries/clientpositive/stats13.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set datanucleus.cache.collections=false;
 set hive.stats.autogather=false;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/stats14.q ql/src/test/queries/clientpositive/stats14.q
index 8e74df535d..121bf5c578 100644
--- ql/src/test/queries/clientpositive/stats14.q
+++ ql/src/test/queries/clientpositive/stats14.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set datanucleus.cache.collections=false;
 
 create table stats_src like src;
diff --git ql/src/test/queries/clientpositive/stats15.q ql/src/test/queries/clientpositive/stats15.q
index 10908b3c19..5fbd4ea4d7 100644
--- ql/src/test/queries/clientpositive/stats15.q
+++ ql/src/test/queries/clientpositive/stats15.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set datanucleus.cache.collections=false;
 
 create table stats_src like src;
diff --git ql/src/test/queries/clientpositive/stats16.q ql/src/test/queries/clientpositive/stats16.q
index 0557ce6e86..872ab2daba 100644
--- ql/src/test/queries/clientpositive/stats16.q
+++ ql/src/test/queries/clientpositive/stats16.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.autogather=false;
 
 drop table stats16;
diff --git ql/src/test/queries/clientpositive/stats18.q ql/src/test/queries/clientpositive/stats18.q
index 6652e0e6b1..9d308075bf 100644
--- ql/src/test/queries/clientpositive/stats18.q
+++ ql/src/test/queries/clientpositive/stats18.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false;
 
 set datanucleus.cache.collections=false;
diff --git ql/src/test/queries/clientpositive/stats2.q ql/src/test/queries/clientpositive/stats2.q
index d6bb258307..010f19e85a 100644
--- ql/src/test/queries/clientpositive/stats2.q
+++ ql/src/test/queries/clientpositive/stats2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set datanucleus.cache.collections=false;
 set hive.stats.autogather=false;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/stats4.q ql/src/test/queries/clientpositive/stats4.q
index 77a83c69ea..59447ffb44 100644
--- ql/src/test/queries/clientpositive/stats4.q
+++ ql/src/test/queries/clientpositive/stats4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set datanucleus.cache.collections=false;
 set hive.stats.autogather=true;
 
diff --git ql/src/test/queries/clientpositive/stats5.q ql/src/test/queries/clientpositive/stats5.q
index 911bbff0db..1c368b28df 100644
--- ql/src/test/queries/clientpositive/stats5.q
+++ ql/src/test/queries/clientpositive/stats5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider;
 set datanucleus.cache.collections=false;
 
diff --git ql/src/test/queries/clientpositive/stats6.q ql/src/test/queries/clientpositive/stats6.q
index bef6e8809e..82a3b3e4b6 100644
--- ql/src/test/queries/clientpositive/stats6.q
+++ ql/src/test/queries/clientpositive/stats6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set datanucleus.cache.collections=false;
 set hive.stats.autogather=false;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/stats7.q ql/src/test/queries/clientpositive/stats7.q
index 19d0e14269..8ca719824b 100644
--- ql/src/test/queries/clientpositive/stats7.q
+++ ql/src/test/queries/clientpositive/stats7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set datanucleus.cache.collections=false;
 set hive.stats.autogather=false;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/stats8.q ql/src/test/queries/clientpositive/stats8.q
index 46002caf4a..70cff1daf7 100644
--- ql/src/test/queries/clientpositive/stats8.q
+++ ql/src/test/queries/clientpositive/stats8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set datanucleus.cache.collections=false;
 set hive.stats.autogather=false;
 set hive.exec.dynamic.partition=true;
diff --git ql/src/test/queries/clientpositive/stats9.q ql/src/test/queries/clientpositive/stats9.q
index 48b20443a9..ac468269a7 100644
--- ql/src/test/queries/clientpositive/stats9.q
+++ ql/src/test/queries/clientpositive/stats9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 set datanucleus.cache.collections=false;
 set hive.stats.autogather=false;
 
diff --git ql/src/test/queries/clientpositive/stats_aggregator_error_1.q ql/src/test/queries/clientpositive/stats_aggregator_error_1.q
index d6f84ed7e4..f6b8b4ef97 100644
--- ql/src/test/queries/clientpositive/stats_aggregator_error_1.q
+++ ql/src/test/queries/clientpositive/stats_aggregator_error_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- In this test, there is a dummy stats aggregator which throws an error when various
 -- methods are called (as indicated by the parameter hive.test.dummystats.aggregator)
 -- Since stats need not be reliable (by setting hive.stats.reliable to false), the 
diff --git ql/src/test/queries/clientpositive/stats_based_fetch_decision.q ql/src/test/queries/clientpositive/stats_based_fetch_decision.q
index 8b6a7d90cc..6e4410f163 100644
--- ql/src/test/queries/clientpositive/stats_based_fetch_decision.q
+++ ql/src/test/queries/clientpositive/stats_based_fetch_decision.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 SET hive.fetch.task.conversion=more;
 SET hive.explain.user=false;
 SET hive.stats.fetch.column.stats=false;
diff --git ql/src/test/queries/clientpositive/stats_empty_dyn_part.q ql/src/test/queries/clientpositive/stats_empty_dyn_part.q
index 38ee6f7f4f..bcb657acbd 100644
--- ql/src/test/queries/clientpositive/stats_empty_dyn_part.q
+++ ql/src/test/queries/clientpositive/stats_empty_dyn_part.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 -- This test verifies writing a query using dynamic partitions
 -- which results in no partitions actually being created with
 -- hive.stats.reliable set to true
diff --git ql/src/test/queries/clientpositive/stats_empty_partition.q ql/src/test/queries/clientpositive/stats_empty_partition.q
index 305a97c929..8fb941e354 100644
--- ql/src/test/queries/clientpositive/stats_empty_partition.q
+++ ql/src/test/queries/clientpositive/stats_empty_partition.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 -- This test verifies that writing an empty partition succeeds when
 -- hive.stats.reliable is set to true.
 
diff --git ql/src/test/queries/clientpositive/stats_filemetadata.q ql/src/test/queries/clientpositive/stats_filemetadata.q
index dc9f24292c..5ddbaac626 100644
--- ql/src/test/queries/clientpositive/stats_filemetadata.q
+++ ql/src/test/queries/clientpositive/stats_filemetadata.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 CREATE TABLE many_files(key string, value string)
diff --git ql/src/test/queries/clientpositive/stats_invalidation.q ql/src/test/queries/clientpositive/stats_invalidation.q
index a7fce6e3e5..20f287f75d 100644
--- ql/src/test/queries/clientpositive/stats_invalidation.q
+++ ql/src/test/queries/clientpositive/stats_invalidation.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.autogather=true;
 
 CREATE TABLE stats_invalid (key string, value string);
diff --git ql/src/test/queries/clientpositive/stats_list_bucket.q ql/src/test/queries/clientpositive/stats_list_bucket.q
index 536702c1cd..c4339d03ce 100644
--- ql/src/test/queries/clientpositive/stats_list_bucket.q
+++ ql/src/test/queries/clientpositive/stats_list_bucket.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 -- INCLUDE_HADOOP_MAJOR_VERSIONS(0.23)
 
diff --git ql/src/test/queries/clientpositive/stats_missing_warning.q ql/src/test/queries/clientpositive/stats_missing_warning.q
index b6cf049efc..fd94b70257 100644
--- ql/src/test/queries/clientpositive/stats_missing_warning.q
+++ ql/src/test/queries/clientpositive/stats_missing_warning.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.autogather=false;
 
 -- Explictily DROP vs. CREATE IF NOT EXISTS to ensure stats are not carried over
diff --git ql/src/test/queries/clientpositive/stats_noscan_1.q ql/src/test/queries/clientpositive/stats_noscan_1.q
index 2681f7769c..e23a376d4c 100644
--- ql/src/test/queries/clientpositive/stats_noscan_1.q
+++ ql/src/test/queries/clientpositive/stats_noscan_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.explain.user=false;
 set datanucleus.cache.collections=false;
 set hive.stats.autogather=false;
diff --git ql/src/test/queries/clientpositive/stats_noscan_2.q ql/src/test/queries/clientpositive/stats_noscan_2.q
index d473081784..76d974f658 100644
--- ql/src/test/queries/clientpositive/stats_noscan_2.q
+++ ql/src/test/queries/clientpositive/stats_noscan_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 dfs -cp ${system:hive.root}/data/files/ext_test ${system:test.tmp.dir}/analyze_external;
 
 -- test analyze table compute statistiscs [noscan] on external table 
diff --git ql/src/test/queries/clientpositive/stats_null_optimizer.q ql/src/test/queries/clientpositive/stats_null_optimizer.q
index 1114e5ab2e..13b4a3c7c8 100644
--- ql/src/test/queries/clientpositive/stats_null_optimizer.q
+++ ql/src/test/queries/clientpositive/stats_null_optimizer.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain select count(key) from (select null as key from src)src;
 
 select count(key) from (select null as key from src)src;
diff --git ql/src/test/queries/clientpositive/stats_publisher_error_1.q ql/src/test/queries/clientpositive/stats_publisher_error_1.q
index 50751f7170..12ce1eb1b0 100644
--- ql/src/test/queries/clientpositive/stats_publisher_error_1.q
+++ ql/src/test/queries/clientpositive/stats_publisher_error_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- In this test, there is a dummy stats publisher which throws an error when various
 -- methods are called (as indicated by the parameter hive.test.dummystats.publisher)
 -- Since stats need not be reliable (by setting hive.stats.reliable to false), the
diff --git ql/src/test/queries/clientpositive/statsfs.q ql/src/test/queries/clientpositive/statsfs.q
index 0d29067611..166ba360c1 100644
--- ql/src/test/queries/clientpositive/statsfs.q
+++ ql/src/test/queries/clientpositive/statsfs.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.stats.dbclass=fs;
 
 -- stats computation on partitioned table with analyze command
diff --git ql/src/test/queries/clientpositive/str_to_map.q ql/src/test/queries/clientpositive/str_to_map.q
index 3280d899d2..3b4904d585 100644
--- ql/src/test/queries/clientpositive/str_to_map.q
+++ ql/src/test/queries/clientpositive/str_to_map.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=more;
 
diff --git ql/src/test/queries/clientpositive/struct_in_view.q ql/src/test/queries/clientpositive/struct_in_view.q
index cbd89098e3..2cff74d0ea 100644
--- ql/src/test/queries/clientpositive/struct_in_view.q
+++ ql/src/test/queries/clientpositive/struct_in_view.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table testreserved;
 
 create table testreserved (data struct<`end`:string, id: string>);
diff --git ql/src/test/queries/clientpositive/subq.q ql/src/test/queries/clientpositive/subq.q
index 678620f6b0..3bd2d070ac 100644
--- ql/src/test/queries/clientpositive/subq.q
+++ ql/src/test/queries/clientpositive/subq.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 EXPLAIN
 FROM (
diff --git ql/src/test/queries/clientpositive/subq2.q ql/src/test/queries/clientpositive/subq2.q
index 98e663b6b7..12863b9269 100644
--- ql/src/test/queries/clientpositive/subq2.q
+++ ql/src/test/queries/clientpositive/subq2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 EXPLAIN
 SELECT a.k, a.c
diff --git ql/src/test/queries/clientpositive/subq_where_serialization.q ql/src/test/queries/clientpositive/subq_where_serialization.q
index 91290c4d85..de68c8aa29 100644
--- ql/src/test/queries/clientpositive/subq_where_serialization.q
+++ ql/src/test/queries/clientpositive/subq_where_serialization.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.auto.convert.join=true;
 set hive.auto.convert.join.noconditionaltask.size=10000000;
diff --git ql/src/test/queries/clientpositive/subquery_alias.q ql/src/test/queries/clientpositive/subquery_alias.q
index fcdb64ce00..fdffa88a2f 100644
--- ql/src/test/queries/clientpositive/subquery_alias.q
+++ ql/src/test/queries/clientpositive/subquery_alias.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 EXPLAIN
 FROM (
diff --git ql/src/test/queries/clientpositive/subquery_corr.q ql/src/test/queries/clientpositive/subquery_corr.q
index 10b4c3adb6..26f6e41f86 100644
--- ql/src/test/queries/clientpositive/subquery_corr.q
+++ ql/src/test/queries/clientpositive/subquery_corr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 
diff --git ql/src/test/queries/clientpositive/subquery_exists.q ql/src/test/queries/clientpositive/subquery_exists.q
index 08681e58fe..40106f98cc 100644
--- ql/src/test/queries/clientpositive/subquery_exists.q
+++ ql/src/test/queries/clientpositive/subquery_exists.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/subquery_exists_explain_rewrite.q ql/src/test/queries/clientpositive/subquery_exists_explain_rewrite.q
index d6efd98fe8..1d689b5e09 100644
--- ql/src/test/queries/clientpositive/subquery_exists_explain_rewrite.q
+++ ql/src/test/queries/clientpositive/subquery_exists_explain_rewrite.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.cbo.enable=false;
 
 -- no agg, corr
diff --git ql/src/test/queries/clientpositive/subquery_exists_having.q ql/src/test/queries/clientpositive/subquery_exists_having.q
index 878a0cb830..af0d71cf8b 100644
--- ql/src/test/queries/clientpositive/subquery_exists_having.q
+++ ql/src/test/queries/clientpositive/subquery_exists_having.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.correlation=false;
 
diff --git ql/src/test/queries/clientpositive/subquery_in.q ql/src/test/queries/clientpositive/subquery_in.q
index 7d4ece9dca..0fdcd0048e 100644
--- ql/src/test/queries/clientpositive/subquery_in.q
+++ ql/src/test/queries/clientpositive/subquery_in.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src
+--! qt:dataset:part
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 
diff --git ql/src/test/queries/clientpositive/subquery_in_explain_rewrite.q ql/src/test/queries/clientpositive/subquery_in_explain_rewrite.q
index 5d3f966c79..28319c4074 100644
--- ql/src/test/queries/clientpositive/subquery_in_explain_rewrite.q
+++ ql/src/test/queries/clientpositive/subquery_in_explain_rewrite.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src
+--! qt:dataset:part
+--! qt:dataset:lineitem
 set hive.cbo.enable=false;
 
 -- non agg, non corr
diff --git ql/src/test/queries/clientpositive/subquery_in_having.q ql/src/test/queries/clientpositive/subquery_in_having.q
index 0bf8657cc3..67bb6a95ed 100644
--- ql/src/test/queries/clientpositive/subquery_in_having.q
+++ ql/src/test/queries/clientpositive/subquery_in_having.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/subquery_multi.q ql/src/test/queries/clientpositive/subquery_multi.q
index 780647d082..81a9187c19 100644
--- ql/src/test/queries/clientpositive/subquery_multi.q
+++ ql/src/test/queries/clientpositive/subquery_multi.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src
+--! qt:dataset:part
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 
diff --git ql/src/test/queries/clientpositive/subquery_multiinsert.q ql/src/test/queries/clientpositive/subquery_multiinsert.q
index 9d70f51ec2..de064f382c 100644
--- ql/src/test/queries/clientpositive/subquery_multiinsert.q
+++ ql/src/test/queries/clientpositive/subquery_multiinsert.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.PostExecutePrinter,org.apache.hadoop.hive.ql.hooks.PrintCompletedTasksHook;
 
diff --git ql/src/test/queries/clientpositive/subquery_nested_subquery.q ql/src/test/queries/clientpositive/subquery_nested_subquery.q
index 84c78b7625..c3459031a5 100644
--- ql/src/test/queries/clientpositive/subquery_nested_subquery.q
+++ ql/src/test/queries/clientpositive/subquery_nested_subquery.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 select *
 from part x 
 where x.p_name in (select y.p_name from part y where exists (select z.p_name from part z where y.p_name = z.p_name))
diff --git ql/src/test/queries/clientpositive/subquery_notexists.q ql/src/test/queries/clientpositive/subquery_notexists.q
index 41036038bb..5b80969405 100644
--- ql/src/test/queries/clientpositive/subquery_notexists.q
+++ ql/src/test/queries/clientpositive/subquery_notexists.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/subquery_notexists_having.q ql/src/test/queries/clientpositive/subquery_notexists_having.q
index 24b0a66dd7..cce179a7c7 100644
--- ql/src/test/queries/clientpositive/subquery_notexists_having.q
+++ ql/src/test/queries/clientpositive/subquery_notexists_having.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/subquery_notin.q ql/src/test/queries/clientpositive/subquery_notin.q
index c509654691..6fcee21727 100644
--- ql/src/test/queries/clientpositive/subquery_notin.q
+++ ql/src/test/queries/clientpositive/subquery_notin.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src
+--! qt:dataset:part
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 
 -- non agg, non corr
diff --git ql/src/test/queries/clientpositive/subquery_notin_having.q ql/src/test/queries/clientpositive/subquery_notin_having.q
index 2cd0bec4ba..bc328bb42b 100644
--- ql/src/test/queries/clientpositive/subquery_notin_having.q
+++ ql/src/test/queries/clientpositive/subquery_notin_having.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 -- non agg, non corr
 
diff --git ql/src/test/queries/clientpositive/subquery_scalar.q ql/src/test/queries/clientpositive/subquery_scalar.q
index f644dad74a..781bb2980a 100644
--- ql/src/test/queries/clientpositive/subquery_scalar.q
+++ ql/src/test/queries/clientpositive/subquery_scalar.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src
+--! qt:dataset:part
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/subquery_select.q ql/src/test/queries/clientpositive/subquery_select.q
index c1766ff4f4..12b2f1f3ea 100644
--- ql/src/test/queries/clientpositive/subquery_select.q
+++ ql/src/test/queries/clientpositive/subquery_select.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 -- following tests test queries in SELECT
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/subquery_shared_alias.q ql/src/test/queries/clientpositive/subquery_shared_alias.q
index d442f077c0..7664e0b585 100644
--- ql/src/test/queries/clientpositive/subquery_shared_alias.q
+++ ql/src/test/queries/clientpositive/subquery_shared_alias.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 
 select *
diff --git ql/src/test/queries/clientpositive/subquery_unqual_corr_expr.q ql/src/test/queries/clientpositive/subquery_unqual_corr_expr.q
index 78a8b207c0..50355ebe6b 100644
--- ql/src/test/queries/clientpositive/subquery_unqual_corr_expr.q
+++ ql/src/test/queries/clientpositive/subquery_unqual_corr_expr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 explain 
diff --git ql/src/test/queries/clientpositive/subquery_unqualcolumnrefs.q ql/src/test/queries/clientpositive/subquery_unqualcolumnrefs.q
index dad6f23497..753032d9de 100644
--- ql/src/test/queries/clientpositive/subquery_unqualcolumnrefs.q
+++ ql/src/test/queries/clientpositive/subquery_unqualcolumnrefs.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 create table src11 (key1 string, value1 string);
 
diff --git ql/src/test/queries/clientpositive/subquery_views.q ql/src/test/queries/clientpositive/subquery_views.q
index 87c055b5ee..2fae0ae246 100644
--- ql/src/test/queries/clientpositive/subquery_views.q
+++ ql/src/test/queries/clientpositive/subquery_views.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/sum_expr_with_order.q ql/src/test/queries/clientpositive/sum_expr_with_order.q
index d3e9ea58df..682fd68586 100644
--- ql/src/test/queries/clientpositive/sum_expr_with_order.q
+++ ql/src/test/queries/clientpositive/sum_expr_with_order.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 select 
diff --git ql/src/test/queries/clientpositive/sysdb.q ql/src/test/queries/clientpositive/sysdb.q
index 36d80e2782..3e0ce9f377 100644
--- ql/src/test/queries/clientpositive/sysdb.q
+++ ql/src/test/queries/clientpositive/sysdb.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.strict.checks.cartesian.product=false;
 
 set hive.compute.query.using.stats=false;
diff --git ql/src/test/queries/clientpositive/tablename_with_select.q ql/src/test/queries/clientpositive/tablename_with_select.q
index e4aee3c3cd..85c3b4cb02 100644
--- ql/src/test/queries/clientpositive/tablename_with_select.q
+++ ql/src/test/queries/clientpositive/tablename_with_select.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 CREATE TABLE tmp_select(a INT, b STRING);
diff --git ql/src/test/queries/clientpositive/tablevalues.q ql/src/test/queries/clientpositive/tablevalues.q
index e3d605a034..eade2ffd14 100644
--- ql/src/test/queries/clientpositive/tablevalues.q
+++ ql/src/test/queries/clientpositive/tablevalues.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- VALUES -> array(struct(),struct())
 -- TABLE -> LATERAL VIEW INLINE
 
diff --git ql/src/test/queries/clientpositive/temp_table.q ql/src/test/queries/clientpositive/temp_table.q
index f820d67a01..83049592ab 100644
--- ql/src/test/queries/clientpositive/temp_table.q
+++ ql/src/test/queries/clientpositive/temp_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 EXPLAIN CREATE TEMPORARY TABLE foo AS SELECT * FROM src WHERE key % 2 = 0;
@@ -26,8 +27,6 @@ INSERT OVERWRITE TABLE bay SELECT * FROM src ORDER BY key;
 
 select * from bay order by key limit 10;
 
-SHOW TABLES;
-
 CREATE DATABASE two;
 
 USE two;
diff --git ql/src/test/queries/clientpositive/temp_table_gb1.q ql/src/test/queries/clientpositive/temp_table_gb1.q
index 07394d5370..4765b4adb6 100644
--- ql/src/test/queries/clientpositive/temp_table_gb1.q
+++ ql/src/test/queries/clientpositive/temp_table_gb1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 set hive.map.aggr=false;
diff --git ql/src/test/queries/clientpositive/temp_table_join1.q ql/src/test/queries/clientpositive/temp_table_join1.q
index e77d228a76..49b8870f7e 100644
--- ql/src/test/queries/clientpositive/temp_table_join1.q
+++ ql/src/test/queries/clientpositive/temp_table_join1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/temp_table_precedence.q ql/src/test/queries/clientpositive/temp_table_precedence.q
index 971af7318e..d3f75d4e23 100644
--- ql/src/test/queries/clientpositive/temp_table_precedence.q
+++ ql/src/test/queries/clientpositive/temp_table_precedence.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 create database ttp;
 
diff --git ql/src/test/queries/clientpositive/temp_table_subquery1.q ql/src/test/queries/clientpositive/temp_table_subquery1.q
index ecf53e9caf..1bb6972d8c 100644
--- ql/src/test/queries/clientpositive/temp_table_subquery1.q
+++ ql/src/test/queries/clientpositive/temp_table_subquery1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 create temporary table src_temp as select * from src;
 
diff --git ql/src/test/queries/clientpositive/temp_table_truncate.q ql/src/test/queries/clientpositive/temp_table_truncate.q
index 7b0fefc058..93a54d9f46 100644
--- ql/src/test/queries/clientpositive/temp_table_truncate.q
+++ ql/src/test/queries/clientpositive/temp_table_truncate.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 CREATE TEMPORARY TABLE tmp_src AS SELECT * FROM src WHERE key % 2 = 0;
@@ -5,7 +7,7 @@ CREATE TEMPORARY TABLE tmp_srcpart AS SELECT * FROM srcpart;
 
 DESCRIBE tmp_src;
 DESCRIBE tmp_srcpart;
-SHOW TABLES;
+SHOW TABLES LIKE "tmp_src*";
 
 SELECT count(*) FROM tmp_src;
 SELECT count(*) FROM tmp_srcpart;
@@ -18,4 +20,4 @@ SELECT count(*) FROM tmp_src;
 EXPLAIN TRUNCATE TABLE tmp_srcpart;
 TRUNCATE TABLE tmp_srcpart;
 
-SELECT count(*) FROM tmp_srcpart;
\ No newline at end of file
+SELECT count(*) FROM tmp_srcpart;
diff --git ql/src/test/queries/clientpositive/temp_table_windowing_expressions.q ql/src/test/queries/clientpositive/temp_table_windowing_expressions.q
index 1b97fa118b..ccaf25db1b 100644
--- ql/src/test/queries/clientpositive/temp_table_windowing_expressions.q
+++ ql/src/test/queries/clientpositive/temp_table_windowing_expressions.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 drop table over10k;
 
 create temporary table over10k(
diff --git ql/src/test/queries/clientpositive/test_boolean_whereclause.q ql/src/test/queries/clientpositive/test_boolean_whereclause.q
index a4f0fdb1c1..bf28d29432 100644
--- ql/src/test/queries/clientpositive/test_boolean_whereclause.q
+++ ql/src/test/queries/clientpositive/test_boolean_whereclause.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table if not exists test_boolean(dummy tinyint);
 insert overwrite table test_boolean  select 1 from src tablesample (1 rows);
 
diff --git ql/src/test/queries/clientpositive/tez-tag.q ql/src/test/queries/clientpositive/tez-tag.q
index 0647696a55..795927fa92 100644
--- ql/src/test/queries/clientpositive/tez-tag.q
+++ ql/src/test/queries/clientpositive/tez-tag.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/tez_bmj_schema_evolution.q ql/src/test/queries/clientpositive/tez_bmj_schema_evolution.q
index a286aed38d..7f0f8d3a22 100644
--- ql/src/test/queries/clientpositive/tez_bmj_schema_evolution.q
+++ ql/src/test/queries/clientpositive/tez_bmj_schema_evolution.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 
diff --git ql/src/test/queries/clientpositive/tez_dml.q ql/src/test/queries/clientpositive/tez_dml.q
index 816da5da6d..9eccf3653d 100644
--- ql/src/test/queries/clientpositive/tez_dml.q
+++ ql/src/test/queries/clientpositive/tez_dml.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.exec.dynamic.partition.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_1.q ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_1.q
index aa331f2009..8d5b442a36 100644
--- ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_1.q
+++ ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_2.q ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_2.q
index 2c3618995b..80765935ac 100644
--- ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_2.q
+++ ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_3.q ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_3.q
index ff4cde2c30..d318f7d4f9 100644
--- ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_3.q
+++ ql/src/test/queries/clientpositive/tez_dynpart_hashjoin_3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.optimize.limittranspose=true;
 set hive.optimize.limittranspose.reductionpercentage=0.1f;
 set hive.optimize.limittranspose.reductiontuples=100;
diff --git ql/src/test/queries/clientpositive/tez_input_counters.q ql/src/test/queries/clientpositive/tez_input_counters.q
index d471c3d83b..44619662b9 100644
--- ql/src/test/queries/clientpositive/tez_input_counters.q
+++ ql/src/test/queries/clientpositive/tez_input_counters.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.compute.query.using.stats=false;
 set hive.exec.dynamic.partition.mode=nonstrict;
 set hive.exec.max.dynamic.partitions=400;
diff --git ql/src/test/queries/clientpositive/tez_insert_overwrite_local_directory_1.q ql/src/test/queries/clientpositive/tez_insert_overwrite_local_directory_1.q
index e06403a97d..c67ac3b5c7 100644
--- ql/src/test/queries/clientpositive/tez_insert_overwrite_local_directory_1.q
+++ ql/src/test/queries/clientpositive/tez_insert_overwrite_local_directory_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 insert overwrite local directory '${system:test.tmp.dir}/tez_local_src_table_1'
 select * from src order by key limit 10 ;
 dfs -cat ${system:test.tmp.dir.uri}/tez_local_src_table_1/* ;
diff --git ql/src/test/queries/clientpositive/tez_join_hash.q ql/src/test/queries/clientpositive/tez_join_hash.q
index 158c99b339..c5818958a2 100644
--- ql/src/test/queries/clientpositive/tez_join_hash.q
+++ ql/src/test/queries/clientpositive/tez_join_hash.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/tez_join_result_complex.q ql/src/test/queries/clientpositive/tez_join_result_complex.q
index 42c55063c2..cef8dc7d4e 100644
--- ql/src/test/queries/clientpositive/tez_join_result_complex.q
+++ ql/src/test/queries/clientpositive/tez_join_result_complex.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.auto.convert.join=true;
 SET hive.auto.convert.join.noconditionaltask=true;
 SET hive.auto.convert.join.noconditionaltask.size=1000000000;
diff --git ql/src/test/queries/clientpositive/tez_join_tests.q ql/src/test/queries/clientpositive/tez_join_tests.q
index 9a6280571c..bc57af5da3 100644
--- ql/src/test/queries/clientpositive/tez_join_tests.q
+++ ql/src/test/queries/clientpositive/tez_join_tests.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/tez_joins_explain.q ql/src/test/queries/clientpositive/tez_joins_explain.q
index 5f26ee2807..27aac1cc88 100644
--- ql/src/test/queries/clientpositive/tez_joins_explain.q
+++ ql/src/test/queries/clientpositive/tez_joins_explain.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/tez_multi_union.q ql/src/test/queries/clientpositive/tez_multi_union.q
index 9dd3c8da0a..1798f4af46 100644
--- ql/src/test/queries/clientpositive/tez_multi_union.q
+++ ql/src/test/queries/clientpositive/tez_multi_union.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 select key from
 (
diff --git ql/src/test/queries/clientpositive/tez_schema_evolution.q ql/src/test/queries/clientpositive/tez_schema_evolution.q
index 1d8f48771c..62d66017eb 100644
--- ql/src/test/queries/clientpositive/tez_schema_evolution.q
+++ ql/src/test/queries/clientpositive/tez_schema_evolution.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.vectorized.execution.enabled=false;
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/tez_smb_main.q ql/src/test/queries/clientpositive/tez_smb_main.q
index 7d35571cb1..43b0a5f280 100644
--- ql/src/test/queries/clientpositive/tez_smb_main.q
+++ ql/src/test/queries/clientpositive/tez_smb_main.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 set hive.strict.checks.bucketing=false;
 
diff --git ql/src/test/queries/clientpositive/tez_union.q ql/src/test/queries/clientpositive/tez_union.q
index fba543c1ad..da21886d69 100644
--- ql/src/test/queries/clientpositive/tez_union.q
+++ ql/src/test/queries/clientpositive/tez_union.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/tez_union2.q ql/src/test/queries/clientpositive/tez_union2.q
index 22eab0183a..b20f720f50 100644
--- ql/src/test/queries/clientpositive/tez_union2.q
+++ ql/src/test/queries/clientpositive/tez_union2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 explain 
 SELECT key, value FROM
diff --git ql/src/test/queries/clientpositive/tez_union_decimal.q ql/src/test/queries/clientpositive/tez_union_decimal.q
index 0f56e6a124..f7093cf0f4 100644
--- ql/src/test/queries/clientpositive/tez_union_decimal.q
+++ ql/src/test/queries/clientpositive/tez_union_decimal.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 select sum(a) from (
   select cast(1.1 as decimal) a from src tablesample (1 rows)
   union all
diff --git ql/src/test/queries/clientpositive/tez_union_multiinsert.q ql/src/test/queries/clientpositive/tez_union_multiinsert.q
index 67a9ac541a..e0a24bba1f 100644
--- ql/src/test/queries/clientpositive/tez_union_multiinsert.q
+++ ql/src/test/queries/clientpositive/tez_union_multiinsert.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/tez_union_with_udf.q ql/src/test/queries/clientpositive/tez_union_with_udf.q
index 68265301e4..5afa485ec2 100644
--- ql/src/test/queries/clientpositive/tez_union_with_udf.q
+++ ql/src/test/queries/clientpositive/tez_union_with_udf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 select * from (select key + key from src limit 1) a
 union all
 select * from (select key + key from src limit 1) b;
diff --git ql/src/test/queries/clientpositive/tez_vector_dynpart_hashjoin_1.q ql/src/test/queries/clientpositive/tez_vector_dynpart_hashjoin_1.q
index 04683d2491..66e3523bac 100644
--- ql/src/test/queries/clientpositive/tez_vector_dynpart_hashjoin_1.q
+++ ql/src/test/queries/clientpositive/tez_vector_dynpart_hashjoin_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/tez_vector_dynpart_hashjoin_2.q ql/src/test/queries/clientpositive/tez_vector_dynpart_hashjoin_2.q
index e3d183008d..04d68293cc 100644
--- ql/src/test/queries/clientpositive/tez_vector_dynpart_hashjoin_2.q
+++ ql/src/test/queries/clientpositive/tez_vector_dynpart_hashjoin_2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/timestamp.q ql/src/test/queries/clientpositive/timestamp.q
index 4a040809c8..1453cf87ff 100644
--- ql/src/test/queries/clientpositive/timestamp.q
+++ ql/src/test/queries/clientpositive/timestamp.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/timestamp_1.q ql/src/test/queries/clientpositive/timestamp_1.q
index ce79eefaae..d5f7d6bfbc 100644
--- ql/src/test/queries/clientpositive/timestamp_1.q
+++ ql/src/test/queries/clientpositive/timestamp_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 drop table timestamp_1;
diff --git ql/src/test/queries/clientpositive/timestamp_2.q ql/src/test/queries/clientpositive/timestamp_2.q
index 351f5ca519..085cb5ae2b 100644
--- ql/src/test/queries/clientpositive/timestamp_2.q
+++ ql/src/test/queries/clientpositive/timestamp_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 drop table timestamp_2;
diff --git ql/src/test/queries/clientpositive/timestamp_3.q ql/src/test/queries/clientpositive/timestamp_3.q
index 0e1a8d5526..23d3a71807 100644
--- ql/src/test/queries/clientpositive/timestamp_3.q
+++ ql/src/test/queries/clientpositive/timestamp_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 drop table timestamp_3;
diff --git ql/src/test/queries/clientpositive/timestamp_comparison.q ql/src/test/queries/clientpositive/timestamp_comparison.q
index 30fee3cbf6..7ac2932c5e 100644
--- ql/src/test/queries/clientpositive/timestamp_comparison.q
+++ ql/src/test/queries/clientpositive/timestamp_comparison.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 select cast('2011-05-06 07:08:09' as timestamp) >
diff --git ql/src/test/queries/clientpositive/timestamp_comparison2.q ql/src/test/queries/clientpositive/timestamp_comparison2.q
index d41cc83dbe..affc36fee8 100644
--- ql/src/test/queries/clientpositive/timestamp_comparison2.q
+++ ql/src/test/queries/clientpositive/timestamp_comparison2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 -- Test timestamp-to-numeric comparison
 select count(*) 
 FROM   alltypesorc
diff --git ql/src/test/queries/clientpositive/timestamp_ints_casts.q ql/src/test/queries/clientpositive/timestamp_ints_casts.q
index b043d59f9a..e3fd37b9ef 100644
--- ql/src/test/queries/clientpositive/timestamp_ints_casts.q
+++ ql/src/test/queries/clientpositive/timestamp_ints_casts.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.int.timestamp.conversion.in.seconds=false;
 
 explain
diff --git ql/src/test/queries/clientpositive/timestamp_lazy.q ql/src/test/queries/clientpositive/timestamp_lazy.q
index e72d82e0cc..15ab3ec3ee 100644
--- ql/src/test/queries/clientpositive/timestamp_lazy.q
+++ ql/src/test/queries/clientpositive/timestamp_lazy.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table timestamp_lazy;
 create table timestamp_lazy (t timestamp, key string, value string);
diff --git ql/src/test/queries/clientpositive/timestamp_udf.q ql/src/test/queries/clientpositive/timestamp_udf.q
index ade9fb408c..cb38be6fd2 100644
--- ql/src/test/queries/clientpositive/timestamp_udf.q
+++ ql/src/test/queries/clientpositive/timestamp_udf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 drop table timestamp_udf;
diff --git ql/src/test/queries/clientpositive/touch.q ql/src/test/queries/clientpositive/touch.q
index 6686b68eae..8711b7775c 100644
--- ql/src/test/queries/clientpositive/touch.q
+++ ql/src/test/queries/clientpositive/touch.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 create database tc;
 
 create table tc.tstsrc like default.src;
diff --git ql/src/test/queries/clientpositive/transform1.q ql/src/test/queries/clientpositive/transform1.q
index f2d23b9a36..bb20cbbad3 100644
--- ql/src/test/queries/clientpositive/transform1.q
+++ ql/src/test/queries/clientpositive/transform1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.entity.capture.transform=true;
 
diff --git ql/src/test/queries/clientpositive/transform2.q ql/src/test/queries/clientpositive/transform2.q
index ddbc567596..3188ab02be 100644
--- ql/src/test/queries/clientpositive/transform2.q
+++ ql/src/test/queries/clientpositive/transform2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 -- Transform with a function that has many parameters
 SELECT TRANSFORM(substr(key, 1, 2)) USING 'cat' FROM src LIMIT 1;
diff --git ql/src/test/queries/clientpositive/transform_acid.q ql/src/test/queries/clientpositive/transform_acid.q
index c890ef8e41..c55ed43b38 100644
--- ql/src/test/queries/clientpositive/transform_acid.q
+++ ql/src/test/queries/clientpositive/transform_acid.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.entity.capture.transform=true;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/transform_ppr1.q ql/src/test/queries/clientpositive/transform_ppr1.q
index 5d0a48ba58..dc7884bff5 100644
--- ql/src/test/queries/clientpositive/transform_ppr1.q
+++ ql/src/test/queries/clientpositive/transform_ppr1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.optimize.ppd=true;
 set hive.entity.capture.transform=true;
diff --git ql/src/test/queries/clientpositive/transform_ppr2.q ql/src/test/queries/clientpositive/transform_ppr2.q
index 6dbaca1c82..51d154ac0b 100644
--- ql/src/test/queries/clientpositive/transform_ppr2.q
+++ ql/src/test/queries/clientpositive/transform_ppr2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.optimize.ppd=true;
 set hive.entity.capture.transform=true;
 
diff --git ql/src/test/queries/clientpositive/truncate_column.q ql/src/test/queries/clientpositive/truncate_column.q
index 4cfa180a1e..1e29b55001 100644
--- ql/src/test/queries/clientpositive/truncate_column.q
+++ ql/src/test/queries/clientpositive/truncate_column.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 -- Tests truncating column(s) from a table, also tests that stats are updated
 
diff --git ql/src/test/queries/clientpositive/truncate_column_buckets.q ql/src/test/queries/clientpositive/truncate_column_buckets.q
index c51a98f081..241bd25270 100644
--- ql/src/test/queries/clientpositive/truncate_column_buckets.q
+++ ql/src/test/queries/clientpositive/truncate_column_buckets.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- Tests truncating columns from a bucketed table, table should remain bucketed
 
diff --git ql/src/test/queries/clientpositive/truncate_column_list_bucket.q ql/src/test/queries/clientpositive/truncate_column_list_bucket.q
index 476120a449..44f580652f 100644
--- ql/src/test/queries/clientpositive/truncate_column_list_bucket.q
+++ ql/src/test/queries/clientpositive/truncate_column_list_bucket.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 set hive.merge.mapfiles=false;	
diff --git ql/src/test/queries/clientpositive/truncate_column_merge.q ql/src/test/queries/clientpositive/truncate_column_merge.q
index c11b7f62be..fb309b5728 100644
--- ql/src/test/queries/clientpositive/truncate_column_merge.q
+++ ql/src/test/queries/clientpositive/truncate_column_merge.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- Tests truncating a column from a table with multiple files, then merging those files
 
diff --git ql/src/test/queries/clientpositive/type_cast_1.q ql/src/test/queries/clientpositive/type_cast_1.q
index 4d1d978f82..5c4bf54652 100644
--- ql/src/test/queries/clientpositive/type_cast_1.q
+++ ql/src/test/queries/clientpositive/type_cast_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/type_conversions_1.q ql/src/test/queries/clientpositive/type_conversions_1.q
index 4c4a828fe0..7d138c9de8 100644
--- ql/src/test/queries/clientpositive/type_conversions_1.q
+++ ql/src/test/queries/clientpositive/type_conversions_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- casting from null should yield null
diff --git ql/src/test/queries/clientpositive/type_widening.q ql/src/test/queries/clientpositive/type_widening.q
index ab4720cfab..dba7be54b7 100644
--- ql/src/test/queries/clientpositive/type_widening.q
+++ ql/src/test/queries/clientpositive/type_widening.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=more;
 -- Check for int, bigint automatic type widening conversions in UDFs, UNIONS
diff --git ql/src/test/queries/clientpositive/udaf_all_keyword.q ql/src/test/queries/clientpositive/udaf_all_keyword.q
index e542621926..7aef21a9dc 100644
--- ql/src/test/queries/clientpositive/udaf_all_keyword.q
+++ ql/src/test/queries/clientpositive/udaf_all_keyword.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- following tests are to test ALL quantifier (HIVE-16064)
 
 -- count
diff --git ql/src/test/queries/clientpositive/udaf_collect_set.q ql/src/test/queries/clientpositive/udaf_collect_set.q
index 04bea32101..f9de904f19 100644
--- ql/src/test/queries/clientpositive/udaf_collect_set.q
+++ ql/src/test/queries/clientpositive/udaf_collect_set.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DESCRIBE FUNCTION collect_set;
 DESCRIBE FUNCTION EXTENDED collect_set;
 
diff --git ql/src/test/queries/clientpositive/udaf_histogram_numeric.q ql/src/test/queries/clientpositive/udaf_histogram_numeric.q
index 18bcd1c070..c1f67fdf55 100644
--- ql/src/test/queries/clientpositive/udaf_histogram_numeric.q
+++ ql/src/test/queries/clientpositive/udaf_histogram_numeric.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 SELECT histogram_numeric(cast(substr(src.value,5) AS double), 2) FROM src;
 SELECT histogram_numeric(cast(substr(src.value,5) AS double), 3) FROM src;
diff --git ql/src/test/queries/clientpositive/udaf_number_format.q ql/src/test/queries/clientpositive/udaf_number_format.q
index 4f2ab453dc..a8613aa342 100644
--- ql/src/test/queries/clientpositive/udaf_number_format.q
+++ ql/src/test/queries/clientpositive/udaf_number_format.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 EXPLAIN SELECT
   sum('a'),
diff --git ql/src/test/queries/clientpositive/udaf_percentile.q ql/src/test/queries/clientpositive/udaf_percentile.q
index 8ebf01dcec..7a5a379a43 100644
--- ql/src/test/queries/clientpositive/udaf_percentile.q
+++ ql/src/test/queries/clientpositive/udaf_percentile.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 select percentile(cast(key as bigint), 0.3) from src;
diff --git ql/src/test/queries/clientpositive/udaf_sum_list.q ql/src/test/queries/clientpositive/udaf_sum_list.q
index 0d86a42128..7156b62b57 100644
--- ql/src/test/queries/clientpositive/udaf_sum_list.q
+++ ql/src/test/queries/clientpositive/udaf_sum_list.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- HIVE-5279
 -- GenericUDAFSumList has Converter which does not have default constructor
 -- After
diff --git ql/src/test/queries/clientpositive/udf1.q ql/src/test/queries/clientpositive/udf1.q
index 9df913d8aa..b054eb3147 100644
--- ql/src/test/queries/clientpositive/udf1.q
+++ ql/src/test/queries/clientpositive/udf1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(c1 STRING, c2 STRING, c3 STRING, c4 STRING,
   c5 STRING, c6 STRING, c7 STRING, c8 STRING,
diff --git ql/src/test/queries/clientpositive/udf2.q ql/src/test/queries/clientpositive/udf2.q
index 5aa99e85d1..aef771745d 100644
--- ql/src/test/queries/clientpositive/udf2.q
+++ ql/src/test/queries/clientpositive/udf2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(c1 STRING) STORED AS TEXTFILE;
 
 FROM src INSERT OVERWRITE TABLE dest1 SELECT '  abc  ' WHERE src.key = 86;
diff --git ql/src/test/queries/clientpositive/udf3.q ql/src/test/queries/clientpositive/udf3.q
index 4e0d339242..730aca199b 100644
--- ql/src/test/queries/clientpositive/udf3.q
+++ ql/src/test/queries/clientpositive/udf3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(c1 STRING, c2 STRING, c3 STRING, c4 STRING, c5 STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/udf4.q ql/src/test/queries/clientpositive/udf4.q
index 16f5b2cce2..164f858cdc 100644
--- ql/src/test/queries/clientpositive/udf4.q
+++ ql/src/test/queries/clientpositive/udf4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(c1 STRING) STORED AS TEXTFILE;
 
 FROM src INSERT OVERWRITE TABLE dest1 SELECT '  abc  ' WHERE src.key = 86;
diff --git ql/src/test/queries/clientpositive/udf5.q ql/src/test/queries/clientpositive/udf5.q
index 782e23dbfa..1a46ca7062 100644
--- ql/src/test/queries/clientpositive/udf5.q
+++ ql/src/test/queries/clientpositive/udf5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(c1 STRING) STORED AS TEXTFILE;
 
 FROM src INSERT OVERWRITE TABLE dest1 SELECT '  abc  ' WHERE src.key = 86;
diff --git ql/src/test/queries/clientpositive/udf6.q ql/src/test/queries/clientpositive/udf6.q
index fd540d610a..9f7afec1db 100644
--- ql/src/test/queries/clientpositive/udf6.q
+++ ql/src/test/queries/clientpositive/udf6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(c1 STRING) STORED AS TEXTFILE;
 
 FROM src INSERT OVERWRITE TABLE dest1 SELECT '  abc  ' WHERE src.key = 86;
diff --git ql/src/test/queries/clientpositive/udf7.q ql/src/test/queries/clientpositive/udf7.q
index d12394e2e7..c9724e581d 100644
--- ql/src/test/queries/clientpositive/udf7.q
+++ ql/src/test/queries/clientpositive/udf7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(c1 STRING) STORED AS TEXTFILE;
 
 FROM src INSERT OVERWRITE TABLE dest1 SELECT '  abc  ' WHERE src.key = 86;
diff --git ql/src/test/queries/clientpositive/udf8.q ql/src/test/queries/clientpositive/udf8.q
index a9e696369a..dad92db955 100644
--- ql/src/test/queries/clientpositive/udf8.q
+++ ql/src/test/queries/clientpositive/udf8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(c1 STRING) STORED AS TEXTFILE;
 
 FROM src INSERT OVERWRITE TABLE dest1 SELECT '' WHERE src.key = 86;
diff --git ql/src/test/queries/clientpositive/udf9.q ql/src/test/queries/clientpositive/udf9.q
index 6e76f527bb..f37e0c3933 100644
--- ql/src/test/queries/clientpositive/udf9.q
+++ ql/src/test/queries/clientpositive/udf9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 EXPLAIN
 SELECT DATEDIFF('2008-12-31', '2009-01-01'), DATEDIFF('2008-03-01', '2008-02-28'),
diff --git ql/src/test/queries/clientpositive/udf_10_trims.q ql/src/test/queries/clientpositive/udf_10_trims.q
index 92488fa3ab..bae9c06e5e 100644
--- ql/src/test/queries/clientpositive/udf_10_trims.q
+++ ql/src/test/queries/clientpositive/udf_10_trims.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE dest1(c1 STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/udf_E.q ql/src/test/queries/clientpositive/udf_E.q
index 41bdec0827..dd1fc37acb 100644
--- ql/src/test/queries/clientpositive/udf_E.q
+++ ql/src/test/queries/clientpositive/udf_E.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 explain
diff --git ql/src/test/queries/clientpositive/udf_PI.q ql/src/test/queries/clientpositive/udf_PI.q
index 945483ecbf..5735b211e5 100644
--- ql/src/test/queries/clientpositive/udf_PI.q
+++ ql/src/test/queries/clientpositive/udf_PI.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 explain
diff --git ql/src/test/queries/clientpositive/udf_abs.q ql/src/test/queries/clientpositive/udf_abs.q
index 0c06a5b6cd..c7832ea638 100644
--- ql/src/test/queries/clientpositive/udf_abs.q
+++ ql/src/test/queries/clientpositive/udf_abs.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION abs;
diff --git ql/src/test/queries/clientpositive/udf_acos.q ql/src/test/queries/clientpositive/udf_acos.q
index f9adc16931..d5ffa01d22 100644
--- ql/src/test/queries/clientpositive/udf_acos.q
+++ ql/src/test/queries/clientpositive/udf_acos.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION acos;
diff --git ql/src/test/queries/clientpositive/udf_array.q ql/src/test/queries/clientpositive/udf_array.q
index 5a6a1830b1..3d1dc65ecc 100644
--- ql/src/test/queries/clientpositive/udf_array.q
+++ ql/src/test/queries/clientpositive/udf_array.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION array;
diff --git ql/src/test/queries/clientpositive/udf_array_contains.q ql/src/test/queries/clientpositive/udf_array_contains.q
index d2dad64406..a7396d0b47 100644
--- ql/src/test/queries/clientpositive/udf_array_contains.q
+++ ql/src/test/queries/clientpositive/udf_array_contains.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION array_contains;
diff --git ql/src/test/queries/clientpositive/udf_ascii.q ql/src/test/queries/clientpositive/udf_ascii.q
index 3d885a2563..04fa0084ec 100644
--- ql/src/test/queries/clientpositive/udf_ascii.q
+++ ql/src/test/queries/clientpositive/udf_ascii.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION ascii;
diff --git ql/src/test/queries/clientpositive/udf_asin.q ql/src/test/queries/clientpositive/udf_asin.q
index 73b77d10f0..54b85b769d 100644
--- ql/src/test/queries/clientpositive/udf_asin.q
+++ ql/src/test/queries/clientpositive/udf_asin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION asin;
diff --git ql/src/test/queries/clientpositive/udf_atan.q ql/src/test/queries/clientpositive/udf_atan.q
index 090438cb0f..4098049e37 100644
--- ql/src/test/queries/clientpositive/udf_atan.q
+++ ql/src/test/queries/clientpositive/udf_atan.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION atan;
diff --git ql/src/test/queries/clientpositive/udf_between.q ql/src/test/queries/clientpositive/udf_between.q
index cba8d3106b..9ee33520b9 100644
--- ql/src/test/queries/clientpositive/udf_between.q
+++ ql/src/test/queries/clientpositive/udf_between.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=more;
 
diff --git ql/src/test/queries/clientpositive/udf_bin.q ql/src/test/queries/clientpositive/udf_bin.q
index c5a7ac1a60..a84a351b4b 100644
--- ql/src/test/queries/clientpositive/udf_bin.q
+++ ql/src/test/queries/clientpositive/udf_bin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION bin;
diff --git ql/src/test/queries/clientpositive/udf_case.q ql/src/test/queries/clientpositive/udf_case.q
index 43573bfb12..28d87a8545 100644
--- ql/src/test/queries/clientpositive/udf_case.q
+++ ql/src/test/queries/clientpositive/udf_case.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION case;
diff --git ql/src/test/queries/clientpositive/udf_case_column_pruning.q ql/src/test/queries/clientpositive/udf_case_column_pruning.q
index d6c9e9de7a..cf53ac2a92 100644
--- ql/src/test/queries/clientpositive/udf_case_column_pruning.q
+++ ql/src/test/queries/clientpositive/udf_case_column_pruning.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 EXPLAIN
 SELECT CASE a.key
diff --git ql/src/test/queries/clientpositive/udf_case_thrift.q ql/src/test/queries/clientpositive/udf_case_thrift.q
index 2aa76f1f1d..208384a07d 100644
--- ql/src/test/queries/clientpositive/udf_case_thrift.q
+++ ql/src/test/queries/clientpositive/udf_case_thrift.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 set hive.fetch.task.conversion=more;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/udf_character_length.q ql/src/test/queries/clientpositive/udf_character_length.q
index 1312334575..fe0c1ba9f2 100644
--- ql/src/test/queries/clientpositive/udf_character_length.q
+++ ql/src/test/queries/clientpositive/udf_character_length.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 SET hive.vectorized.execution.enabled=false;
 set hive.fetch.task.conversion=more;
 
diff --git ql/src/test/queries/clientpositive/udf_classloader.q ql/src/test/queries/clientpositive/udf_classloader.q
index 82678c21bf..00ad858163 100644
--- ql/src/test/queries/clientpositive/udf_classloader.q
+++ ql/src/test/queries/clientpositive/udf_classloader.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 ADD JAR ${system:maven.local.repository}/org/apache/hive/hive-it-custom-udfs/udf-classloader-udf1/${system:hive.version}/udf-classloader-udf1-${system:hive.version}.jar;
 ADD JAR ${system:maven.local.repository}/org/apache/hive/hive-it-custom-udfs/udf-classloader-util/${system:hive.version}/udf-classloader-util-${system:hive.version}.jar;
 ADD JAR ${system:maven.local.repository}/org/apache/hive/hive-it-custom-udfs/udf-classloader-udf2/${system:hive.version}/udf-classloader-udf2-${system:hive.version}.jar;
diff --git ql/src/test/queries/clientpositive/udf_classloader_dynamic_dependency_resolution.q ql/src/test/queries/clientpositive/udf_classloader_dynamic_dependency_resolution.q
index 2ceeaa32f3..19772fc06c 100644
--- ql/src/test/queries/clientpositive/udf_classloader_dynamic_dependency_resolution.q
+++ ql/src/test/queries/clientpositive/udf_classloader_dynamic_dependency_resolution.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 ADD JAR ivy://org.apache.hive.hive-it-custom-udfs:udf-classloader-udf1:+;
 ADD JAR ivy://org.apache.hive.hive-it-custom-udfs:udf-classloader-util:+;
 ADD JAR ivy://org.apache.hive.hive-it-custom-udfs:udf-classloader-udf2:+;
diff --git ql/src/test/queries/clientpositive/udf_coalesce.q ql/src/test/queries/clientpositive/udf_coalesce.q
index d3c417babd..7248efe3a1 100644
--- ql/src/test/queries/clientpositive/udf_coalesce.q
+++ ql/src/test/queries/clientpositive/udf_coalesce.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src_thrift
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION coalesce;
diff --git ql/src/test/queries/clientpositive/udf_compare_java_string.q ql/src/test/queries/clientpositive/udf_compare_java_string.q
index c7983b8eb2..320296c985 100644
--- ql/src/test/queries/clientpositive/udf_compare_java_string.q
+++ ql/src/test/queries/clientpositive/udf_compare_java_string.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/udf_concat.q ql/src/test/queries/clientpositive/udf_concat.q
index e35a1cfa17..ea0a90733e 100644
--- ql/src/test/queries/clientpositive/udf_concat.q
+++ ql/src/test/queries/clientpositive/udf_concat.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION concat;
diff --git ql/src/test/queries/clientpositive/udf_concat_insert1.q ql/src/test/queries/clientpositive/udf_concat_insert1.q
index 496f40372d..dd639cb9ac 100644
--- ql/src/test/queries/clientpositive/udf_concat_insert1.q
+++ ql/src/test/queries/clientpositive/udf_concat_insert1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
 
 FROM src
diff --git ql/src/test/queries/clientpositive/udf_concat_insert2.q ql/src/test/queries/clientpositive/udf_concat_insert2.q
index 6d1353feac..c85bd44c82 100644
--- ql/src/test/queries/clientpositive/udf_concat_insert2.q
+++ ql/src/test/queries/clientpositive/udf_concat_insert2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE dest1(key STRING, value STRING) STORED AS TEXTFILE;
 
 FROM src
diff --git ql/src/test/queries/clientpositive/udf_concat_ws.q ql/src/test/queries/clientpositive/udf_concat_ws.q
index 538dfae06f..136ad58443 100644
--- ql/src/test/queries/clientpositive/udf_concat_ws.q
+++ ql/src/test/queries/clientpositive/udf_concat_ws.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION concat_ws;
diff --git ql/src/test/queries/clientpositive/udf_context_aware.q ql/src/test/queries/clientpositive/udf_context_aware.q
index 04cb512f4a..a717a9d88b 100644
--- ql/src/test/queries/clientpositive/udf_context_aware.q
+++ ql/src/test/queries/clientpositive/udf_context_aware.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create temporary function counter as 'org.apache.hadoop.hive.ql.udf.generic.DummyContextUDF';
 
 set hive.input.format = org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat;
diff --git ql/src/test/queries/clientpositive/udf_conv.q ql/src/test/queries/clientpositive/udf_conv.q
index c6d6cf8600..ac77a5daf6 100644
--- ql/src/test/queries/clientpositive/udf_conv.q
+++ ql/src/test/queries/clientpositive/udf_conv.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION conv;
diff --git ql/src/test/queries/clientpositive/udf_cos.q ql/src/test/queries/clientpositive/udf_cos.q
index 11ef8d7d87..e2935ef969 100644
--- ql/src/test/queries/clientpositive/udf_cos.q
+++ ql/src/test/queries/clientpositive/udf_cos.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION cos;
diff --git ql/src/test/queries/clientpositive/udf_count.q ql/src/test/queries/clientpositive/udf_count.q
index 022d7a9f8d..782d90ec3c 100644
--- ql/src/test/queries/clientpositive/udf_count.q
+++ ql/src/test/queries/clientpositive/udf_count.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DESCRIBE FUNCTION count;
 DESCRIBE FUNCTION EXTENDED count;
 
diff --git ql/src/test/queries/clientpositive/udf_current_user.q ql/src/test/queries/clientpositive/udf_current_user.q
index f86ff10fa8..4f9701449e 100644
--- ql/src/test/queries/clientpositive/udf_current_user.q
+++ ql/src/test/queries/clientpositive/udf_current_user.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DESCRIBE FUNCTION current_user;
 DESCRIBE FUNCTION EXTENDED current_user;
 
diff --git ql/src/test/queries/clientpositive/udf_degrees.q ql/src/test/queries/clientpositive/udf_degrees.q
index d5360fe3b2..2de2ca645e 100644
--- ql/src/test/queries/clientpositive/udf_degrees.q
+++ ql/src/test/queries/clientpositive/udf_degrees.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 explain
diff --git ql/src/test/queries/clientpositive/udf_div.q ql/src/test/queries/clientpositive/udf_div.q
index b0d2844d42..51ce500087 100644
--- ql/src/test/queries/clientpositive/udf_div.q
+++ ql/src/test/queries/clientpositive/udf_div.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION div;
diff --git ql/src/test/queries/clientpositive/udf_divide.q ql/src/test/queries/clientpositive/udf_divide.q
index d36ba99118..ab9dab28dd 100644
--- ql/src/test/queries/clientpositive/udf_divide.q
+++ ql/src/test/queries/clientpositive/udf_divide.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION /;
diff --git ql/src/test/queries/clientpositive/udf_elt.q ql/src/test/queries/clientpositive/udf_elt.q
index fae764965a..681f2cf2a1 100644
--- ql/src/test/queries/clientpositive/udf_elt.q
+++ ql/src/test/queries/clientpositive/udf_elt.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION elt;
diff --git ql/src/test/queries/clientpositive/udf_equal.q ql/src/test/queries/clientpositive/udf_equal.q
index ea9b18bf1f..c9a846ca00 100644
--- ql/src/test/queries/clientpositive/udf_equal.q
+++ ql/src/test/queries/clientpositive/udf_equal.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION =;
diff --git ql/src/test/queries/clientpositive/udf_example_add.q ql/src/test/queries/clientpositive/udf_example_add.q
index fb7b5c912b..e09993555b 100644
--- ql/src/test/queries/clientpositive/udf_example_add.q
+++ ql/src/test/queries/clientpositive/udf_example_add.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 add jar ${system:maven.local.repository}/org/apache/hive/hive-contrib/${system:hive.version}/hive-contrib-${system:hive.version}.jar;
 
 CREATE TEMPORARY FUNCTION example_add AS 'org.apache.hadoop.hive.contrib.udf.example.UDFExampleAdd';
diff --git ql/src/test/queries/clientpositive/udf_explode.q ql/src/test/queries/clientpositive/udf_explode.q
index ae651644a7..ec3f6daca4 100644
--- ql/src/test/queries/clientpositive/udf_explode.q
+++ ql/src/test/queries/clientpositive/udf_explode.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION explode;
diff --git ql/src/test/queries/clientpositive/udf_field.q ql/src/test/queries/clientpositive/udf_field.q
index be92c024d3..82b335e1b8 100644
--- ql/src/test/queries/clientpositive/udf_field.q
+++ ql/src/test/queries/clientpositive/udf_field.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION field;
diff --git ql/src/test/queries/clientpositive/udf_find_in_set.q ql/src/test/queries/clientpositive/udf_find_in_set.q
index 72c65b4198..f002960a4d 100644
--- ql/src/test/queries/clientpositive/udf_find_in_set.q
+++ ql/src/test/queries/clientpositive/udf_find_in_set.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION find_in_set;
diff --git ql/src/test/queries/clientpositive/udf_format_number.q ql/src/test/queries/clientpositive/udf_format_number.q
index 0d60c93bea..1f2bbb34eb 100644
--- ql/src/test/queries/clientpositive/udf_format_number.q
+++ ql/src/test/queries/clientpositive/udf_format_number.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 use default;
diff --git ql/src/test/queries/clientpositive/udf_get_json_object.q ql/src/test/queries/clientpositive/udf_get_json_object.q
index 50a573fe75..407ce50975 100644
--- ql/src/test/queries/clientpositive/udf_get_json_object.q
+++ ql/src/test/queries/clientpositive/udf_get_json_object.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src_json
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION get_json_object;
diff --git ql/src/test/queries/clientpositive/udf_greaterthan.q ql/src/test/queries/clientpositive/udf_greaterthan.q
index 230bd244ff..c0e5709714 100644
--- ql/src/test/queries/clientpositive/udf_greaterthan.q
+++ ql/src/test/queries/clientpositive/udf_greaterthan.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION >;
diff --git ql/src/test/queries/clientpositive/udf_greaterthanorequal.q ql/src/test/queries/clientpositive/udf_greaterthanorequal.q
index 025eed7dd5..4df2756dbf 100644
--- ql/src/test/queries/clientpositive/udf_greaterthanorequal.q
+++ ql/src/test/queries/clientpositive/udf_greaterthanorequal.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION >=;
diff --git ql/src/test/queries/clientpositive/udf_greatest.q ql/src/test/queries/clientpositive/udf_greatest.q
index 03c01b5239..2bac06d8f2 100644
--- ql/src/test/queries/clientpositive/udf_greatest.q
+++ ql/src/test/queries/clientpositive/udf_greatest.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION greatest;
diff --git ql/src/test/queries/clientpositive/udf_hash.q ql/src/test/queries/clientpositive/udf_hash.q
index 5814a1779b..b9bfbcda89 100644
--- ql/src/test/queries/clientpositive/udf_hash.q
+++ ql/src/test/queries/clientpositive/udf_hash.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION hash;
diff --git ql/src/test/queries/clientpositive/udf_hex.q ql/src/test/queries/clientpositive/udf_hex.q
index 0e5457965a..9c4b5d4e49 100644
--- ql/src/test/queries/clientpositive/udf_hex.q
+++ ql/src/test/queries/clientpositive/udf_hex.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION hex;
diff --git ql/src/test/queries/clientpositive/udf_hour.q ql/src/test/queries/clientpositive/udf_hour.q
index 43d23c7c0e..ee914f4ca9 100644
--- ql/src/test/queries/clientpositive/udf_hour.q
+++ ql/src/test/queries/clientpositive/udf_hour.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=more;
 
diff --git ql/src/test/queries/clientpositive/udf_if.q ql/src/test/queries/clientpositive/udf_if.q
index d9285ff7ce..2b85fe07ef 100644
--- ql/src/test/queries/clientpositive/udf_if.q
+++ ql/src/test/queries/clientpositive/udf_if.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION if;
diff --git ql/src/test/queries/clientpositive/udf_in.q ql/src/test/queries/clientpositive/udf_in.q
index f54d963afd..99fafd44bf 100644
--- ql/src/test/queries/clientpositive/udf_in.q
+++ ql/src/test/queries/clientpositive/udf_in.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 SELECT 1 IN (1, 2, 3),
diff --git ql/src/test/queries/clientpositive/udf_inline.q ql/src/test/queries/clientpositive/udf_inline.q
index 95d55f71c1..dcb77c5d8d 100644
--- ql/src/test/queries/clientpositive/udf_inline.q
+++ ql/src/test/queries/clientpositive/udf_inline.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 describe function inline;
diff --git ql/src/test/queries/clientpositive/udf_instr.q ql/src/test/queries/clientpositive/udf_instr.q
index 790a1049d1..a7e837e2a2 100644
--- ql/src/test/queries/clientpositive/udf_instr.q
+++ ql/src/test/queries/clientpositive/udf_instr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION instr;
diff --git ql/src/test/queries/clientpositive/udf_isnull_isnotnull.q ql/src/test/queries/clientpositive/udf_isnull_isnotnull.q
index efb834efdc..9bcb608554 100644
--- ql/src/test/queries/clientpositive/udf_isnull_isnotnull.q
+++ ql/src/test/queries/clientpositive/udf_isnull_isnotnull.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src_thrift
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION isnull;
diff --git ql/src/test/queries/clientpositive/udf_java_method.q ql/src/test/queries/clientpositive/udf_java_method.q
index 8ed2b44c05..4a66fd444a 100644
--- ql/src/test/queries/clientpositive/udf_java_method.q
+++ ql/src/test/queries/clientpositive/udf_java_method.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION java_method;
diff --git ql/src/test/queries/clientpositive/udf_least.q ql/src/test/queries/clientpositive/udf_least.q
index 93d0ee8bca..5b793360bd 100644
--- ql/src/test/queries/clientpositive/udf_least.q
+++ ql/src/test/queries/clientpositive/udf_least.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION least;
diff --git ql/src/test/queries/clientpositive/udf_length.q ql/src/test/queries/clientpositive/udf_length.q
index 4413751ae6..4d9dc020e8 100644
--- ql/src/test/queries/clientpositive/udf_length.q
+++ ql/src/test/queries/clientpositive/udf_length.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION length;
diff --git ql/src/test/queries/clientpositive/udf_lessthan.q ql/src/test/queries/clientpositive/udf_lessthan.q
index 03326777bf..546834c6fc 100644
--- ql/src/test/queries/clientpositive/udf_lessthan.q
+++ ql/src/test/queries/clientpositive/udf_lessthan.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION <;
diff --git ql/src/test/queries/clientpositive/udf_lessthanorequal.q ql/src/test/queries/clientpositive/udf_lessthanorequal.q
index ae7109fb92..97166f1b3a 100644
--- ql/src/test/queries/clientpositive/udf_lessthanorequal.q
+++ ql/src/test/queries/clientpositive/udf_lessthanorequal.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION <=;
diff --git ql/src/test/queries/clientpositive/udf_like.q ql/src/test/queries/clientpositive/udf_like.q
index c70cbdd7f3..d7728e76e7 100644
--- ql/src/test/queries/clientpositive/udf_like.q
+++ ql/src/test/queries/clientpositive/udf_like.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=more;
 
diff --git ql/src/test/queries/clientpositive/udf_likeall.q ql/src/test/queries/clientpositive/udf_likeall.q
index a580ae8531..f8a3736632 100644
--- ql/src/test/queries/clientpositive/udf_likeall.q
+++ ql/src/test/queries/clientpositive/udf_likeall.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SELECT 'abc' like all ('a%','%bc%','%c')
 FROM src WHERE src.key = 86;
 
diff --git ql/src/test/queries/clientpositive/udf_likeany.q ql/src/test/queries/clientpositive/udf_likeany.q
index b3e6dc1780..83d1288415 100644
--- ql/src/test/queries/clientpositive/udf_likeany.q
+++ ql/src/test/queries/clientpositive/udf_likeany.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SELECT 'abc' like any ('a%','%d','%cd%')
 FROM src WHERE src.key = 86;
 
diff --git ql/src/test/queries/clientpositive/udf_locate.q ql/src/test/queries/clientpositive/udf_locate.q
index 68216d597d..c952071753 100644
--- ql/src/test/queries/clientpositive/udf_locate.q
+++ ql/src/test/queries/clientpositive/udf_locate.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION locate;
diff --git ql/src/test/queries/clientpositive/udf_logged_in_user.q ql/src/test/queries/clientpositive/udf_logged_in_user.q
index 4814c72774..c9a6370ecf 100644
--- ql/src/test/queries/clientpositive/udf_logged_in_user.q
+++ ql/src/test/queries/clientpositive/udf_logged_in_user.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DESCRIBE FUNCTION logged_in_user;
 DESCRIBE FUNCTION EXTENDED logged_in_user;
 
diff --git ql/src/test/queries/clientpositive/udf_logic_java_boolean.q ql/src/test/queries/clientpositive/udf_logic_java_boolean.q
index a4aa6bc8e8..125571df4b 100644
--- ql/src/test/queries/clientpositive/udf_logic_java_boolean.q
+++ ql/src/test/queries/clientpositive/udf_logic_java_boolean.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/udf_lower.q ql/src/test/queries/clientpositive/udf_lower.q
index e30fa69b97..ba647e7586 100644
--- ql/src/test/queries/clientpositive/udf_lower.q
+++ ql/src/test/queries/clientpositive/udf_lower.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 DESCRIBE FUNCTION lower;
 DESCRIBE FUNCTION EXTENDED lower;
diff --git ql/src/test/queries/clientpositive/udf_lpad.q ql/src/test/queries/clientpositive/udf_lpad.q
index 937c92a29e..8dbe77e541 100644
--- ql/src/test/queries/clientpositive/udf_lpad.q
+++ ql/src/test/queries/clientpositive/udf_lpad.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION lpad;
diff --git ql/src/test/queries/clientpositive/udf_map.q ql/src/test/queries/clientpositive/udf_map.q
index e1923b9ae0..0f564de0be 100644
--- ql/src/test/queries/clientpositive/udf_map.q
+++ ql/src/test/queries/clientpositive/udf_map.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION map;
diff --git ql/src/test/queries/clientpositive/udf_map_keys.q ql/src/test/queries/clientpositive/udf_map_keys.q
index 78778e73cd..1457d577e2 100644
--- ql/src/test/queries/clientpositive/udf_map_keys.q
+++ ql/src/test/queries/clientpositive/udf_map_keys.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 use default;
diff --git ql/src/test/queries/clientpositive/udf_map_values.q ql/src/test/queries/clientpositive/udf_map_values.q
index 4b55873fb9..cd0b3369f2 100644
--- ql/src/test/queries/clientpositive/udf_map_values.q
+++ ql/src/test/queries/clientpositive/udf_map_values.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 use default;
diff --git ql/src/test/queries/clientpositive/udf_max.q ql/src/test/queries/clientpositive/udf_max.q
index e5faae9e95..92782da166 100644
--- ql/src/test/queries/clientpositive/udf_max.q
+++ ql/src/test/queries/clientpositive/udf_max.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DESCRIBE FUNCTION max;
 DESCRIBE FUNCTION EXTENDED max;
 
diff --git ql/src/test/queries/clientpositive/udf_min.q ql/src/test/queries/clientpositive/udf_min.q
index dd52208b42..347bd82ea6 100644
--- ql/src/test/queries/clientpositive/udf_min.q
+++ ql/src/test/queries/clientpositive/udf_min.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DESCRIBE FUNCTION min;
 DESCRIBE FUNCTION EXTENDED min;
 
diff --git ql/src/test/queries/clientpositive/udf_minute.q ql/src/test/queries/clientpositive/udf_minute.q
index c5d55ee0b1..8c281e0ffd 100644
--- ql/src/test/queries/clientpositive/udf_minute.q
+++ ql/src/test/queries/clientpositive/udf_minute.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 DESCRIBE FUNCTION minute;
 DESCRIBE FUNCTION EXTENDED minute;
diff --git ql/src/test/queries/clientpositive/udf_modulo.q ql/src/test/queries/clientpositive/udf_modulo.q
index 28a9b10880..ab52af0dbc 100644
--- ql/src/test/queries/clientpositive/udf_modulo.q
+++ ql/src/test/queries/clientpositive/udf_modulo.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION mod;
diff --git ql/src/test/queries/clientpositive/udf_months_between.q ql/src/test/queries/clientpositive/udf_months_between.q
index dcc0fc658d..8465e5ea25 100644
--- ql/src/test/queries/clientpositive/udf_months_between.q
+++ ql/src/test/queries/clientpositive/udf_months_between.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 describe function months_between;
 desc function extended months_between;
 
diff --git ql/src/test/queries/clientpositive/udf_named_struct.q ql/src/test/queries/clientpositive/udf_named_struct.q
index ad6fd7a021..193c62c5b8 100644
--- ql/src/test/queries/clientpositive/udf_named_struct.q
+++ ql/src/test/queries/clientpositive/udf_named_struct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION named_struct;
diff --git ql/src/test/queries/clientpositive/udf_negative.q ql/src/test/queries/clientpositive/udf_negative.q
index b038c8cad5..4a6aa0271e 100644
--- ql/src/test/queries/clientpositive/udf_negative.q
+++ ql/src/test/queries/clientpositive/udf_negative.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION negative;
diff --git ql/src/test/queries/clientpositive/udf_next_day.q ql/src/test/queries/clientpositive/udf_next_day.q
index 7f1c1e835d..1034e4984e 100644
--- ql/src/test/queries/clientpositive/udf_next_day.q
+++ ql/src/test/queries/clientpositive/udf_next_day.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION next_day;
diff --git ql/src/test/queries/clientpositive/udf_notequal.q ql/src/test/queries/clientpositive/udf_notequal.q
index 138110f6ed..0d853ceb58 100644
--- ql/src/test/queries/clientpositive/udf_notequal.q
+++ ql/src/test/queries/clientpositive/udf_notequal.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION <>;
diff --git ql/src/test/queries/clientpositive/udf_notop.q ql/src/test/queries/clientpositive/udf_notop.q
index 5cf918c7c4..2a11dfb921 100644
--- ql/src/test/queries/clientpositive/udf_notop.q
+++ ql/src/test/queries/clientpositive/udf_notop.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 SELECT 1 NOT IN (1, 2, 3),
diff --git ql/src/test/queries/clientpositive/udf_nvl.q ql/src/test/queries/clientpositive/udf_nvl.q
index 97162576df..38a24bb85c 100644
--- ql/src/test/queries/clientpositive/udf_nvl.q
+++ ql/src/test/queries/clientpositive/udf_nvl.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION nvl;
diff --git ql/src/test/queries/clientpositive/udf_octet_length.q ql/src/test/queries/clientpositive/udf_octet_length.q
index c221d9360d..62173b65c1 100644
--- ql/src/test/queries/clientpositive/udf_octet_length.q
+++ ql/src/test/queries/clientpositive/udf_octet_length.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 SET hive.vectorized.execution.enabled=false;
 set hive.fetch.task.conversion=more;
 
diff --git ql/src/test/queries/clientpositive/udf_parse_url.q ql/src/test/queries/clientpositive/udf_parse_url.q
index e834fd7551..3c55f9c1f5 100644
--- ql/src/test/queries/clientpositive/udf_parse_url.q
+++ ql/src/test/queries/clientpositive/udf_parse_url.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 DESCRIBE FUNCTION parse_url;
 DESCRIBE FUNCTION EXTENDED parse_url;
diff --git ql/src/test/queries/clientpositive/udf_percentile.q ql/src/test/queries/clientpositive/udf_percentile.q
index 8852116233..091e359e00 100644
--- ql/src/test/queries/clientpositive/udf_percentile.q
+++ ql/src/test/queries/clientpositive/udf_percentile.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DESCRIBE FUNCTION percentile;
 DESCRIBE FUNCTION EXTENDED percentile;
 
diff --git ql/src/test/queries/clientpositive/udf_pmod.q ql/src/test/queries/clientpositive/udf_pmod.q
index d42a2f337e..854c9eb5c4 100644
--- ql/src/test/queries/clientpositive/udf_pmod.q
+++ ql/src/test/queries/clientpositive/udf_pmod.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION pmod;
diff --git ql/src/test/queries/clientpositive/udf_printf.q ql/src/test/queries/clientpositive/udf_printf.q
index 115e4e56f1..eeaa3c6dcd 100644
--- ql/src/test/queries/clientpositive/udf_printf.q
+++ ql/src/test/queries/clientpositive/udf_printf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 use default;
 -- Test printf() UDF
 
diff --git ql/src/test/queries/clientpositive/udf_radians.q ql/src/test/queries/clientpositive/udf_radians.q
index 19242bd757..9532bb3480 100644
--- ql/src/test/queries/clientpositive/udf_radians.q
+++ ql/src/test/queries/clientpositive/udf_radians.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 explain
diff --git ql/src/test/queries/clientpositive/udf_reflect.q ql/src/test/queries/clientpositive/udf_reflect.q
index 7fa9bf1564..c7cdd7f3a8 100644
--- ql/src/test/queries/clientpositive/udf_reflect.q
+++ ql/src/test/queries/clientpositive/udf_reflect.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION reflect;
diff --git ql/src/test/queries/clientpositive/udf_reflect2.q ql/src/test/queries/clientpositive/udf_reflect2.q
index 255dcdb15c..7ebe91436a 100644
--- ql/src/test/queries/clientpositive/udf_reflect2.q
+++ ql/src/test/queries/clientpositive/udf_reflect2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=more;
 
diff --git ql/src/test/queries/clientpositive/udf_regexp.q ql/src/test/queries/clientpositive/udf_regexp.q
index 12b685b32c..1fac76accc 100644
--- ql/src/test/queries/clientpositive/udf_regexp.q
+++ ql/src/test/queries/clientpositive/udf_regexp.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION regexp;
diff --git ql/src/test/queries/clientpositive/udf_repeat.q ql/src/test/queries/clientpositive/udf_repeat.q
index 91474bac2a..8b67deaf97 100644
--- ql/src/test/queries/clientpositive/udf_repeat.q
+++ ql/src/test/queries/clientpositive/udf_repeat.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION repeat;
diff --git ql/src/test/queries/clientpositive/udf_reverse.q ql/src/test/queries/clientpositive/udf_reverse.q
index 89aafe3443..43ee1ed080 100644
--- ql/src/test/queries/clientpositive/udf_reverse.q
+++ ql/src/test/queries/clientpositive/udf_reverse.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 DESCRIBE FUNCTION reverse;
 DESCRIBE FUNCTION EXTENDED reverse;
 
diff --git ql/src/test/queries/clientpositive/udf_round.q ql/src/test/queries/clientpositive/udf_round.q
index 2441ff0302..2f02bb5b4c 100644
--- ql/src/test/queries/clientpositive/udf_round.q
+++ ql/src/test/queries/clientpositive/udf_round.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:lineitem
 set hive.fetch.task.conversion=more;
 DESCRIBE FUNCTION round;
 DESCRIBE FUNCTION EXTENDED round;
diff --git ql/src/test/queries/clientpositive/udf_round_2.q ql/src/test/queries/clientpositive/udf_round_2.q
index 38885a97d4..10f4561e03 100644
--- ql/src/test/queries/clientpositive/udf_round_2.q
+++ ql/src/test/queries/clientpositive/udf_round_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 set hive.stats.column.autogather=false;
 
diff --git ql/src/test/queries/clientpositive/udf_round_2_auto_stats.q ql/src/test/queries/clientpositive/udf_round_2_auto_stats.q
index 2532f81ab5..b2db151330 100644
--- ql/src/test/queries/clientpositive/udf_round_2_auto_stats.q
+++ ql/src/test/queries/clientpositive/udf_round_2_auto_stats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 set hive.stats.column.autogather=true;
 
diff --git ql/src/test/queries/clientpositive/udf_round_3.q ql/src/test/queries/clientpositive/udf_round_3.q
index f042b6f3fa..c3194d4239 100644
--- ql/src/test/queries/clientpositive/udf_round_3.q
+++ ql/src/test/queries/clientpositive/udf_round_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- test for TINYINT
diff --git ql/src/test/queries/clientpositive/udf_rpad.q ql/src/test/queries/clientpositive/udf_rpad.q
index 4ee69e8985..9b4e0e60b2 100644
--- ql/src/test/queries/clientpositive/udf_rpad.q
+++ ql/src/test/queries/clientpositive/udf_rpad.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION rpad;
diff --git ql/src/test/queries/clientpositive/udf_second.q ql/src/test/queries/clientpositive/udf_second.q
index 8cbc2f0d3c..e926227f19 100644
--- ql/src/test/queries/clientpositive/udf_second.q
+++ ql/src/test/queries/clientpositive/udf_second.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=more;
 
diff --git ql/src/test/queries/clientpositive/udf_sentences.q ql/src/test/queries/clientpositive/udf_sentences.q
index 97a3f1844e..2a1de55f1c 100644
--- ql/src/test/queries/clientpositive/udf_sentences.q
+++ ql/src/test/queries/clientpositive/udf_sentences.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 CREATE TABLE sent_tmp (val array<string>);
 CREATE TABLE sent_tmp2 (val string);
diff --git ql/src/test/queries/clientpositive/udf_sign.q ql/src/test/queries/clientpositive/udf_sign.q
index b1602e8a25..07e5c27357 100644
--- ql/src/test/queries/clientpositive/udf_sign.q
+++ ql/src/test/queries/clientpositive/udf_sign.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 explain
diff --git ql/src/test/queries/clientpositive/udf_sin.q ql/src/test/queries/clientpositive/udf_sin.q
index 79745be772..7148cb7745 100644
--- ql/src/test/queries/clientpositive/udf_sin.q
+++ ql/src/test/queries/clientpositive/udf_sin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION sin;
diff --git ql/src/test/queries/clientpositive/udf_size.q ql/src/test/queries/clientpositive/udf_size.q
index f6f76a30e7..58895eee48 100644
--- ql/src/test/queries/clientpositive/udf_size.q
+++ ql/src/test/queries/clientpositive/udf_size.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION size;
diff --git ql/src/test/queries/clientpositive/udf_sort_array.q ql/src/test/queries/clientpositive/udf_sort_array.q
index d53e2c8905..7568fe3308 100644
--- ql/src/test/queries/clientpositive/udf_sort_array.q
+++ ql/src/test/queries/clientpositive/udf_sort_array.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 use default;
diff --git ql/src/test/queries/clientpositive/udf_space.q ql/src/test/queries/clientpositive/udf_space.q
index cc616f784f..28dd58d53b 100644
--- ql/src/test/queries/clientpositive/udf_space.q
+++ ql/src/test/queries/clientpositive/udf_space.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION space;
diff --git ql/src/test/queries/clientpositive/udf_split.q ql/src/test/queries/clientpositive/udf_split.q
index 55919eac74..baec58c6d5 100644
--- ql/src/test/queries/clientpositive/udf_split.q
+++ ql/src/test/queries/clientpositive/udf_split.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION split;
diff --git ql/src/test/queries/clientpositive/udf_struct.q ql/src/test/queries/clientpositive/udf_struct.q
index ee2135b509..175627e212 100644
--- ql/src/test/queries/clientpositive/udf_struct.q
+++ ql/src/test/queries/clientpositive/udf_struct.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION struct;
diff --git ql/src/test/queries/clientpositive/udf_substr.q ql/src/test/queries/clientpositive/udf_substr.q
index 2d04f904bb..1784c27c46 100644
--- ql/src/test/queries/clientpositive/udf_substr.q
+++ ql/src/test/queries/clientpositive/udf_substr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION substr;
diff --git ql/src/test/queries/clientpositive/udf_tan.q ql/src/test/queries/clientpositive/udf_tan.q
index 3980fe83fb..68f5b83b31 100644
--- ql/src/test/queries/clientpositive/udf_tan.q
+++ ql/src/test/queries/clientpositive/udf_tan.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION tan;
diff --git ql/src/test/queries/clientpositive/udf_testlength.q ql/src/test/queries/clientpositive/udf_testlength.q
index c94a52133d..73f0ba7e82 100644
--- ql/src/test/queries/clientpositive/udf_testlength.q
+++ ql/src/test/queries/clientpositive/udf_testlength.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/udf_testlength2.q ql/src/test/queries/clientpositive/udf_testlength2.q
index 27e46c24a8..87fd883c3d 100644
--- ql/src/test/queries/clientpositive/udf_testlength2.q
+++ ql/src/test/queries/clientpositive/udf_testlength2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/udf_to_boolean.q ql/src/test/queries/clientpositive/udf_to_boolean.q
index 1a50d055d5..b0ccd47c0b 100644
--- ql/src/test/queries/clientpositive/udf_to_boolean.q
+++ ql/src/test/queries/clientpositive/udf_to_boolean.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- 'true' cases:
diff --git ql/src/test/queries/clientpositive/udf_to_byte.q ql/src/test/queries/clientpositive/udf_to_byte.q
index aa0a250e46..77811bb143 100644
--- ql/src/test/queries/clientpositive/udf_to_byte.q
+++ ql/src/test/queries/clientpositive/udf_to_byte.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- Conversion of main primitive types to Byte type:
diff --git ql/src/test/queries/clientpositive/udf_to_double.q ql/src/test/queries/clientpositive/udf_to_double.q
index 005ec9d24e..e8b18e4569 100644
--- ql/src/test/queries/clientpositive/udf_to_double.q
+++ ql/src/test/queries/clientpositive/udf_to_double.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- Conversion of main primitive types to Double type:
diff --git ql/src/test/queries/clientpositive/udf_to_float.q ql/src/test/queries/clientpositive/udf_to_float.q
index 95671f15fe..b93b614e44 100644
--- ql/src/test/queries/clientpositive/udf_to_float.q
+++ ql/src/test/queries/clientpositive/udf_to_float.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- Conversion of main primitive types to Float type:
diff --git ql/src/test/queries/clientpositive/udf_to_long.q ql/src/test/queries/clientpositive/udf_to_long.q
index 706411a398..1a72e5313a 100644
--- ql/src/test/queries/clientpositive/udf_to_long.q
+++ ql/src/test/queries/clientpositive/udf_to_long.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- Conversion of main primitive types to Long type:
diff --git ql/src/test/queries/clientpositive/udf_to_short.q ql/src/test/queries/clientpositive/udf_to_short.q
index 5cc4e57c8c..e77da605f1 100644
--- ql/src/test/queries/clientpositive/udf_to_short.q
+++ ql/src/test/queries/clientpositive/udf_to_short.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- Conversion of main primitive types to Short type:
diff --git ql/src/test/queries/clientpositive/udf_to_string.q ql/src/test/queries/clientpositive/udf_to_string.q
index ac4b5242e1..818f80ffa4 100644
--- ql/src/test/queries/clientpositive/udf_to_string.q
+++ ql/src/test/queries/clientpositive/udf_to_string.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- Conversion of main primitive types to String type:
diff --git ql/src/test/queries/clientpositive/udf_to_unix_timestamp.q ql/src/test/queries/clientpositive/udf_to_unix_timestamp.q
index 0a2758edfc..78ecd5684d 100644
--- ql/src/test/queries/clientpositive/udf_to_unix_timestamp.q
+++ ql/src/test/queries/clientpositive/udf_to_unix_timestamp.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION to_unix_timestamp;
diff --git ql/src/test/queries/clientpositive/udf_translate.q ql/src/test/queries/clientpositive/udf_translate.q
index 1f349aac25..42da85c91c 100644
--- ql/src/test/queries/clientpositive/udf_translate.q
+++ ql/src/test/queries/clientpositive/udf_translate.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION translate;
diff --git ql/src/test/queries/clientpositive/udf_trunc_number.q ql/src/test/queries/clientpositive/udf_trunc_number.q
index b3fd9e53aa..9717968ba3 100644
--- ql/src/test/queries/clientpositive/udf_trunc_number.q
+++ ql/src/test/queries/clientpositive/udf_trunc_number.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 EXPLAIN SELECT trunc(1234567891.1234567891,4), trunc(1234567891.1234567891,-4), trunc(1234567891.1234567891,0), trunc(1234567891.1234567891) FROM src tablesample (1 rows);
diff --git ql/src/test/queries/clientpositive/udf_unhex.q ql/src/test/queries/clientpositive/udf_unhex.q
index 257e469ffb..3d49d73c18 100644
--- ql/src/test/queries/clientpositive/udf_unhex.q
+++ ql/src/test/queries/clientpositive/udf_unhex.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION unhex;
diff --git ql/src/test/queries/clientpositive/udf_union.q ql/src/test/queries/clientpositive/udf_union.q
index 3876beb17d..3cd034e588 100644
--- ql/src/test/queries/clientpositive/udf_union.q
+++ ql/src/test/queries/clientpositive/udf_union.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION create_union;
diff --git ql/src/test/queries/clientpositive/udf_using.q ql/src/test/queries/clientpositive/udf_using.q
index 093187ddc3..d5e9206e87 100644
--- ql/src/test/queries/clientpositive/udf_using.q
+++ ql/src/test/queries/clientpositive/udf_using.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 dfs ${system:test.dfs.mkdir} hdfs:///tmp/udf_using;
 
 dfs -copyFromLocal ../../data/files/sales.txt hdfs:///tmp/udf_using/sales.txt;
diff --git ql/src/test/queries/clientpositive/udf_weekofyear.q ql/src/test/queries/clientpositive/udf_weekofyear.q
index abb0a2d7d2..18ab828005 100644
--- ql/src/test/queries/clientpositive/udf_weekofyear.q
+++ ql/src/test/queries/clientpositive/udf_weekofyear.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION weekofyear;
diff --git ql/src/test/queries/clientpositive/udf_when.q ql/src/test/queries/clientpositive/udf_when.q
index 4eb7f6918a..787398610e 100644
--- ql/src/test/queries/clientpositive/udf_when.q
+++ ql/src/test/queries/clientpositive/udf_when.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION when;
diff --git ql/src/test/queries/clientpositive/udf_xpath.q ql/src/test/queries/clientpositive/udf_xpath.q
index 1ad38abcf6..9fe9824310 100644
--- ql/src/test/queries/clientpositive/udf_xpath.q
+++ ql/src/test/queries/clientpositive/udf_xpath.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION xpath ;
diff --git ql/src/test/queries/clientpositive/udf_xpath_boolean.q ql/src/test/queries/clientpositive/udf_xpath_boolean.q
index 6e3ff244b0..73b02737b5 100644
--- ql/src/test/queries/clientpositive/udf_xpath_boolean.q
+++ ql/src/test/queries/clientpositive/udf_xpath_boolean.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION xpath_boolean ;
diff --git ql/src/test/queries/clientpositive/udf_xpath_double.q ql/src/test/queries/clientpositive/udf_xpath_double.q
index 68441762e5..5b6d7b6634 100644
--- ql/src/test/queries/clientpositive/udf_xpath_double.q
+++ ql/src/test/queries/clientpositive/udf_xpath_double.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION xpath_number ;
diff --git ql/src/test/queries/clientpositive/udf_xpath_float.q ql/src/test/queries/clientpositive/udf_xpath_float.q
index 4596a32260..c0a2af6747 100644
--- ql/src/test/queries/clientpositive/udf_xpath_float.q
+++ ql/src/test/queries/clientpositive/udf_xpath_float.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION xpath_float ;
diff --git ql/src/test/queries/clientpositive/udf_xpath_int.q ql/src/test/queries/clientpositive/udf_xpath_int.q
index 9f3898f114..2e6d83e729 100644
--- ql/src/test/queries/clientpositive/udf_xpath_int.q
+++ ql/src/test/queries/clientpositive/udf_xpath_int.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION xpath_int ;
diff --git ql/src/test/queries/clientpositive/udf_xpath_long.q ql/src/test/queries/clientpositive/udf_xpath_long.q
index 3a335937c5..10cd9465d1 100644
--- ql/src/test/queries/clientpositive/udf_xpath_long.q
+++ ql/src/test/queries/clientpositive/udf_xpath_long.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION xpath_long ;
diff --git ql/src/test/queries/clientpositive/udf_xpath_short.q ql/src/test/queries/clientpositive/udf_xpath_short.q
index 073056e72e..2b194bf97b 100644
--- ql/src/test/queries/clientpositive/udf_xpath_short.q
+++ ql/src/test/queries/clientpositive/udf_xpath_short.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION xpath_short ;
diff --git ql/src/test/queries/clientpositive/udf_xpath_string.q ql/src/test/queries/clientpositive/udf_xpath_string.q
index 1f1731c67d..294f1075d4 100644
--- ql/src/test/queries/clientpositive/udf_xpath_string.q
+++ ql/src/test/queries/clientpositive/udf_xpath_string.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 DESCRIBE FUNCTION xpath_string ;
diff --git ql/src/test/queries/clientpositive/udtf_explode.q ql/src/test/queries/clientpositive/udtf_explode.q
index cc69dbea22..5661d6cbbc 100644
--- ql/src/test/queries/clientpositive/udtf_explode.q
+++ ql/src/test/queries/clientpositive/udtf_explode.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.fetch.task.conversion=more;
 
diff --git ql/src/test/queries/clientpositive/udtf_json_tuple.q ql/src/test/queries/clientpositive/udtf_json_tuple.q
index a46905c5f6..f3b55490fe 100644
--- ql/src/test/queries/clientpositive/udtf_json_tuple.q
+++ ql/src/test/queries/clientpositive/udtf_json_tuple.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create table json_t (key string, jstring string);
 
diff --git ql/src/test/queries/clientpositive/udtf_nofetchtask.q ql/src/test/queries/clientpositive/udtf_nofetchtask.q
index f64b12f5c8..b99e443b69 100644
--- ql/src/test/queries/clientpositive/udtf_nofetchtask.q
+++ ql/src/test/queries/clientpositive/udtf_nofetchtask.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create temporary function udtfCount2 as 'org.apache.hadoop.hive.contrib.udtf.example.GenericUDTFCount2';
 
 set hive.fetch.task.conversion=minimal;
diff --git ql/src/test/queries/clientpositive/udtf_parse_url_tuple.q ql/src/test/queries/clientpositive/udtf_parse_url_tuple.q
index 69ee7be9c5..5e672b91dd 100644
--- ql/src/test/queries/clientpositive/udtf_parse_url_tuple.q
+++ ql/src/test/queries/clientpositive/udtf_parse_url_tuple.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create table url_t (key string, fullurl string);
 
diff --git ql/src/test/queries/clientpositive/udtf_stack.q ql/src/test/queries/clientpositive/udtf_stack.q
index 1643ab50fe..ba2b6e354f 100644
--- ql/src/test/queries/clientpositive/udtf_stack.q
+++ ql/src/test/queries/clientpositive/udtf_stack.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DESCRIBE FUNCTION stack;
 
 EXPLAIN SELECT x, y FROM src LATERAL VIEW STACK(2, 'x', array(1), 'z') a AS x, y LIMIT 2;
diff --git ql/src/test/queries/clientpositive/union.q ql/src/test/queries/clientpositive/union.q
index 69e430ff06..3f40a25d49 100644
--- ql/src/test/queries/clientpositive/union.q
+++ ql/src/test/queries/clientpositive/union.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_BEFORE_DIFF
 -- union case: both subqueries are map jobs on same input, followed by filesink
diff --git ql/src/test/queries/clientpositive/union10.q ql/src/test/queries/clientpositive/union10.q
index 7d971befef..e4f1ac75ba 100644
--- ql/src/test/queries/clientpositive/union10.q
+++ ql/src/test/queries/clientpositive/union10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr = true;
 
diff --git ql/src/test/queries/clientpositive/union11.q ql/src/test/queries/clientpositive/union11.q
index ac00ab64df..81548cc6ca 100644
--- ql/src/test/queries/clientpositive/union11.q
+++ ql/src/test/queries/clientpositive/union11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr = true;
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/union12.q ql/src/test/queries/clientpositive/union12.q
index 418ec2d130..dc00ed392e 100644
--- ql/src/test/queries/clientpositive/union12.q
+++ ql/src/test/queries/clientpositive/union12.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcbucket
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr = true;
 
diff --git ql/src/test/queries/clientpositive/union13.q ql/src/test/queries/clientpositive/union13.q
index e4fe2bf415..6b8608ea6b 100644
--- ql/src/test/queries/clientpositive/union13.q
+++ ql/src/test/queries/clientpositive/union13.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_BEFORE_DIFF
 -- union case: both subqueries are a map-only jobs, same input, followed by filesink
diff --git ql/src/test/queries/clientpositive/union14.q ql/src/test/queries/clientpositive/union14.q
index 01a352e9f1..34f73cda63 100644
--- ql/src/test/queries/clientpositive/union14.q
+++ ql/src/test/queries/clientpositive/union14.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr = true;
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/union15.q ql/src/test/queries/clientpositive/union15.q
index 1dea476dab..d2590f8307 100644
--- ql/src/test/queries/clientpositive/union15.q
+++ ql/src/test/queries/clientpositive/union15.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.map.aggr = true;
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/union16.q ql/src/test/queries/clientpositive/union16.q
index bafcba9f10..6f5f29e0e9 100644
--- ql/src/test/queries/clientpositive/union16.q
+++ ql/src/test/queries/clientpositive/union16.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_BEFORE_DIFF
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/union17.q ql/src/test/queries/clientpositive/union17.q
index 2d31f6bbe1..4c3a6c94a2 100644
--- ql/src/test/queries/clientpositive/union17.q
+++ ql/src/test/queries/clientpositive/union17.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE DEST1(key STRING, value STRING) STORED AS TEXTFILE;
 CREATE TABLE DEST2(key STRING, val1 STRING, val2 STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/union18.q ql/src/test/queries/clientpositive/union18.q
index 79827f4762..1640b8af84 100644
--- ql/src/test/queries/clientpositive/union18.q
+++ ql/src/test/queries/clientpositive/union18.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE TABLE DEST1(key STRING, value STRING) STORED AS TEXTFILE;
 CREATE TABLE DEST2(key STRING, val1 STRING, val2 STRING) STORED AS TEXTFILE;
 
diff --git ql/src/test/queries/clientpositive/union19.q ql/src/test/queries/clientpositive/union19.q
index d2f57895f1..e3f5888a54 100644
--- ql/src/test/queries/clientpositive/union19.q
+++ ql/src/test/queries/clientpositive/union19.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE DEST1(key STRING, value STRING) STORED AS TEXTFILE;
diff --git ql/src/test/queries/clientpositive/union2.q ql/src/test/queries/clientpositive/union2.q
index 4884d183ab..e5fb974208 100644
--- ql/src/test/queries/clientpositive/union2.q
+++ ql/src/test/queries/clientpositive/union2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/union20.q ql/src/test/queries/clientpositive/union20.q
index 66f94ad396..26d475031d 100644
--- ql/src/test/queries/clientpositive/union20.q
+++ ql/src/test/queries/clientpositive/union20.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 -- union :map-reduce sub-queries followed by join
diff --git ql/src/test/queries/clientpositive/union21.q ql/src/test/queries/clientpositive/union21.q
index 284669d05c..9a6af349c0 100644
--- ql/src/test/queries/clientpositive/union21.q
+++ ql/src/test/queries/clientpositive/union21.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src_thrift
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 -- union of constants, udf outputs, and columns from text table and thrift table
 
diff --git ql/src/test/queries/clientpositive/union22.q ql/src/test/queries/clientpositive/union22.q
index d6937f765d..5d41351941 100644
--- ql/src/test/queries/clientpositive/union22.q
+++ ql/src/test/queries/clientpositive/union22.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/union23.q ql/src/test/queries/clientpositive/union23.q
index 052f34a92e..5d26175b50 100644
--- ql/src/test/queries/clientpositive/union23.q
+++ ql/src/test/queries/clientpositive/union23.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 explain
 select s.key2, s.value2
diff --git ql/src/test/queries/clientpositive/union24.q ql/src/test/queries/clientpositive/union24.q
index 073ceebf6f..abe825c843 100644
--- ql/src/test/queries/clientpositive/union24.q
+++ ql/src/test/queries/clientpositive/union24.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/union25.q ql/src/test/queries/clientpositive/union25.q
index 5c5687c909..d962af058b 100644
--- ql/src/test/queries/clientpositive/union25.q
+++ ql/src/test/queries/clientpositive/union25.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 create table tmp_srcpart like srcpart;
 
diff --git ql/src/test/queries/clientpositive/union26.q ql/src/test/queries/clientpositive/union26.q
index f0b3cbd594..1a236d6177 100644
--- ql/src/test/queries/clientpositive/union26.q
+++ ql/src/test/queries/clientpositive/union26.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- SORT_QUERY_RESULTS
 
 EXPLAIN
diff --git ql/src/test/queries/clientpositive/union27.q ql/src/test/queries/clientpositive/union27.q
index 19fab8040e..b0445c442d 100644
--- ql/src/test/queries/clientpositive/union27.q
+++ ql/src/test/queries/clientpositive/union27.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 create table jackson_sev_same as select * from src;
diff --git ql/src/test/queries/clientpositive/union28.q ql/src/test/queries/clientpositive/union28.q
index f099c3af54..cf5b99e7fd 100644
--- ql/src/test/queries/clientpositive/union28.q
+++ ql/src/test/queries/clientpositive/union28.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create table union_subq_union(key int, value string);
 
diff --git ql/src/test/queries/clientpositive/union29.q ql/src/test/queries/clientpositive/union29.q
index ea99d4c9f2..1cc29b97d5 100644
--- ql/src/test/queries/clientpositive/union29.q
+++ ql/src/test/queries/clientpositive/union29.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table union_subq_union(key int, value string);
 
 explain
diff --git ql/src/test/queries/clientpositive/union3.q ql/src/test/queries/clientpositive/union3.q
index 35b298bc01..b4e0702f0a 100644
--- ql/src/test/queries/clientpositive/union3.q
+++ ql/src/test/queries/clientpositive/union3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/union30.q ql/src/test/queries/clientpositive/union30.q
index 0072daeee9..925d847e53 100644
--- ql/src/test/queries/clientpositive/union30.q
+++ ql/src/test/queries/clientpositive/union30.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 create table union_subq_union(key int, value string);
 
diff --git ql/src/test/queries/clientpositive/union31.q ql/src/test/queries/clientpositive/union31.q
index caf87d04c8..9523cf3ec4 100644
--- ql/src/test/queries/clientpositive/union31.q
+++ ql/src/test/queries/clientpositive/union31.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 drop table t1;
diff --git ql/src/test/queries/clientpositive/union32.q ql/src/test/queries/clientpositive/union32.q
index 4d9de6a25a..958529c623 100644
--- ql/src/test/queries/clientpositive/union32.q
+++ ql/src/test/queries/clientpositive/union32.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/union33.q ql/src/test/queries/clientpositive/union33.q
index 994060ac37..ad17e000d3 100644
--- ql/src/test/queries/clientpositive/union33.q
+++ ql/src/test/queries/clientpositive/union33.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.groupby.skewindata=true;
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/union34.q ql/src/test/queries/clientpositive/union34.q
index dbefc4086c..492c941afa 100644
--- ql/src/test/queries/clientpositive/union34.q
+++ ql/src/test/queries/clientpositive/union34.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 create table src10_1 (key string, value string);
diff --git ql/src/test/queries/clientpositive/union35.q ql/src/test/queries/clientpositive/union35.q
index c2a311e242..38e9561de6 100644
--- ql/src/test/queries/clientpositive/union35.q
+++ ql/src/test/queries/clientpositive/union35.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 select * from (
      select * from ( select 1 as id , 'foo' as str_1 from src tablesample(5 rows)) f
  union all
diff --git ql/src/test/queries/clientpositive/union36.q ql/src/test/queries/clientpositive/union36.q
index f050e1a5e9..01fe748411 100644
--- ql/src/test/queries/clientpositive/union36.q
+++ ql/src/test/queries/clientpositive/union36.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.cbo.enable=false;
 
diff --git ql/src/test/queries/clientpositive/union4.q ql/src/test/queries/clientpositive/union4.q
index a5eefdef9f..5b92d9f729 100644
--- ql/src/test/queries/clientpositive/union4.q
+++ ql/src/test/queries/clientpositive/union4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.map.aggr = true;
diff --git ql/src/test/queries/clientpositive/union5.q ql/src/test/queries/clientpositive/union5.q
index edfd1caecb..bf56ffbdec 100644
--- ql/src/test/queries/clientpositive/union5.q
+++ ql/src/test/queries/clientpositive/union5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.map.aggr = true;
diff --git ql/src/test/queries/clientpositive/union6.q ql/src/test/queries/clientpositive/union6.q
index 9d18421132..daaf21fb32 100644
--- ql/src/test/queries/clientpositive/union6.q
+++ ql/src/test/queries/clientpositive/union6.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.map.aggr = true;
diff --git ql/src/test/queries/clientpositive/union7.q ql/src/test/queries/clientpositive/union7.q
index 9ecab8eac4..4d3eed54cc 100644
--- ql/src/test/queries/clientpositive/union7.q
+++ ql/src/test/queries/clientpositive/union7.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.map.aggr = true;
diff --git ql/src/test/queries/clientpositive/union8.q ql/src/test/queries/clientpositive/union8.q
index e26cdd9fb2..d8d8a4e0b0 100644
--- ql/src/test/queries/clientpositive/union8.q
+++ ql/src/test/queries/clientpositive/union8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/union9.q ql/src/test/queries/clientpositive/union9.q
index de6490cd81..4f073faa1f 100644
--- ql/src/test/queries/clientpositive/union9.q
+++ ql/src/test/queries/clientpositive/union9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 -- SORT_BEFORE_DIFF
diff --git ql/src/test/queries/clientpositive/unionDistinct_1.q ql/src/test/queries/clientpositive/unionDistinct_1.q
index 4978b563af..16a3eea8cf 100644
--- ql/src/test/queries/clientpositive/unionDistinct_1.q
+++ ql/src/test/queries/clientpositive/unionDistinct_1.q
@@ -1,3 +1,7 @@
+--! qt:dataset:srcpart
+--! qt:dataset:srcbucket
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.llap.execution.mode=auto;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/unionDistinct_2.q ql/src/test/queries/clientpositive/unionDistinct_2.q
index da47d38b7b..374aaed270 100644
--- ql/src/test/queries/clientpositive/unionDistinct_2.q
+++ ql/src/test/queries/clientpositive/unionDistinct_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- SORT_QUERY_RESULTS
 
 CREATE TABLE u1 as select key, value from src order by key limit 5;
diff --git ql/src/test/queries/clientpositive/unionDistinct_3.q ql/src/test/queries/clientpositive/unionDistinct_3.q
index e3cf236928..fad4f4fb69 100644
--- ql/src/test/queries/clientpositive/unionDistinct_3.q
+++ ql/src/test/queries/clientpositive/unionDistinct_3.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src_thrift
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 
diff --git ql/src/test/queries/clientpositive/union_date_trim.q ql/src/test/queries/clientpositive/union_date_trim.q
index 51f5997309..3a2709485a 100644
--- ql/src/test/queries/clientpositive/union_date_trim.q
+++ ql/src/test/queries/clientpositive/union_date_trim.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table if exists testDate;
 create table testDate(id int, dt date);
 insert into table testDate select 1, '2014-04-07' from src where key=100 limit 1;
diff --git ql/src/test/queries/clientpositive/union_fast_stats.q ql/src/test/queries/clientpositive/union_fast_stats.q
index 616af43b9a..d69bef3ac0 100644
--- ql/src/test/queries/clientpositive/union_fast_stats.q
+++ ql/src/test/queries/clientpositive/union_fast_stats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.stats.dbclass=fs;
 set hive.merge.mapfiles=false;
 set hive.merge.mapredfiles=false;
diff --git ql/src/test/queries/clientpositive/union_lateralview.q ql/src/test/queries/clientpositive/union_lateralview.q
index 012296d7c3..68b6f380af 100644
--- ql/src/test/queries/clientpositive/union_lateralview.q
+++ ql/src/test/queries/clientpositive/union_lateralview.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 
 create table test_union_lateral_view(key int, arr_ele int, value string);
 
diff --git ql/src/test/queries/clientpositive/union_null.q ql/src/test/queries/clientpositive/union_null.q
index aacf3103dc..49a0e0818b 100644
--- ql/src/test/queries/clientpositive/union_null.q
+++ ql/src/test/queries/clientpositive/union_null.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 -- SORT_BEFORE_DIFF
 
 -- HIVE-2901
diff --git ql/src/test/queries/clientpositive/union_paren.q ql/src/test/queries/clientpositive/union_paren.q
index 0b38b6801d..f655a87d21 100644
--- ql/src/test/queries/clientpositive/union_paren.q
+++ ql/src/test/queries/clientpositive/union_paren.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 explain select * from src union all select * from src;
diff --git ql/src/test/queries/clientpositive/union_pos_alias.q ql/src/test/queries/clientpositive/union_pos_alias.q
index 60fea8fd32..e924d5d4e4 100644
--- ql/src/test/queries/clientpositive/union_pos_alias.q
+++ ql/src/test/queries/clientpositive/union_pos_alias.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 
diff --git ql/src/test/queries/clientpositive/union_ppr.q ql/src/test/queries/clientpositive/union_ppr.q
index 013e147b58..09f6b97870 100644
--- ql/src/test/queries/clientpositive/union_ppr.q
+++ ql/src/test/queries/clientpositive/union_ppr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- SORT_QUERY_RESULTS
 
 EXPLAIN EXTENDED
diff --git ql/src/test/queries/clientpositive/union_remove_25.q ql/src/test/queries/clientpositive/union_remove_25.q
index 78fa9aa6cb..0460eb38e8 100644
--- ql/src/test/queries/clientpositive/union_remove_25.q
+++ ql/src/test/queries/clientpositive/union_remove_25.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.mapred.mode=nonstrict;
 set hive.stats.autogather=false;
 set hive.optimize.union.remove=true;
diff --git ql/src/test/queries/clientpositive/union_remove_6_subq.q ql/src/test/queries/clientpositive/union_remove_6_subq.q
index 3607a52139..2dd47167bf 100644
--- ql/src/test/queries/clientpositive/union_remove_6_subq.q
+++ ql/src/test/queries/clientpositive/union_remove_6_subq.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.stats.autogather=false;
 set hive.optimize.union.remove=true;
diff --git ql/src/test/queries/clientpositive/union_script.q ql/src/test/queries/clientpositive/union_script.q
index e5b160f66f..7b563d3793 100644
--- ql/src/test/queries/clientpositive/union_script.q
+++ ql/src/test/queries/clientpositive/union_script.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 select * from (
diff --git ql/src/test/queries/clientpositive/union_stats.q ql/src/test/queries/clientpositive/union_stats.q
index 789b360d4f..0e91c23fea 100644
--- ql/src/test/queries/clientpositive/union_stats.q
+++ ql/src/test/queries/clientpositive/union_stats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 explain extended create table t as select * from src union all select * from src;
 
 create table t as select * from src union all select * from src;
diff --git ql/src/test/queries/clientpositive/union_top_level.q ql/src/test/queries/clientpositive/union_top_level.q
index 2050442b2e..cdb1628537 100644
--- ql/src/test/queries/clientpositive/union_top_level.q
+++ ql/src/test/queries/clientpositive/union_top_level.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/union_view.q ql/src/test/queries/clientpositive/union_view.q
index 74e77a8ac0..11682da541 100644
--- ql/src/test/queries/clientpositive/union_view.q
+++ ql/src/test/queries/clientpositive/union_view.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.stats.dbclass=fs;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/unset_table_view_property.q ql/src/test/queries/clientpositive/unset_table_view_property.q
index 4545230ced..90c271c3f0 100644
--- ql/src/test/queries/clientpositive/unset_table_view_property.q
+++ ql/src/test/queries/clientpositive/unset_table_view_property.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 CREATE DATABASE vt;
 
 CREATE TABLE vt.testTable(col1 INT, col2 INT);
diff --git ql/src/test/queries/clientpositive/updateAccessTime.q ql/src/test/queries/clientpositive/updateAccessTime.q
index 36d3f5ed91..f2125e5e39 100644
--- ql/src/test/queries/clientpositive/updateAccessTime.q
+++ ql/src/test/queries/clientpositive/updateAccessTime.q
@@ -1,3 +1,5 @@
+--! qt:dataset:srcpart
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 drop table tstsrc;
 
diff --git ql/src/test/queries/clientpositive/updateBasicStats.q ql/src/test/queries/clientpositive/updateBasicStats.q
index daa8029c33..3db535e1f7 100644
--- ql/src/test/queries/clientpositive/updateBasicStats.q
+++ ql/src/test/queries/clientpositive/updateBasicStats.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 
 create table s as select * from src limit 10;
diff --git ql/src/test/queries/clientpositive/update_all_non_partitioned.q ql/src/test/queries/clientpositive/update_all_non_partitioned.q
index c4c2d2c17c..f6704c0ebe 100644
--- ql/src/test/queries/clientpositive/update_all_non_partitioned.q
+++ ql/src/test/queries/clientpositive/update_all_non_partitioned.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/update_all_partitioned.q ql/src/test/queries/clientpositive/update_all_partitioned.q
index aec5c1ef93..0b34fc2bcd 100644
--- ql/src/test/queries/clientpositive/update_all_partitioned.q
+++ ql/src/test/queries/clientpositive/update_all_partitioned.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/update_all_types.q ql/src/test/queries/clientpositive/update_all_types.q
index 17ce742738..15c9d64699 100644
--- ql/src/test/queries/clientpositive/update_all_types.q
+++ ql/src/test/queries/clientpositive/update_all_types.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/update_orig_table.q ql/src/test/queries/clientpositive/update_orig_table.q
index f68b82de49..750b034e10 100644
--- ql/src/test/queries/clientpositive/update_orig_table.q
+++ ql/src/test/queries/clientpositive/update_orig_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
 
diff --git ql/src/test/queries/clientpositive/update_tmp_table.q ql/src/test/queries/clientpositive/update_tmp_table.q
index 6a6e11d82f..4672973d5a 100644
--- ql/src/test/queries/clientpositive/update_tmp_table.q
+++ ql/src/test/queries/clientpositive/update_tmp_table.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/update_two_cols.q ql/src/test/queries/clientpositive/update_two_cols.q
index 3473bd4cd2..664b3a6ee0 100644
--- ql/src/test/queries/clientpositive/update_two_cols.q
+++ ql/src/test/queries/clientpositive/update_two_cols.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/update_where_no_match.q ql/src/test/queries/clientpositive/update_where_no_match.q
index af4d7f9455..a1b98750aa 100644
--- ql/src/test/queries/clientpositive/update_where_no_match.q
+++ ql/src/test/queries/clientpositive/update_where_no_match.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/update_where_non_partitioned.q ql/src/test/queries/clientpositive/update_where_non_partitioned.q
index 22f3e87033..79efeb01be 100644
--- ql/src/test/queries/clientpositive/update_where_non_partitioned.q
+++ ql/src/test/queries/clientpositive/update_where_non_partitioned.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/update_where_partitioned.q ql/src/test/queries/clientpositive/update_where_partitioned.q
index 936390d02d..8d4d7d24ce 100644
--- ql/src/test/queries/clientpositive/update_where_partitioned.q
+++ ql/src/test/queries/clientpositive/update_where_partitioned.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.support.concurrency=true;
 set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
diff --git ql/src/test/queries/clientpositive/varchar_1.q ql/src/test/queries/clientpositive/varchar_1.q
index 8f397fb04f..3aabfe5e59 100644
--- ql/src/test/queries/clientpositive/varchar_1.q
+++ ql/src/test/queries/clientpositive/varchar_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.strict.checks.bucketing=false;
 
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/varchar_2.q ql/src/test/queries/clientpositive/varchar_2.q
index 1eb3b85d6a..2bf878ba03 100644
--- ql/src/test/queries/clientpositive/varchar_2.q
+++ ql/src/test/queries/clientpositive/varchar_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table varchar_2;
 
 create table varchar_2 (
diff --git ql/src/test/queries/clientpositive/varchar_cast.q ql/src/test/queries/clientpositive/varchar_cast.q
index c356b1dbca..d4526b1076 100644
--- ql/src/test/queries/clientpositive/varchar_cast.q
+++ ql/src/test/queries/clientpositive/varchar_cast.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- Cast from varchar to other data types
diff --git ql/src/test/queries/clientpositive/varchar_comparison.q ql/src/test/queries/clientpositive/varchar_comparison.q
index 05cad852a2..65e3315aa8 100644
--- ql/src/test/queries/clientpositive/varchar_comparison.q
+++ ql/src/test/queries/clientpositive/varchar_comparison.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.fetch.task.conversion=more;
 
 -- Should all be true
diff --git ql/src/test/queries/clientpositive/varchar_nested_types.q ql/src/test/queries/clientpositive/varchar_nested_types.q
index 5c0989f7fc..c783593777 100644
--- ql/src/test/queries/clientpositive/varchar_nested_types.q
+++ ql/src/test/queries/clientpositive/varchar_nested_types.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table varchar_nested_1;
 drop table varchar_nested_array;
 drop table varchar_nested_map;
diff --git ql/src/test/queries/clientpositive/varchar_udf1.q ql/src/test/queries/clientpositive/varchar_udf1.q
index 1039ed9848..7aee1ce225 100644
--- ql/src/test/queries/clientpositive/varchar_udf1.q
+++ ql/src/test/queries/clientpositive/varchar_udf1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table varchar_udf_1;
 
 create table varchar_udf_1 (c1 string, c2 string, c3 varchar(10), c4 varchar(20));
diff --git ql/src/test/queries/clientpositive/vector_adaptor_usage_mode.q ql/src/test/queries/clientpositive/vector_adaptor_usage_mode.q
index ab65e9d9da..6a27031c73 100644
--- ql/src/test/queries/clientpositive/vector_adaptor_usage_mode.q
+++ ql/src/test/queries/clientpositive/vector_adaptor_usage_mode.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.vectorized.execution.enabled=false;
 set hive.fetch.task.conversion=none;
 SET hive.auto.convert.join=true;
diff --git ql/src/test/queries/clientpositive/vector_auto_smb_mapjoin_14.q ql/src/test/queries/clientpositive/vector_auto_smb_mapjoin_14.q
index 81d6541674..ed25756e06 100644
--- ql/src/test/queries/clientpositive/vector_auto_smb_mapjoin_14.q
+++ ql/src/test/queries/clientpositive/vector_auto_smb_mapjoin_14.q
@@ -1,3 +1,6 @@
+--! qt:dataset:src1
+--! qt:dataset:src
+--! qt:dataset:part
 set hive.stats.column.autogather=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/vector_between_in.q ql/src/test/queries/clientpositive/vector_between_in.q
index b87d646bc7..bbf2ec7afb 100644
--- ql/src/test/queries/clientpositive/vector_between_in.q
+++ ql/src/test/queries/clientpositive/vector_between_in.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_case_when_1.q ql/src/test/queries/clientpositive/vector_case_when_1.q
index f081efb1ec..0ba17da47e 100644
--- ql/src/test/queries/clientpositive/vector_case_when_1.q
+++ ql/src/test/queries/clientpositive/vector_case_when_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:lineitem
 set hive.cli.print.header=true;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/vector_char_2.q ql/src/test/queries/clientpositive/vector_char_2.q
index d3a2e93ce4..02062d5b20 100644
--- ql/src/test/queries/clientpositive/vector_char_2.q
+++ ql/src/test/queries/clientpositive/vector_char_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_char_simple.q ql/src/test/queries/clientpositive/vector_char_simple.q
index 70b0900852..2a61af86d0 100644
--- ql/src/test/queries/clientpositive/vector_char_simple.q
+++ ql/src/test/queries/clientpositive/vector_char_simple.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.stats.column.autogather=false;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_coalesce.q ql/src/test/queries/clientpositive/vector_coalesce.q
index 11296e16ce..1689561af8 100644
--- ql/src/test/queries/clientpositive/vector_coalesce.q
+++ ql/src/test/queries/clientpositive/vector_coalesce.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.stats.fetch.column.stats=true;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_complex_all.q ql/src/test/queries/clientpositive/vector_complex_all.q
index 920210f751..e223c8efdc 100644
--- ql/src/test/queries/clientpositive/vector_complex_all.q
+++ ql/src/test/queries/clientpositive/vector_complex_all.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.compute.query.using.stats=false;
 set hive.strict.checks.cartesian.product=false;
 set hive.cli.print.header=true;
diff --git ql/src/test/queries/clientpositive/vector_complex_join.q ql/src/test/queries/clientpositive/vector_complex_join.q
index dbdc36a112..9316378d91 100644
--- ql/src/test/queries/clientpositive/vector_complex_join.q
+++ ql/src/test/queries/clientpositive/vector_complex_join.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.cli.print.header=true;
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vector_date_1.q ql/src/test/queries/clientpositive/vector_date_1.q
index bb515b1466..f26319cb5b 100644
--- ql/src/test/queries/clientpositive/vector_date_1.q
+++ ql/src/test/queries/clientpositive/vector_date_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_decimal_1.q ql/src/test/queries/clientpositive/vector_decimal_1.q
index d47de3a55f..833aa09d6b 100644
--- ql/src/test/queries/clientpositive/vector_decimal_1.q
+++ ql/src/test/queries/clientpositive/vector_decimal_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_decimal_2.q ql/src/test/queries/clientpositive/vector_decimal_2.q
index 0342b0fd68..ec274c8e16 100644
--- ql/src/test/queries/clientpositive/vector_decimal_2.q
+++ ql/src/test/queries/clientpositive/vector_decimal_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_decimal_aggregate.q ql/src/test/queries/clientpositive/vector_decimal_aggregate.q
index c3a831802b..8a2a0d77bb 100644
--- ql/src/test/queries/clientpositive/vector_decimal_aggregate.q
+++ ql/src/test/queries/clientpositive/vector_decimal_aggregate.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.stats.column.autogather=true;
diff --git ql/src/test/queries/clientpositive/vector_decimal_cast.q ql/src/test/queries/clientpositive/vector_decimal_cast.q
index d98ca37196..2914fce65d 100644
--- ql/src/test/queries/clientpositive/vector_decimal_cast.q
+++ ql/src/test/queries/clientpositive/vector_decimal_cast.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vector_decimal_expressions.q ql/src/test/queries/clientpositive/vector_decimal_expressions.q
index 6790f2724d..3e590cb9f1 100644
--- ql/src/test/queries/clientpositive/vector_decimal_expressions.q
+++ ql/src/test/queries/clientpositive/vector_decimal_expressions.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vector_decimal_math_funcs.q ql/src/test/queries/clientpositive/vector_decimal_math_funcs.q
index 4264937883..16ffdc2c27 100644
--- ql/src/test/queries/clientpositive/vector_decimal_math_funcs.q
+++ ql/src/test/queries/clientpositive/vector_decimal_math_funcs.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vector_elt.q ql/src/test/queries/clientpositive/vector_elt.q
index 5e54cbbfe5..aeb49ce15e 100644
--- ql/src/test/queries/clientpositive/vector_elt.q
+++ ql/src/test/queries/clientpositive/vector_elt.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_empty_where.q ql/src/test/queries/clientpositive/vector_empty_where.q
index 3e94c92366..e0081e4995 100644
--- ql/src/test/queries/clientpositive/vector_empty_where.q
+++ ql/src/test/queries/clientpositive/vector_empty_where.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vector_groupby4.q ql/src/test/queries/clientpositive/vector_groupby4.q
index 1906c071fe..373509cf2b 100644
--- ql/src/test/queries/clientpositive/vector_groupby4.q
+++ ql/src/test/queries/clientpositive/vector_groupby4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/vector_groupby6.q ql/src/test/queries/clientpositive/vector_groupby6.q
index cb01882b3f..2085c19639 100644
--- ql/src/test/queries/clientpositive/vector_groupby6.q
+++ ql/src/test/queries/clientpositive/vector_groupby6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/vector_groupby_grouping_window.q ql/src/test/queries/clientpositive/vector_groupby_grouping_window.q
index 5c94715807..95644c4621 100644
--- ql/src/test/queries/clientpositive/vector_groupby_grouping_window.q
+++ ql/src/test/queries/clientpositive/vector_groupby_grouping_window.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
 SET hive.vectorized.execution.reduce.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_groupby_mapjoin.q ql/src/test/queries/clientpositive/vector_groupby_mapjoin.q
index 0c244419d7..b1d3f40ee7 100644
--- ql/src/test/queries/clientpositive/vector_groupby_mapjoin.q
+++ ql/src/test/queries/clientpositive/vector_groupby_mapjoin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled = true;
diff --git ql/src/test/queries/clientpositive/vector_if_expr.q ql/src/test/queries/clientpositive/vector_if_expr.q
index 6e7ccf7f6e..f5450cfcac 100644
--- ql/src/test/queries/clientpositive/vector_if_expr.q
+++ ql/src/test/queries/clientpositive/vector_if_expr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_interval_1.q ql/src/test/queries/clientpositive/vector_interval_1.q
index 37027345cd..4320c88ec3 100644
--- ql/src/test/queries/clientpositive/vector_interval_1.q
+++ ql/src/test/queries/clientpositive/vector_interval_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_interval_2.q ql/src/test/queries/clientpositive/vector_interval_2.q
index 0b78a4ba51..e97c0e484e 100644
--- ql/src/test/queries/clientpositive/vector_interval_2.q
+++ ql/src/test/queries/clientpositive/vector_interval_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_join30.q ql/src/test/queries/clientpositive/vector_join30.q
index 6557a71757..82dda493ae 100644
--- ql/src/test/queries/clientpositive/vector_join30.q
+++ ql/src/test/queries/clientpositive/vector_join30.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
 SET hive.vectorized.execution.mapjoin.native.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_left_outer_join.q ql/src/test/queries/clientpositive/vector_left_outer_join.q
index 0684f12ae5..f980fd85bd 100644
--- ql/src/test/queries/clientpositive/vector_left_outer_join.q
+++ ql/src/test/queries/clientpositive/vector_left_outer_join.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_leftsemi_mapjoin.q ql/src/test/queries/clientpositive/vector_leftsemi_mapjoin.q
index 8469a06e85..588eb20511 100644
--- ql/src/test/queries/clientpositive/vector_leftsemi_mapjoin.q
+++ ql/src/test/queries/clientpositive/vector_leftsemi_mapjoin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.auto.convert.join=true;
diff --git ql/src/test/queries/clientpositive/vector_mapjoin_reduce.q ql/src/test/queries/clientpositive/vector_mapjoin_reduce.q
index d960559f28..dfb4975f25 100644
--- ql/src/test/queries/clientpositive/vector_mapjoin_reduce.q
+++ ql/src/test/queries/clientpositive/vector_mapjoin_reduce.q
@@ -1,3 +1,4 @@
+--! qt:dataset:lineitem
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_multi_insert.q ql/src/test/queries/clientpositive/vector_multi_insert.q
index e6bfb96794..4975a62c9e 100644
--- ql/src/test/queries/clientpositive/vector_multi_insert.q
+++ ql/src/test/queries/clientpositive/vector_multi_insert.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.stats.column.autogather=false;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_non_constant_in_expr.q ql/src/test/queries/clientpositive/vector_non_constant_in_expr.q
index 113ea7fcef..006598bebf 100644
--- ql/src/test/queries/clientpositive/vector_non_constant_in_expr.q
+++ ql/src/test/queries/clientpositive/vector_non_constant_in_expr.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vector_non_string_partition.q ql/src/test/queries/clientpositive/vector_non_string_partition.q
index cf3e76558b..e21573d154 100644
--- ql/src/test/queries/clientpositive/vector_non_string_partition.q
+++ ql/src/test/queries/clientpositive/vector_non_string_partition.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_nvl.q ql/src/test/queries/clientpositive/vector_nvl.q
index e00e82fab4..b8563c0ff0 100644
--- ql/src/test/queries/clientpositive/vector_nvl.q
+++ ql/src/test/queries/clientpositive/vector_nvl.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vector_orc_string_reader_empty_dict.q ql/src/test/queries/clientpositive/vector_orc_string_reader_empty_dict.q
index 0e8a743bb1..8d9a551915 100644
--- ql/src/test/queries/clientpositive/vector_orc_string_reader_empty_dict.q
+++ ql/src/test/queries/clientpositive/vector_orc_string_reader_empty_dict.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 create table orcstr (vcol varchar(20)) stored as orc;
 
 insert overwrite table orcstr select null from src;
diff --git ql/src/test/queries/clientpositive/vector_outer_join1.q ql/src/test/queries/clientpositive/vector_outer_join1.q
index 6cb2e454fc..24134a8563 100644
--- ql/src/test/queries/clientpositive/vector_outer_join1.q
+++ ql/src/test/queries/clientpositive/vector_outer_join1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
 SET hive.auto.convert.join=true;
diff --git ql/src/test/queries/clientpositive/vector_outer_join2.q ql/src/test/queries/clientpositive/vector_outer_join2.q
index da1780632e..d79a124634 100644
--- ql/src/test/queries/clientpositive/vector_outer_join2.q
+++ ql/src/test/queries/clientpositive/vector_outer_join2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
 SET hive.auto.convert.join=true;
diff --git ql/src/test/queries/clientpositive/vector_outer_join3.q ql/src/test/queries/clientpositive/vector_outer_join3.q
index 3f28251b5a..2ecdd6d1a4 100644
--- ql/src/test/queries/clientpositive/vector_outer_join3.q
+++ ql/src/test/queries/clientpositive/vector_outer_join3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
 SET hive.auto.convert.join=true;
diff --git ql/src/test/queries/clientpositive/vector_outer_join4.q ql/src/test/queries/clientpositive/vector_outer_join4.q
index d024687afb..6fcef4db7d 100644
--- ql/src/test/queries/clientpositive/vector_outer_join4.q
+++ ql/src/test/queries/clientpositive/vector_outer_join4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
 SET hive.auto.convert.join=true;
diff --git ql/src/test/queries/clientpositive/vector_outer_join5.q ql/src/test/queries/clientpositive/vector_outer_join5.q
index b8e788aa05..19aefdcb56 100644
--- ql/src/test/queries/clientpositive/vector_outer_join5.q
+++ ql/src/test/queries/clientpositive/vector_outer_join5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_reduce_groupby_decimal.q ql/src/test/queries/clientpositive/vector_reduce_groupby_decimal.q
index bbd25aec5f..7d52874aa4 100644
--- ql/src/test/queries/clientpositive/vector_reduce_groupby_decimal.q
+++ ql/src/test/queries/clientpositive/vector_reduce_groupby_decimal.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vector_reuse_scratchcols.q ql/src/test/queries/clientpositive/vector_reuse_scratchcols.q
index 6603d67f6a..6eb58c1181 100644
--- ql/src/test/queries/clientpositive/vector_reuse_scratchcols.q
+++ ql/src/test/queries/clientpositive/vector_reuse_scratchcols.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.vectorized.execution.enabled=true;
 
 
diff --git ql/src/test/queries/clientpositive/vector_tablesample_rows.q ql/src/test/queries/clientpositive/vector_tablesample_rows.q
index e748e9084b..adc67b168b 100644
--- ql/src/test/queries/clientpositive/vector_tablesample_rows.q
+++ ql/src/test/queries/clientpositive/vector_tablesample_rows.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.stats.column.autogather=false;
 set hive.cli.print.header=true;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/vector_udf1.q ql/src/test/queries/clientpositive/vector_udf1.q
index c1d43725d2..1474f6ced2 100644
--- ql/src/test/queries/clientpositive/vector_udf1.q
+++ ql/src/test/queries/clientpositive/vector_udf1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vector_udf2.q ql/src/test/queries/clientpositive/vector_udf2.q
index bd8e875e3d..afa48d9b19 100644
--- ql/src/test/queries/clientpositive/vector_udf2.q
+++ ql/src/test/queries/clientpositive/vector_udf2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vector_udf3.q ql/src/test/queries/clientpositive/vector_udf3.q
index bc3a5e162d..a07fae9a01 100644
--- ql/src/test/queries/clientpositive/vector_udf3.q
+++ ql/src/test/queries/clientpositive/vector_udf3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 ADD JAR ivy://org.apache.hive.hive-it-custom-udfs:udf-vectorized-badexample:+;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vector_udf_character_length.q ql/src/test/queries/clientpositive/vector_udf_character_length.q
index e49a091b34..e93a4d01e2 100644
--- ql/src/test/queries/clientpositive/vector_udf_character_length.q
+++ ql/src/test/queries/clientpositive/vector_udf_character_length.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.stats.column.autogather=false;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vector_udf_octet_length.q ql/src/test/queries/clientpositive/vector_udf_octet_length.q
index af4c7c4a7f..eea1b3801c 100644
--- ql/src/test/queries/clientpositive/vector_udf_octet_length.q
+++ ql/src/test/queries/clientpositive/vector_udf_octet_length.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 set hive.stats.column.autogather=false;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vector_varchar_simple.q ql/src/test/queries/clientpositive/vector_varchar_simple.q
index 352ec3aebc..f846490ae5 100644
--- ql/src/test/queries/clientpositive/vector_varchar_simple.q
+++ ql/src/test/queries/clientpositive/vector_varchar_simple.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.stats.column.autogather=false;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_windowing.q ql/src/test/queries/clientpositive/vector_windowing.q
index 4bcd77e796..f288418f83 100644
--- ql/src/test/queries/clientpositive/vector_windowing.q
+++ ql/src/test/queries/clientpositive/vector_windowing.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.cli.print.header=true;
 SET hive.vectorized.execution.enabled=true;
 set hive.vectorized.execution.ptf.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_windowing_expressions.q ql/src/test/queries/clientpositive/vector_windowing_expressions.q
index 3a72900231..3ee878735f 100644
--- ql/src/test/queries/clientpositive/vector_windowing_expressions.q
+++ ql/src/test/queries/clientpositive/vector_windowing_expressions.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.stats.column.autogather=false;
 set hive.cli.print.header=true;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_windowing_gby.q ql/src/test/queries/clientpositive/vector_windowing_gby.q
index c7e9e7ce32..8c0b1cce94 100644
--- ql/src/test/queries/clientpositive/vector_windowing_gby.q
+++ ql/src/test/queries/clientpositive/vector_windowing_gby.q
@@ -1,3 +1,5 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 set hive.cli.print.header=true;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_windowing_gby2.q ql/src/test/queries/clientpositive/vector_windowing_gby2.q
index 2f51bcbce5..da950a0cf6 100644
--- ql/src/test/queries/clientpositive/vector_windowing_gby2.q
+++ ql/src/test/queries/clientpositive/vector_windowing_gby2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 set hive.cli.print.header=true;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_windowing_navfn.q ql/src/test/queries/clientpositive/vector_windowing_navfn.q
index 22011cf1e7..e31eae8c79 100644
--- ql/src/test/queries/clientpositive/vector_windowing_navfn.q
+++ ql/src/test/queries/clientpositive/vector_windowing_navfn.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.explain.user=false;
 set hive.cli.print.header=true;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vector_windowing_streaming.q ql/src/test/queries/clientpositive/vector_windowing_streaming.q
index 424261a595..e59872ac0f 100644
--- ql/src/test/queries/clientpositive/vector_windowing_streaming.q
+++ ql/src/test/queries/clientpositive/vector_windowing_streaming.q
@@ -1,3 +1,5 @@
+--! qt:dataset:part
+--! qt:dataset:alltypesorc
 set hive.cli.print.header=true;
 SET hive.vectorized.execution.enabled=true;
 SET hive.vectorized.execution.reduce.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_0.q ql/src/test/queries/clientpositive/vectorization_0.q
index 3af9422717..7a01f9c3cf 100644
--- ql/src/test/queries/clientpositive/vectorization_0.q
+++ ql/src/test/queries/clientpositive/vectorization_0.q
@@ -1,3 +1,6 @@
+--! qt:dataset:srcbucket
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_1.q ql/src/test/queries/clientpositive/vectorization_1.q
index b03ae71a11..fbaedf8f81 100644
--- ql/src/test/queries/clientpositive/vectorization_1.q
+++ ql/src/test/queries/clientpositive/vectorization_1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 set hive.vectorized.execution.reduce.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_10.q ql/src/test/queries/clientpositive/vectorization_10.q
index 8b620686e7..188bc5e237 100644
--- ql/src/test/queries/clientpositive/vectorization_10.q
+++ ql/src/test/queries/clientpositive/vectorization_10.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vectorization_11.q ql/src/test/queries/clientpositive/vectorization_11.q
index aa05fe5e51..3e27f7b0c8 100644
--- ql/src/test/queries/clientpositive/vectorization_11.q
+++ ql/src/test/queries/clientpositive/vectorization_11.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vectorization_12.q ql/src/test/queries/clientpositive/vectorization_12.q
index 18d9184ae1..d8013d91fe 100644
--- ql/src/test/queries/clientpositive/vectorization_12.q
+++ ql/src/test/queries/clientpositive/vectorization_12.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vectorization_13.q ql/src/test/queries/clientpositive/vectorization_13.q
index 7250a0c068..dd7981db03 100644
--- ql/src/test/queries/clientpositive/vectorization_13.q
+++ ql/src/test/queries/clientpositive/vectorization_13.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_14.q ql/src/test/queries/clientpositive/vectorization_14.q
index 2547500d91..6884e49721 100644
--- ql/src/test/queries/clientpositive/vectorization_14.q
+++ ql/src/test/queries/clientpositive/vectorization_14.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_15.q ql/src/test/queries/clientpositive/vectorization_15.q
index bb33ffd802..78de351b8a 100644
--- ql/src/test/queries/clientpositive/vectorization_15.q
+++ ql/src/test/queries/clientpositive/vectorization_15.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_16.q ql/src/test/queries/clientpositive/vectorization_16.q
index e9cb5c3c7f..47bc9a5714 100644
--- ql/src/test/queries/clientpositive/vectorization_16.q
+++ ql/src/test/queries/clientpositive/vectorization_16.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_17.q ql/src/test/queries/clientpositive/vectorization_17.q
index 48062325c3..f37e117565 100644
--- ql/src/test/queries/clientpositive/vectorization_17.q
+++ ql/src/test/queries/clientpositive/vectorization_17.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_2.q ql/src/test/queries/clientpositive/vectorization_2.q
index 5a1269c556..d313973cfe 100644
--- ql/src/test/queries/clientpositive/vectorization_2.q
+++ ql/src/test/queries/clientpositive/vectorization_2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vectorization_3.q ql/src/test/queries/clientpositive/vectorization_3.q
index dea7936ae1..e30a96f721 100644
--- ql/src/test/queries/clientpositive/vectorization_3.q
+++ ql/src/test/queries/clientpositive/vectorization_3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vectorization_4.q ql/src/test/queries/clientpositive/vectorization_4.q
index e7c88e6fa3..b8fd79e8bf 100644
--- ql/src/test/queries/clientpositive/vectorization_4.q
+++ ql/src/test/queries/clientpositive/vectorization_4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vectorization_5.q ql/src/test/queries/clientpositive/vectorization_5.q
index c3b335a26b..e069ca67a9 100644
--- ql/src/test/queries/clientpositive/vectorization_5.q
+++ ql/src/test/queries/clientpositive/vectorization_5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vectorization_6.q ql/src/test/queries/clientpositive/vectorization_6.q
index f38b5136c9..8b75e042aa 100644
--- ql/src/test/queries/clientpositive/vectorization_6.q
+++ ql/src/test/queries/clientpositive/vectorization_6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vectorization_7.q ql/src/test/queries/clientpositive/vectorization_7.q
index a85585b5d0..ac0cc1009e 100644
--- ql/src/test/queries/clientpositive/vectorization_7.q
+++ ql/src/test/queries/clientpositive/vectorization_7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_8.q ql/src/test/queries/clientpositive/vectorization_8.q
index 3aa0eb5492..e434ba0bb5 100644
--- ql/src/test/queries/clientpositive/vectorization_8.q
+++ ql/src/test/queries/clientpositive/vectorization_8.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_9.q ql/src/test/queries/clientpositive/vectorization_9.q
index e9cb5c3c7f..47bc9a5714 100644
--- ql/src/test/queries/clientpositive/vectorization_9.q
+++ ql/src/test/queries/clientpositive/vectorization_9.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_decimal_date.q ql/src/test/queries/clientpositive/vectorization_decimal_date.q
index 29c025c632..c38ef09af4 100644
--- ql/src/test/queries/clientpositive/vectorization_decimal_date.q
+++ ql/src/test/queries/clientpositive/vectorization_decimal_date.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vectorization_div0.q ql/src/test/queries/clientpositive/vectorization_div0.q
index 26ff2662a7..8c0a6247b7 100644
--- ql/src/test/queries/clientpositive/vectorization_div0.q
+++ ql/src/test/queries/clientpositive/vectorization_div0.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled = true;
diff --git ql/src/test/queries/clientpositive/vectorization_input_format_excludes.q ql/src/test/queries/clientpositive/vectorization_input_format_excludes.q
index 8d22efd9aa..ed0eb56a57 100644
--- ql/src/test/queries/clientpositive/vectorization_input_format_excludes.q
+++ ql/src/test/queries/clientpositive/vectorization_input_format_excludes.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.fetch.task.conversion=none;
 set hive.vectorized.use.row.serde.deserialize=true;
 set hive.vectorized.use.vector.serde.deserialize=true;
diff --git ql/src/test/queries/clientpositive/vectorization_limit.q ql/src/test/queries/clientpositive/vectorization_limit.q
index 8044484c53..f0662208fd 100644
--- ql/src/test/queries/clientpositive/vectorization_limit.q
+++ ql/src/test/queries/clientpositive/vectorization_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_nested_udf.q ql/src/test/queries/clientpositive/vectorization_nested_udf.q
index 25a25dfbab..0eeb4b9396 100644
--- ql/src/test/queries/clientpositive/vectorization_nested_udf.q
+++ ql/src/test/queries/clientpositive/vectorization_nested_udf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vectorization_not.q ql/src/test/queries/clientpositive/vectorization_not.q
index aa691ab077..0ea8d0b2cc 100644
--- ql/src/test/queries/clientpositive/vectorization_not.q
+++ ql/src/test/queries/clientpositive/vectorization_not.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vectorization_offset_limit.q ql/src/test/queries/clientpositive/vectorization_offset_limit.q
index 97e1a05f9a..38c1dc859c 100644
--- ql/src/test/queries/clientpositive/vectorization_offset_limit.q
+++ ql/src/test/queries/clientpositive/vectorization_offset_limit.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
 set hive.mapred.mode=nonstrict;
diff --git ql/src/test/queries/clientpositive/vectorization_part.q ql/src/test/queries/clientpositive/vectorization_part.q
index 9f4fc6ea4b..05068f5898 100644
--- ql/src/test/queries/clientpositive/vectorization_part.q
+++ ql/src/test/queries/clientpositive/vectorization_part.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vectorization_part_project.q ql/src/test/queries/clientpositive/vectorization_part_project.q
index d0dcb6f58e..f16c4fca4c 100644
--- ql/src/test/queries/clientpositive/vectorization_part_project.q
+++ ql/src/test/queries/clientpositive/vectorization_part_project.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_part_varchar.q ql/src/test/queries/clientpositive/vectorization_part_varchar.q
index 28646b9f03..a2fc990dc4 100644
--- ql/src/test/queries/clientpositive/vectorization_part_varchar.q
+++ ql/src/test/queries/clientpositive/vectorization_part_varchar.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled=true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vectorization_pushdown.q ql/src/test/queries/clientpositive/vectorization_pushdown.q
index 8acb1930f0..73970d1240 100644
--- ql/src/test/queries/clientpositive/vectorization_pushdown.q
+++ ql/src/test/queries/clientpositive/vectorization_pushdown.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorization_short_regress.q ql/src/test/queries/clientpositive/vectorization_short_regress.q
index 03e4bbcb59..e2e858216c 100644
--- ql/src/test/queries/clientpositive/vectorization_short_regress.q
+++ ql/src/test/queries/clientpositive/vectorization_short_regress.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/vectorized_bucketmapjoin1.q ql/src/test/queries/clientpositive/vectorized_bucketmapjoin1.q
index eb42ef2a85..6c47fdab02 100644
--- ql/src/test/queries/clientpositive/vectorized_bucketmapjoin1.q
+++ ql/src/test/queries/clientpositive/vectorized_bucketmapjoin1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 
diff --git ql/src/test/queries/clientpositive/vectorized_case.q ql/src/test/queries/clientpositive/vectorized_case.q
index 8aad2b5106..1852226950 100644
--- ql/src/test/queries/clientpositive/vectorized_case.q
+++ ql/src/test/queries/clientpositive/vectorized_case.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
 set hive.vectorized.execution.enabled = true;
diff --git ql/src/test/queries/clientpositive/vectorized_casts.q ql/src/test/queries/clientpositive/vectorized_casts.q
index 03c9062c41..0c509ff934 100644
--- ql/src/test/queries/clientpositive/vectorized_casts.q
+++ ql/src/test/queries/clientpositive/vectorized_casts.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vectorized_context.q ql/src/test/queries/clientpositive/vectorized_context.q
index 0558bc0ea8..837414321a 100644
--- ql/src/test/queries/clientpositive/vectorized_context.q
+++ ql/src/test/queries/clientpositive/vectorized_context.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vectorized_date_funcs.q ql/src/test/queries/clientpositive/vectorized_date_funcs.q
index 4d56198e94..e26a54c6ad 100644
--- ql/src/test/queries/clientpositive/vectorized_date_funcs.q
+++ ql/src/test/queries/clientpositive/vectorized_date_funcs.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled = true;
diff --git ql/src/test/queries/clientpositive/vectorized_distinct_gby.q ql/src/test/queries/clientpositive/vectorized_distinct_gby.q
index 44a06f57fc..a64a60718f 100644
--- ql/src/test/queries/clientpositive/vectorized_distinct_gby.q
+++ ql/src/test/queries/clientpositive/vectorized_distinct_gby.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorized_dynamic_partition_pruning.q ql/src/test/queries/clientpositive/vectorized_dynamic_partition_pruning.q
index cb0e279116..75edd41461 100644
--- ql/src/test/queries/clientpositive/vectorized_dynamic_partition_pruning.q
+++ ql/src/test/queries/clientpositive/vectorized_dynamic_partition_pruning.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/vectorized_dynamic_semijoin_reduction.q ql/src/test/queries/clientpositive/vectorized_dynamic_semijoin_reduction.q
index f7c1f3b1fc..00c93324f3 100644
--- ql/src/test/queries/clientpositive/vectorized_dynamic_semijoin_reduction.q
+++ ql/src/test/queries/clientpositive/vectorized_dynamic_semijoin_reduction.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/vectorized_dynamic_semijoin_reduction2.q ql/src/test/queries/clientpositive/vectorized_dynamic_semijoin_reduction2.q
index c4784bd7c8..79980355f1 100644
--- ql/src/test/queries/clientpositive/vectorized_dynamic_semijoin_reduction2.q
+++ ql/src/test/queries/clientpositive/vectorized_dynamic_semijoin_reduction2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:lineitem
 set hive.compute.query.using.stats=false;
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
diff --git ql/src/test/queries/clientpositive/vectorized_mapjoin.q ql/src/test/queries/clientpositive/vectorized_mapjoin.q
index 138c133134..0b4e65df59 100644
--- ql/src/test/queries/clientpositive/vectorized_mapjoin.q
+++ ql/src/test/queries/clientpositive/vectorized_mapjoin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorized_math_funcs.q ql/src/test/queries/clientpositive/vectorized_math_funcs.q
index 6a10770dfe..6db15803b7 100644
--- ql/src/test/queries/clientpositive/vectorized_math_funcs.q
+++ ql/src/test/queries/clientpositive/vectorized_math_funcs.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled = true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vectorized_multi_output_select.q ql/src/test/queries/clientpositive/vectorized_multi_output_select.q
index e768a5d169..75a85c7e74 100644
--- ql/src/test/queries/clientpositive/vectorized_multi_output_select.q
+++ ql/src/test/queries/clientpositive/vectorized_multi_output_select.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 set hive.auto.convert.join=true;
 set hive.auto.convert.join.noconditionaltask.size=3000;
 set hive.strict.checks.cartesian.product=false;
diff --git ql/src/test/queries/clientpositive/vectorized_nested_mapjoin.q ql/src/test/queries/clientpositive/vectorized_nested_mapjoin.q
index 5b07c9f890..a70ba025c3 100644
--- ql/src/test/queries/clientpositive/vectorized_nested_mapjoin.q
+++ ql/src/test/queries/clientpositive/vectorized_nested_mapjoin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorized_parquet.q ql/src/test/queries/clientpositive/vectorized_parquet.q
index 1efc60e35d..dc63cbbcc6 100644
--- ql/src/test/queries/clientpositive/vectorized_parquet.q
+++ ql/src/test/queries/clientpositive/vectorized_parquet.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 set hive.exec.submitviachild=false;
 set hive.exec.submit.local.task.via.child=false;
diff --git ql/src/test/queries/clientpositive/vectorized_rcfile_columnar.q ql/src/test/queries/clientpositive/vectorized_rcfile_columnar.q
index 2b7d44b3bd..ef77d9af1d 100644
--- ql/src/test/queries/clientpositive/vectorized_rcfile_columnar.q
+++ ql/src/test/queries/clientpositive/vectorized_rcfile_columnar.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 --This query must pass even when vectorized reader is not available for
 --RC files. The query must fall back to the non-vector mode and run successfully.
diff --git ql/src/test/queries/clientpositive/vectorized_shufflejoin.q ql/src/test/queries/clientpositive/vectorized_shufflejoin.q
index 9227de0fce..578f968ed9 100644
--- ql/src/test/queries/clientpositive/vectorized_shufflejoin.q
+++ ql/src/test/queries/clientpositive/vectorized_shufflejoin.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled=true;
diff --git ql/src/test/queries/clientpositive/vectorized_string_funcs.q ql/src/test/queries/clientpositive/vectorized_string_funcs.q
index ee95c0b69e..ccdf3deee3 100644
--- ql/src/test/queries/clientpositive/vectorized_string_funcs.q
+++ ql/src/test/queries/clientpositive/vectorized_string_funcs.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.explain.user=false;
 SET hive.vectorized.execution.enabled = true;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vectorized_timestamp_funcs.q ql/src/test/queries/clientpositive/vectorized_timestamp_funcs.q
index afbc18a71a..c3236c9bf7 100644
--- ql/src/test/queries/clientpositive/vectorized_timestamp_funcs.q
+++ ql/src/test/queries/clientpositive/vectorized_timestamp_funcs.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=false;
 set hive.fetch.task.conversion=none;
diff --git ql/src/test/queries/clientpositive/vectorized_timestamp_ints_casts.q ql/src/test/queries/clientpositive/vectorized_timestamp_ints_casts.q
index e6e6d5d4b5..925a094d1b 100644
--- ql/src/test/queries/clientpositive/vectorized_timestamp_ints_casts.q
+++ ql/src/test/queries/clientpositive/vectorized_timestamp_ints_casts.q
@@ -1,3 +1,4 @@
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 SET hive.vectorized.execution.enabled = true;
 SET hive.int.timestamp.conversion.in.seconds=false;
diff --git ql/src/test/queries/clientpositive/view_alias.q ql/src/test/queries/clientpositive/view_alias.q
index e85ba12904..bf306b5f62 100644
--- ql/src/test/queries/clientpositive/view_alias.q
+++ ql/src/test/queries/clientpositive/view_alias.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop view v;
 create view v as select key, '12' from src;
 desc formatted v;
diff --git ql/src/test/queries/clientpositive/view_cbo.q ql/src/test/queries/clientpositive/view_cbo.q
index 4172678cc9..cad12212b9 100644
--- ql/src/test/queries/clientpositive/view_cbo.q
+++ ql/src/test/queries/clientpositive/view_cbo.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 -- SORT_QUERY_RESULTS
 
diff --git ql/src/test/queries/clientpositive/view_inputs.q ql/src/test/queries/clientpositive/view_inputs.q
index 7acc321e6f..810682e1b4 100644
--- ql/src/test/queries/clientpositive/view_inputs.q
+++ ql/src/test/queries/clientpositive/view_inputs.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- Tests that selecting from a view and another view that selects from that same view
 
 CREATE VIEW test_view1 AS SELECT * FROM src;
diff --git ql/src/test/queries/clientpositive/virtual_column.q ql/src/test/queries/clientpositive/virtual_column.q
index 5185f97041..76ee0b4794 100644
--- ql/src/test/queries/clientpositive/virtual_column.q
+++ ql/src/test/queries/clientpositive/virtual_column.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 set hive.mapred.mode=nonstrict;
 select INPUT__FILE__NAME, key, BLOCK__OFFSET__INSIDE__FILE from src;
 
diff --git ql/src/test/queries/clientpositive/windowing.q ql/src/test/queries/clientpositive/windowing.q
index 5de2b0e473..76f8fce9ef 100644
--- ql/src/test/queries/clientpositive/windowing.q
+++ ql/src/test/queries/clientpositive/windowing.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.mapred.mode=nonstrict;
 set mapred.reduce.tasks=4;
 -- SORT_QUERY_RESULTS
diff --git ql/src/test/queries/clientpositive/windowing_adjust_rowcontainer_sz.q ql/src/test/queries/clientpositive/windowing_adjust_rowcontainer_sz.q
index 402fbad3a1..d34bbbd0bd 100644
--- ql/src/test/queries/clientpositive/windowing_adjust_rowcontainer_sz.q
+++ ql/src/test/queries/clientpositive/windowing_adjust_rowcontainer_sz.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 set hive.join.cache.size=1;
 
 select p_mfgr, p_name, p_size,
diff --git ql/src/test/queries/clientpositive/windowing_columnPruning.q ql/src/test/queries/clientpositive/windowing_columnPruning.q
index fea674ff89..a8ad635ea3 100644
--- ql/src/test/queries/clientpositive/windowing_columnPruning.q
+++ ql/src/test/queries/clientpositive/windowing_columnPruning.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 -- 1. testQueryLevelPartitionColsNotInSelect
 select p_size,
 sum(p_retailprice) over (distribute by p_mfgr sort by p_name rows between unbounded preceding and current row) as s1
diff --git ql/src/test/queries/clientpositive/windowing_decimal.q ql/src/test/queries/clientpositive/windowing_decimal.q
index f785bb52aa..363a6743c7 100644
--- ql/src/test/queries/clientpositive/windowing_decimal.q
+++ ql/src/test/queries/clientpositive/windowing_decimal.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 create table part_dec(
     p_partkey INT,
     p_name STRING,
diff --git ql/src/test/queries/clientpositive/windowing_expressions.q ql/src/test/queries/clientpositive/windowing_expressions.q
index 33d05d1eb7..5615f5966f 100644
--- ql/src/test/queries/clientpositive/windowing_expressions.q
+++ ql/src/test/queries/clientpositive/windowing_expressions.q
@@ -1,3 +1,4 @@
+--! qt:dataset:part
 drop table over10k;
 
 create table over10k(
diff --git ql/src/test/queries/clientpositive/windowing_gby.q ql/src/test/queries/clientpositive/windowing_gby.q
index e1a536b798..2f69b3311c 100644
--- ql/src/test/queries/clientpositive/windowing_gby.q
+++ ql/src/test/queries/clientpositive/windowing_gby.q
@@ -1,3 +1,5 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 set hive.explain.user=true;
 explain
diff --git ql/src/test/queries/clientpositive/windowing_gby2.q ql/src/test/queries/clientpositive/windowing_gby2.q
index 920f723802..ea5bbd297f 100644
--- ql/src/test/queries/clientpositive/windowing_gby2.q
+++ ql/src/test/queries/clientpositive/windowing_gby2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:cbo_t3
+--! qt:dataset:alltypesorc
 set hive.mapred.mode=nonstrict;
 
 explain
diff --git ql/src/test/queries/clientpositive/windowing_navfn.q ql/src/test/queries/clientpositive/windowing_navfn.q
index 7c27e22cfb..a172578a24 100644
--- ql/src/test/queries/clientpositive/windowing_navfn.q
+++ ql/src/test/queries/clientpositive/windowing_navfn.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 drop table over10k;
 
 create table over10k(
diff --git ql/src/test/queries/clientpositive/windowing_streaming.q ql/src/test/queries/clientpositive/windowing_streaming.q
index 4699e690b1..30f0c1454c 100644
--- ql/src/test/queries/clientpositive/windowing_streaming.q
+++ ql/src/test/queries/clientpositive/windowing_streaming.q
@@ -1,3 +1,5 @@
+--! qt:dataset:part
+--! qt:dataset:alltypesorc
 drop table over10k;
 
 create table over10k(
diff --git ql/src/test/queries/clientpositive/windowing_udaf.q ql/src/test/queries/clientpositive/windowing_udaf.q
index 19bae8a274..e71bf8c123 100644
--- ql/src/test/queries/clientpositive/windowing_udaf.q
+++ ql/src/test/queries/clientpositive/windowing_udaf.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src1
 drop table over10k;
 
 create table over10k(
diff --git ql/src/test/queries/clientpositive/windowing_udaf2.q ql/src/test/queries/clientpositive/windowing_udaf2.q
index b813657bae..e2a6e6d236 100644
--- ql/src/test/queries/clientpositive/windowing_udaf2.q
+++ ql/src/test/queries/clientpositive/windowing_udaf2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 -- user-added aggregates should be usable as windowing functions
 create temporary function mysum as 'org.apache.hadoop.hive.ql.udf.generic.GenericUDAFSum';
 
diff --git ql/src/test/queries/negative/ambiguous_join_col.q ql/src/test/queries/negative/ambiguous_join_col.q
index e70aae4627..ff4ba0f3d8 100644
--- ql/src/test/queries/negative/ambiguous_join_col.q
+++ ql/src/test/queries/negative/ambiguous_join_col.q
@@ -1,2 +1,4 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 FROM src src1 JOIN src src2 ON src1.key = src2.key
 INSERT OVERWRITE TABLE dest1 SELECT key
diff --git ql/src/test/queries/negative/duplicate_alias.q ql/src/test/queries/negative/duplicate_alias.q
index 5fd22460c0..c3df285622 100644
--- ql/src/test/queries/negative/duplicate_alias.q
+++ ql/src/test/queries/negative/duplicate_alias.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src a JOIN src a ON (a.key = a.key)
 INSERT OVERWRITE TABLE dest1 SELECT a.key, a.value
diff --git ql/src/test/queries/negative/garbage.q ql/src/test/queries/negative/garbage.q
index 6c8c751f21..93bb54631c 100644
--- ql/src/test/queries/negative/garbage.q
+++ ql/src/test/queries/negative/garbage.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 this is totally garbage SELECT src.key WHERE a lot of garbage
diff --git ql/src/test/queries/negative/insert_wrong_number_columns.q ql/src/test/queries/negative/insert_wrong_number_columns.q
index aadfbde338..a5919e7ea5 100644
--- ql/src/test/queries/negative/insert_wrong_number_columns.q
+++ ql/src/test/queries/negative/insert_wrong_number_columns.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT src.key, src.value, 1 WHERE src.key < 100
diff --git ql/src/test/queries/negative/invalid_dot.q ql/src/test/queries/negative/invalid_dot.q
index 36b9bd2a3b..e13535af6a 100644
--- ql/src/test/queries/negative/invalid_dot.q
+++ ql/src/test/queries/negative/invalid_dot.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT src.value.member WHERE src.key < 100
diff --git ql/src/test/queries/negative/invalid_function_param2.q ql/src/test/queries/negative/invalid_function_param2.q
index 3543449b88..8212f9ffd0 100644
--- ql/src/test/queries/negative/invalid_function_param2.q
+++ ql/src/test/queries/negative/invalid_function_param2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT substr('1234', 'abc'), src.value WHERE src.key < 100
diff --git ql/src/test/queries/negative/invalid_index.q ql/src/test/queries/negative/invalid_index.q
index 146bc5dc9f..dc36804231 100644
--- ql/src/test/queries/negative/invalid_index.q
+++ ql/src/test/queries/negative/invalid_index.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT src.key[0], src.value
diff --git ql/src/test/queries/negative/invalid_select.q ql/src/test/queries/negative/invalid_select.q
index fd1298577b..8bb0982e36 100644
--- ql/src/test/queries/negative/invalid_select.q
+++ ql/src/test/queries/negative/invalid_select.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SELECT
   trim(trim(a))
   trim(b)
diff --git ql/src/test/queries/negative/missing_overwrite.q ql/src/test/queries/negative/missing_overwrite.q
index 1bfeee382e..578b5c6009 100644
--- ql/src/test/queries/negative/missing_overwrite.q
+++ ql/src/test/queries/negative/missing_overwrite.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT TABLE dest1 SELECT '1234', src.value WHERE src.key < 100
diff --git ql/src/test/queries/negative/nonkey_groupby.q ql/src/test/queries/negative/nonkey_groupby.q
index ad0f4415cb..d156a260b2 100644
--- ql/src/test/queries/negative/nonkey_groupby.q
+++ ql/src/test/queries/negative/nonkey_groupby.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234', src.value WHERE src.key < 100 group by src.key
diff --git ql/src/test/queries/negative/quoted_string.q ql/src/test/queries/negative/quoted_string.q
index 0252a9e11c..106b8e37d4 100644
--- ql/src/test/queries/negative/quoted_string.q
+++ ql/src/test/queries/negative/quoted_string.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234", src.value WHERE src.key < 100
diff --git ql/src/test/queries/negative/unknown_column1.q ql/src/test/queries/negative/unknown_column1.q
index 429cead63b..a55b75aa39 100644
--- ql/src/test/queries/negative/unknown_column1.q
+++ ql/src/test/queries/negative/unknown_column1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234', src.dummycol WHERE src.key < 100
diff --git ql/src/test/queries/negative/unknown_column2.q ql/src/test/queries/negative/unknown_column2.q
index 3767dc4e65..1af47af1a5 100644
--- ql/src/test/queries/negative/unknown_column2.q
+++ ql/src/test/queries/negative/unknown_column2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234', src.value WHERE src.dummykey < 100
diff --git ql/src/test/queries/negative/unknown_column3.q ql/src/test/queries/negative/unknown_column3.q
index 2fc5f490f1..ce71717f18 100644
--- ql/src/test/queries/negative/unknown_column3.q
+++ ql/src/test/queries/negative/unknown_column3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234', src.value WHERE src.key < 100 group by src.dummycol
diff --git ql/src/test/queries/negative/unknown_column4.q ql/src/test/queries/negative/unknown_column4.q
index 8ad8dd12e4..2bc7979402 100644
--- ql/src/test/queries/negative/unknown_column4.q
+++ ql/src/test/queries/negative/unknown_column4.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234', src.value WHERE src.key < 100 group by dummysrc.key
diff --git ql/src/test/queries/negative/unknown_column5.q ql/src/test/queries/negative/unknown_column5.q
index 766b0e5255..bcc82dd4ed 100644
--- ql/src/test/queries/negative/unknown_column5.q
+++ ql/src/test/queries/negative/unknown_column5.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234', src.value WHERE dummysrc.key < 100 group by src.key
diff --git ql/src/test/queries/negative/unknown_column6.q ql/src/test/queries/negative/unknown_column6.q
index bb76c28623..26a20d8a6d 100644
--- ql/src/test/queries/negative/unknown_column6.q
+++ ql/src/test/queries/negative/unknown_column6.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234', dummysrc.value WHERE src.key < 100 group by src.key
diff --git ql/src/test/queries/negative/unknown_function1.q ql/src/test/queries/negative/unknown_function1.q
index d8ff6325b9..9867cab05d 100644
--- ql/src/test/queries/negative/unknown_function1.q
+++ ql/src/test/queries/negative/unknown_function1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234', dummyfn(src.value, 10) WHERE src.key < 100
diff --git ql/src/test/queries/negative/unknown_function2.q ql/src/test/queries/negative/unknown_function2.q
index f7d255934d..ffffa1e242 100644
--- ql/src/test/queries/negative/unknown_function2.q
+++ ql/src/test/queries/negative/unknown_function2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234', src.value WHERE anotherdummyfn('abc', src.key) + 10 < 100
diff --git ql/src/test/queries/negative/unknown_function3.q ql/src/test/queries/negative/unknown_function3.q
index 87d4edc987..b2520771b8 100644
--- ql/src/test/queries/negative/unknown_function3.q
+++ ql/src/test/queries/negative/unknown_function3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234', src.value WHERE anotherdummyfn('abc', src.key) + 10 < 100 group by src.key
diff --git ql/src/test/queries/negative/unknown_function4.q ql/src/test/queries/negative/unknown_function4.q
index cfe70e4f2f..0e13f90387 100644
--- ql/src/test/queries/negative/unknown_function4.q
+++ ql/src/test/queries/negative/unknown_function4.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT '1234', dummyfn(src.key) WHERE src.key < 100 group by src.key
diff --git ql/src/test/queries/negative/unknown_table1.q ql/src/test/queries/negative/unknown_table1.q
index 585ef6d7f2..f1aa4ae15a 100644
--- ql/src/test/queries/negative/unknown_table1.q
+++ ql/src/test/queries/negative/unknown_table1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM dummySrc
 INSERT OVERWRITE TABLE dest1 SELECT '1234', src.value WHERE src.key < 100
diff --git ql/src/test/queries/negative/unknown_table2.q ql/src/test/queries/negative/unknown_table2.q
index 2c69c16be5..49ad972af6 100644
--- ql/src/test/queries/negative/unknown_table2.q
+++ ql/src/test/queries/negative/unknown_table2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dummyDest SELECT '1234', src.value WHERE src.key < 100
diff --git ql/src/test/queries/negative/wrong_distinct1.q ql/src/test/queries/negative/wrong_distinct1.q
index d92c3bb8df..1e966ad09e 100755
--- ql/src/test/queries/negative/wrong_distinct1.q
+++ ql/src/test/queries/negative/wrong_distinct1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT DISTINCT src.key, substr(src.value,4,1) GROUP BY src.key
diff --git ql/src/test/queries/negative/wrong_distinct2.q ql/src/test/queries/negative/wrong_distinct2.q
index 53fb550b3d..1c05e2181d 100755
--- ql/src/test/queries/negative/wrong_distinct2.q
+++ ql/src/test/queries/negative/wrong_distinct2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT src.key, DISTINCT substr(src.value,4,1) GROUP BY src.key
diff --git ql/src/test/queries/positive/case_sensitivity.q ql/src/test/queries/positive/case_sensitivity.q
index d7f7371507..83b86c700d 100644
--- ql/src/test/queries/positive/case_sensitivity.q
+++ ql/src/test/queries/positive/case_sensitivity.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src_thrift
 FROM SRC_THRIFT
 INSERT OVERWRITE TABLE dest1 SELECT src_Thrift.LINT[1], src_thrift.lintstring[0].MYSTRING where src_thrift.liNT[0] > 0
diff --git ql/src/test/queries/positive/cast1.q ql/src/test/queries/positive/cast1.q
index 6269c6a4e7..bf7dab3175 100644
--- ql/src/test/queries/positive/cast1.q
+++ ql/src/test/queries/positive/cast1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 SELECT 3 + 2, 3.0 + 2, 3 + 2.0, 3.0 + 2.0, 3 + CAST(2.0 AS INT), CAST(1 AS BOOLEAN), CAST(TRUE AS INT) WHERE src.key = 86
diff --git ql/src/test/queries/positive/groupby1.q ql/src/test/queries/positive/groupby1.q
index 96b29b05cc..e2f6a6bcde 100755
--- ql/src/test/queries/positive/groupby1.q
+++ ql/src/test/queries/positive/groupby1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT src.key, sum(substr(src.value,5)) GROUP BY src.key
diff --git ql/src/test/queries/positive/groupby2.q ql/src/test/queries/positive/groupby2.q
index d741eb60b6..f1b68d4032 100755
--- ql/src/test/queries/positive/groupby2.q
+++ ql/src/test/queries/positive/groupby2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 SELECT substr(src.key,1,1), count(DISTINCT substr(src.value,5)), concat(substr(src.key,1,1),sum(substr(src.value,5))) GROUP BY substr(src.key,1,1)
diff --git ql/src/test/queries/positive/groupby3.q ql/src/test/queries/positive/groupby3.q
index 03b1248a11..ce9a829e76 100755
--- ql/src/test/queries/positive/groupby3.q
+++ ql/src/test/queries/positive/groupby3.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 SELECT sum(substr(src.value,5)), avg(substr(src.value,5)), avg(DISTINCT substr(src.value,5)), max(substr(src.value,5)), min(substr(src.value,5))
diff --git ql/src/test/queries/positive/groupby4.q ql/src/test/queries/positive/groupby4.q
index 85271a9caf..384e15830b 100755
--- ql/src/test/queries/positive/groupby4.q
+++ ql/src/test/queries/positive/groupby4.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 SELECT substr(src.key,1,1) GROUP BY substr(src.key,1,1)
diff --git ql/src/test/queries/positive/groupby5.q ql/src/test/queries/positive/groupby5.q
index ebd65b3069..b837f0617e 100755
--- ql/src/test/queries/positive/groupby5.q
+++ ql/src/test/queries/positive/groupby5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 
 SELECT src.key, sum(substr(src.value,5)) 
 FROM src
diff --git ql/src/test/queries/positive/groupby6.q ql/src/test/queries/positive/groupby6.q
index 80654f2a9c..817c749d9f 100755
--- ql/src/test/queries/positive/groupby6.q
+++ ql/src/test/queries/positive/groupby6.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 SELECT DISTINCT substr(src.value,5,1)
diff --git ql/src/test/queries/positive/input1.q ql/src/test/queries/positive/input1.q
index fdd290d6b1..329df89bbb 100644
--- ql/src/test/queries/positive/input1.q
+++ ql/src/test/queries/positive/input1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT src.key, src.value WHERE src.key < 100
diff --git ql/src/test/queries/positive/input2.q ql/src/test/queries/positive/input2.q
index 4e1612ea97..8777d1708c 100644
--- ql/src/test/queries/positive/input2.q
+++ ql/src/test/queries/positive/input2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT src.* WHERE src.key < 100
 INSERT OVERWRITE TABLE dest2 SELECT src.key, src.value WHERE src.key >= 100 and src.key < 200
diff --git ql/src/test/queries/positive/input20.q ql/src/test/queries/positive/input20.q
index f30cf27017..09dd9fc03c 100644
--- ql/src/test/queries/positive/input20.q
+++ ql/src/test/queries/positive/input20.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM (
   FROM src
   MAP src.key % 2, src.key % 5
diff --git ql/src/test/queries/positive/input3.q ql/src/test/queries/positive/input3.q
index fc53e94d39..c0a41f53ee 100644
--- ql/src/test/queries/positive/input3.q
+++ ql/src/test/queries/positive/input3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest1 SELECT src.* WHERE src.key < 100
 INSERT OVERWRITE TABLE dest2 SELECT src.key, src.value WHERE src.key >= 100 and src.key < 200
diff --git ql/src/test/queries/positive/input4.q ql/src/test/queries/positive/input4.q
index 03e6de48fa..b1b448ea60 100644
--- ql/src/test/queries/positive/input4.q
+++ ql/src/test/queries/positive/input4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM (
   FROM src
   SELECT TRANSFORM(src.key, src.value)
diff --git ql/src/test/queries/positive/input5.q ql/src/test/queries/positive/input5.q
index a46abc7583..e1d0fedbcc 100644
--- ql/src/test/queries/positive/input5.q
+++ ql/src/test/queries/positive/input5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src_thrift
 FROM (
   FROM src_thrift
   SELECT TRANSFORM(src_thrift.lint, src_thrift.lintstring)
diff --git ql/src/test/queries/positive/input6.q ql/src/test/queries/positive/input6.q
index d6f25a935a..0a8e028772 100644
--- ql/src/test/queries/positive/input6.q
+++ ql/src/test/queries/positive/input6.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src1
 FROM src1
 INSERT OVERWRITE TABLE dest1 SELECT src1.key, src1.value WHERE src1.key is null
diff --git ql/src/test/queries/positive/input7.q ql/src/test/queries/positive/input7.q
index 33a82953c2..2474280913 100644
--- ql/src/test/queries/positive/input7.q
+++ ql/src/test/queries/positive/input7.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src1
 FROM src1
 INSERT OVERWRITE TABLE dest1 SELECT NULL, src1.key
diff --git ql/src/test/queries/positive/input8.q ql/src/test/queries/positive/input8.q
index 0843b9ba4e..021c508e61 100644
--- ql/src/test/queries/positive/input8.q
+++ ql/src/test/queries/positive/input8.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src1
 FROM src1 
 SELECT 4 + NULL, src1.key - NULL, NULL + NULL
diff --git ql/src/test/queries/positive/input9.q ql/src/test/queries/positive/input9.q
index 2892f0b2df..0d0ebd3584 100644
--- ql/src/test/queries/positive/input9.q
+++ ql/src/test/queries/positive/input9.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src1
 FROM src1
 INSERT OVERWRITE TABLE dest1 SELECT NULL, src1.key where NULL = NULL
diff --git ql/src/test/queries/positive/input_part1.q ql/src/test/queries/positive/input_part1.q
index d45d1cd0b4..5390ab8fa2 100644
--- ql/src/test/queries/positive/input_part1.q
+++ ql/src/test/queries/positive/input_part1.q
@@ -1,2 +1,3 @@
+--! qt:dataset:srcpart
 FROM srcpart
 SELECT srcpart.key, srcpart.value, srcpart.hr, srcpart.ds WHERE srcpart.key < 100 and srcpart.ds = '2008-04-08' and srcpart.hr = '12'
diff --git ql/src/test/queries/positive/input_testsequencefile.q ql/src/test/queries/positive/input_testsequencefile.q
index cf9a092417..2daa53aa16 100755
--- ql/src/test/queries/positive/input_testsequencefile.q
+++ ql/src/test/queries/positive/input_testsequencefile.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src
 FROM src
 INSERT OVERWRITE TABLE dest4_sequencefile SELECT src.key, src.value
diff --git ql/src/test/queries/positive/input_testxpath.q ql/src/test/queries/positive/input_testxpath.q
index 7699bff755..70c8e071fe 100755
--- ql/src/test/queries/positive/input_testxpath.q
+++ ql/src/test/queries/positive/input_testxpath.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src_thrift
 FROM src_thrift
 SELECT src_thrift.lint[1], src_thrift.lintstring[0].mystring, src_thrift.mstringstring['key_2']
diff --git ql/src/test/queries/positive/input_testxpath2.q ql/src/test/queries/positive/input_testxpath2.q
index 08abaf4fad..4aa4b586e1 100644
--- ql/src/test/queries/positive/input_testxpath2.q
+++ ql/src/test/queries/positive/input_testxpath2.q
@@ -1,2 +1,3 @@
+--! qt:dataset:src_thrift
 FROM src_thrift
 SELECT size(src_thrift.lint), size(src_thrift.lintstring), size(src_thrift.mstringstring) where src_thrift.lint IS NOT NULL AND NOT (src_thrift.mstringstring IS NULL)
diff --git ql/src/test/queries/positive/insert_column_mixcase.q ql/src/test/queries/positive/insert_column_mixcase.q
index 12671d2149..b2b90f215f 100644
--- ql/src/test/queries/positive/insert_column_mixcase.q
+++ ql/src/test/queries/positive/insert_column_mixcase.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 DROP TABLE IF EXISTS insert_camel_case;
 CREATE TABLE insert_camel_case (key int, value string);
 
diff --git ql/src/test/queries/positive/join1.q ql/src/test/queries/positive/join1.q
index 739c39dd8f..aea13b7329 100644
--- ql/src/test/queries/positive/join1.q
+++ ql/src/test/queries/positive/join1.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 FROM src src1 JOIN src src2 ON (src1.key = src2.key)
 INSERT OVERWRITE TABLE dest1 SELECT src1.key, src2.value
 
diff --git ql/src/test/queries/positive/join2.q ql/src/test/queries/positive/join2.q
index a02d87f09f..763f472669 100644
--- ql/src/test/queries/positive/join2.q
+++ ql/src/test/queries/positive/join2.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 FROM src src1 JOIN src src2 ON (src1.key = src2.key) JOIN src src3 ON (src1.key + src2.key = src3.key)
 INSERT OVERWRITE TABLE dest1 SELECT src1.key, src3.value
 
diff --git ql/src/test/queries/positive/join3.q ql/src/test/queries/positive/join3.q
index b57c9569d7..8e686557a1 100644
--- ql/src/test/queries/positive/join3.q
+++ ql/src/test/queries/positive/join3.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 FROM src src1 JOIN src src2 ON (src1.key = src2.key) JOIN src src3 ON (src1.key = src3.key)
 INSERT OVERWRITE TABLE dest1 SELECT src1.key, src3.value
 
diff --git ql/src/test/queries/positive/join4.q ql/src/test/queries/positive/join4.q
index 2e5967fb7d..d377616cf6 100644
--- ql/src/test/queries/positive/join4.q
+++ ql/src/test/queries/positive/join4.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 FROM (
  FROM 
   (
diff --git ql/src/test/queries/positive/join5.q ql/src/test/queries/positive/join5.q
index 63a38f554a..be322e8c43 100644
--- ql/src/test/queries/positive/join5.q
+++ ql/src/test/queries/positive/join5.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 FROM (
  FROM 
   (
diff --git ql/src/test/queries/positive/join6.q ql/src/test/queries/positive/join6.q
index 110451cf30..594d59b7e8 100644
--- ql/src/test/queries/positive/join6.q
+++ ql/src/test/queries/positive/join6.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 FROM (
  FROM 
   (
diff --git ql/src/test/queries/positive/join7.q ql/src/test/queries/positive/join7.q
index 65797b44a2..aa973e0354 100644
--- ql/src/test/queries/positive/join7.q
+++ ql/src/test/queries/positive/join7.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 FROM (
  FROM 
   (
diff --git ql/src/test/queries/positive/join8.q ql/src/test/queries/positive/join8.q
index d215b07a67..b29e6070bb 100644
--- ql/src/test/queries/positive/join8.q
+++ ql/src/test/queries/positive/join8.q
@@ -1,3 +1,5 @@
+--! qt:dataset:src1
+--! qt:dataset:src
 FROM (
  FROM 
   (
diff --git ql/src/test/queries/positive/sample1.q ql/src/test/queries/positive/sample1.q
index 3a168b999d..326557d7d6 100644
--- ql/src/test/queries/positive/sample1.q
+++ ql/src/test/queries/positive/sample1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcpart
 -- no input pruning, no sample filter
 SELECT s.*
 FROM srcpart TABLESAMPLE (BUCKET 1 OUT OF 1 ON rand()) s
diff --git ql/src/test/queries/positive/sample2.q ql/src/test/queries/positive/sample2.q
index b505b896fa..718b934e73 100644
--- ql/src/test/queries/positive/sample2.q
+++ ql/src/test/queries/positive/sample2.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 -- input pruning, no sample filter
 -- default table sample columns
 INSERT OVERWRITE TABLE dest1 SELECT s.* 
diff --git ql/src/test/queries/positive/sample3.q ql/src/test/queries/positive/sample3.q
index 42d5a2bbec..7e1bbae9b8 100644
--- ql/src/test/queries/positive/sample3.q
+++ ql/src/test/queries/positive/sample3.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 -- sample columns not same as bucket columns
 -- no input pruning, sample filter
 INSERT OVERWRITE TABLE dest1 SELECT s.* -- here's another test
diff --git ql/src/test/queries/positive/sample4.q ql/src/test/queries/positive/sample4.q
index 7b5ab03380..a65c99ac94 100644
--- ql/src/test/queries/positive/sample4.q
+++ ql/src/test/queries/positive/sample4.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 -- bucket column is the same as table sample
 -- No need for sample filter
 INSERT OVERWRITE TABLE dest1 SELECT s.*
diff --git ql/src/test/queries/positive/sample5.q ql/src/test/queries/positive/sample5.q
index b9b48fdc71..57ee1017b7 100644
--- ql/src/test/queries/positive/sample5.q
+++ ql/src/test/queries/positive/sample5.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 -- no input pruning, sample filter
 INSERT OVERWRITE TABLE dest1 SELECT s.* -- here's another test
 FROM srcbucket TABLESAMPLE (BUCKET 1 OUT OF 5 on key) s
diff --git ql/src/test/queries/positive/sample6.q ql/src/test/queries/positive/sample6.q
index 0ee026f0f3..1efa99cdb4 100644
--- ql/src/test/queries/positive/sample6.q
+++ ql/src/test/queries/positive/sample6.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 -- both input pruning and sample filter
 INSERT OVERWRITE TABLE dest1 SELECT s.* 
 FROM srcbucket TABLESAMPLE (BUCKET 1 OUT OF 4 on key) s
diff --git ql/src/test/queries/positive/sample7.q ql/src/test/queries/positive/sample7.q
index f17ce105c3..9809710746 100644
--- ql/src/test/queries/positive/sample7.q
+++ ql/src/test/queries/positive/sample7.q
@@ -1,3 +1,4 @@
+--! qt:dataset:srcbucket
 -- both input pruning and sample filter
 INSERT OVERWRITE TABLE dest1 SELECT s.* 
 FROM srcbucket TABLESAMPLE (BUCKET 1 OUT OF 4 on key) s
diff --git ql/src/test/queries/positive/subq.q ql/src/test/queries/positive/subq.q
index 6392dbcc43..4402e7d088 100644
--- ql/src/test/queries/positive/subq.q
+++ ql/src/test/queries/positive/subq.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM (
   FROM src select src.* WHERE src.key < 100
 ) unioninput
diff --git ql/src/test/queries/positive/udf1.q ql/src/test/queries/positive/udf1.q
index 2ecf46e742..edca67672e 100644
--- ql/src/test/queries/positive/udf1.q
+++ ql/src/test/queries/positive/udf1.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM src SELECT 'a' LIKE '%a%', 'b' LIKE '%a%', 'ab' LIKE '%a%', 'ab' LIKE '%a_',
   '%_' LIKE '\%\_', 'ab' LIKE '\%\_', 'ab' LIKE '_a%', 'ab' LIKE 'a',
   '' RLIKE '.*', 'a' RLIKE '[ab]', '' RLIKE '[ab]', 'hadoop' RLIKE '[a-z]*', 'hadoop' RLIKE 'o*',
diff --git ql/src/test/queries/positive/udf6.q ql/src/test/queries/positive/udf6.q
index fc7f99c9fc..a9b325feca 100644
--- ql/src/test/queries/positive/udf6.q
+++ ql/src/test/queries/positive/udf6.q
@@ -1 +1,2 @@
+--! qt:dataset:src
 FROM src SELECT CONCAT('a', 'b'), IF(TRUE, 1 ,2) + key
diff --git ql/src/test/queries/positive/udf_case.q ql/src/test/queries/positive/udf_case.q
index 0c86da2198..55cb4beeef 100644
--- ql/src/test/queries/positive/udf_case.q
+++ ql/src/test/queries/positive/udf_case.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SELECT CASE 1
         WHEN 1 THEN 2
         WHEN 3 THEN 4
diff --git ql/src/test/queries/positive/udf_when.q ql/src/test/queries/positive/udf_when.q
index 99ed09990b..91af4163ee 100644
--- ql/src/test/queries/positive/udf_when.q
+++ ql/src/test/queries/positive/udf_when.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 SELECT CASE
         WHEN 1=1 THEN 2
         WHEN 3=5 THEN 4
diff --git ql/src/test/queries/positive/union.q ql/src/test/queries/positive/union.q
index 6a6b9882ae..60b20efa5f 100644
--- ql/src/test/queries/positive/union.q
+++ ql/src/test/queries/positive/union.q
@@ -1,3 +1,4 @@
+--! qt:dataset:src
 FROM (
   FROM src select src.key, src.value WHERE src.key < 100
   UNION ALL
diff --git ql/src/test/results/clientnegative/clusterbyorderby.q.out ql/src/test/results/clientnegative/clusterbyorderby.q.out
index 5545809996..fa069a61d9 100644
--- ql/src/test/results/clientnegative/clusterbyorderby.q.out
+++ ql/src/test/results/clientnegative/clusterbyorderby.q.out
@@ -1 +1 @@
-FAILED: ParseException line 5:0 missing EOF at 'ORDER' near 'tkey'
+FAILED: ParseException line 6:0 missing EOF at 'ORDER' near 'tkey'
diff --git ql/src/test/results/clientnegative/clustern3.q.out ql/src/test/results/clientnegative/clustern3.q.out
index dd1c9e7d08..be92d8e1c1 100644
--- ql/src/test/results/clientnegative/clustern3.q.out
+++ ql/src/test/results/clientnegative/clustern3.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10002]: Line 2:52 Invalid column reference 'key'
+FAILED: SemanticException [Error 10002]: Line 3:52 Invalid column reference 'key'
diff --git ql/src/test/results/clientnegative/clustern4.q.out ql/src/test/results/clientnegative/clustern4.q.out
index 5c1c71fe5c..76a9c8dd4d 100644
--- ql/src/test/results/clientnegative/clustern4.q.out
+++ ql/src/test/results/clientnegative/clustern4.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10004]: Line 2:50 Invalid table alias or column reference 'key': (possible column names are: k1, x.value)
+FAILED: SemanticException [Error 10004]: Line 3:50 Invalid table alias or column reference 'key': (possible column names are: k1, x.value)
diff --git ql/src/test/results/clientnegative/groupby_key.q.out ql/src/test/results/clientnegative/groupby_key.q.out
index f5f0958b6b..d3101e898d 100644
--- ql/src/test/results/clientnegative/groupby_key.q.out
+++ ql/src/test/results/clientnegative/groupby_key.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10025]: Line 1:7 Expression not in GROUP BY key 'value'
+FAILED: SemanticException [Error 10025]: Line 2:7 Expression not in GROUP BY key 'value'
diff --git ql/src/test/results/clientnegative/input1.q.out ql/src/test/results/clientnegative/input1.q.out
index 1c1be7470a..8566a824a8 100644
--- ql/src/test/results/clientnegative/input1.q.out
+++ ql/src/test/results/clientnegative/input1.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10009]: Line 1:7 Invalid table alias 'a'
+FAILED: SemanticException [Error 10009]: Line 2:7 Invalid table alias 'a'
diff --git ql/src/test/results/clientnegative/input2.q.out ql/src/test/results/clientnegative/input2.q.out
index f7cdf6e8ff..5dba8a3651 100644
--- ql/src/test/results/clientnegative/input2.q.out
+++ ql/src/test/results/clientnegative/input2.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10004]: Line 1:7 Invalid table alias or column reference 'a': (possible column names are: key, value)
+FAILED: SemanticException [Error 10004]: Line 2:7 Invalid table alias or column reference 'a': (possible column names are: key, value)
diff --git ql/src/test/results/clientnegative/invalid_distinct2.q.out ql/src/test/results/clientnegative/invalid_distinct2.q.out
index c1c95a97c5..c08b1c350c 100644
--- ql/src/test/results/clientnegative/invalid_distinct2.q.out
+++ ql/src/test/results/clientnegative/invalid_distinct2.q.out
@@ -1 +1 @@
-FAILED: SemanticException 1:15 Distinct keyword is not support in current context. Error encountered near token 'value'
+FAILED: SemanticException 2:15 Distinct keyword is not support in current context. Error encountered near token 'value'
diff --git ql/src/test/results/clientnegative/join_alt_syntax_comma_on.q.out ql/src/test/results/clientnegative/join_alt_syntax_comma_on.q.out
index 364b6df1cb..f9a632785d 100644
--- ql/src/test/results/clientnegative/join_alt_syntax_comma_on.q.out
+++ ql/src/test/results/clientnegative/join_alt_syntax_comma_on.q.out
@@ -1 +1 @@
-FAILED: ParseException line 3:25 Failed to recognize predicate '<EOF>'. Failed rule: 'joinSource' in join source
+FAILED: ParseException line 4:25 Failed to recognize predicate '<EOF>'. Failed rule: 'joinSource' in join source
diff --git ql/src/test/results/clientnegative/lateral_view_join.q.out ql/src/test/results/clientnegative/lateral_view_join.q.out
index b96f18fc6a..3e4332edec 100644
--- ql/src/test/results/clientnegative/lateral_view_join.q.out
+++ ql/src/test/results/clientnegative/lateral_view_join.q.out
@@ -1 +1 @@
-FAILED: ParseException line 1:59 cannot recognize input near 'AS' 'myTable' 'JOIN' in table alias
+FAILED: ParseException line 2:59 cannot recognize input near 'AS' 'myTable' 'JOIN' in table alias
diff --git ql/src/test/results/clientnegative/nonkey_groupby.q.out ql/src/test/results/clientnegative/nonkey_groupby.q.out
index bbe928c727..eda09dcf45 100644
--- ql/src/test/results/clientnegative/nonkey_groupby.q.out
+++ ql/src/test/results/clientnegative/nonkey_groupby.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10025]: Line 1:15 Expression not in GROUP BY key 'key'
+FAILED: SemanticException [Error 10025]: Line 2:15 Expression not in GROUP BY key 'key'
diff --git ql/src/test/results/clientnegative/ptf_negative_AggrFuncsWithNoGBYNoPartDef.q.out ql/src/test/results/clientnegative/ptf_negative_AggrFuncsWithNoGBYNoPartDef.q.out
index 8aa512b747..a10cee9923 100644
--- ql/src/test/results/clientnegative/ptf_negative_AggrFuncsWithNoGBYNoPartDef.q.out
+++ ql/src/test/results/clientnegative/ptf_negative_AggrFuncsWithNoGBYNoPartDef.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10025]: Line 2:7 Expression not in GROUP BY key 'p_mfgr'
+FAILED: SemanticException [Error 10025]: Line 3:7 Expression not in GROUP BY key 'p_mfgr'
diff --git ql/src/test/results/clientnegative/ptf_negative_DistributeByOrderBy.q.out ql/src/test/results/clientnegative/ptf_negative_DistributeByOrderBy.q.out
index e8e8580d6a..ed24fe5344 100644
--- ql/src/test/results/clientnegative/ptf_negative_DistributeByOrderBy.q.out
+++ ql/src/test/results/clientnegative/ptf_negative_DistributeByOrderBy.q.out
@@ -1 +1 @@
-FAILED: ParseException line 3:3 cannot recognize input near 'sum' '(' 'p_retailprice' in expression specification
+FAILED: ParseException line 4:3 cannot recognize input near 'sum' '(' 'p_retailprice' in expression specification
diff --git ql/src/test/results/clientnegative/ptf_negative_DuplicateWindowAlias.q.out ql/src/test/results/clientnegative/ptf_negative_DuplicateWindowAlias.q.out
index 81e6b39882..f7c025605e 100644
--- ql/src/test/results/clientnegative/ptf_negative_DuplicateWindowAlias.q.out
+++ ql/src/test/results/clientnegative/ptf_negative_DuplicateWindowAlias.q.out
@@ -1 +1 @@
-FAILED: SemanticException 8:7 Duplicate definition of window w2 is not allowed. Error encountered near token 'w2'
+FAILED: SemanticException 9:7 Duplicate definition of window w2 is not allowed. Error encountered near token 'w2'
diff --git ql/src/test/results/clientnegative/ptf_negative_PartitionBySortBy.q.out ql/src/test/results/clientnegative/ptf_negative_PartitionBySortBy.q.out
index e8e8580d6a..ed24fe5344 100644
--- ql/src/test/results/clientnegative/ptf_negative_PartitionBySortBy.q.out
+++ ql/src/test/results/clientnegative/ptf_negative_PartitionBySortBy.q.out
@@ -1 +1 @@
-FAILED: ParseException line 3:3 cannot recognize input near 'sum' '(' 'p_retailprice' in expression specification
+FAILED: ParseException line 4:3 cannot recognize input near 'sum' '(' 'p_retailprice' in expression specification
diff --git ql/src/test/results/clientnegative/ptf_negative_WhereWithRankCond.q.out ql/src/test/results/clientnegative/ptf_negative_WhereWithRankCond.q.out
index 42f60e7c75..d7425e5172 100644
--- ql/src/test/results/clientnegative/ptf_negative_WhereWithRankCond.q.out
+++ ql/src/test/results/clientnegative/ptf_negative_WhereWithRankCond.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10004]: Line 5:6 Invalid table alias or column reference 'r': (possible column names are: p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment)
+FAILED: SemanticException [Error 10004]: Line 6:6 Invalid table alias or column reference 'r': (possible column names are: p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment)
diff --git ql/src/test/results/clientnegative/ptf_window_boundaries.q.out ql/src/test/results/clientnegative/ptf_window_boundaries.q.out
index c9c1c6d1aa..4d2cac0495 100644
--- ql/src/test/results/clientnegative/ptf_window_boundaries.q.out
+++ ql/src/test/results/clientnegative/ptf_window_boundaries.q.out
@@ -1 +1 @@
-FAILED: ParseException line 2:7 cannot recognize input near 'sum' '(' 'p_retailprice' in expression specification
+FAILED: ParseException line 3:7 cannot recognize input near 'sum' '(' 'p_retailprice' in expression specification
diff --git ql/src/test/results/clientnegative/ptf_window_boundaries2.q.out ql/src/test/results/clientnegative/ptf_window_boundaries2.q.out
index c9c1c6d1aa..4d2cac0495 100644
--- ql/src/test/results/clientnegative/ptf_window_boundaries2.q.out
+++ ql/src/test/results/clientnegative/ptf_window_boundaries2.q.out
@@ -1 +1 @@
-FAILED: ParseException line 2:7 cannot recognize input near 'sum' '(' 'p_retailprice' in expression specification
+FAILED: ParseException line 3:7 cannot recognize input near 'sum' '(' 'p_retailprice' in expression specification
diff --git ql/src/test/results/clientnegative/selectDistinctStarNeg_2.q.out ql/src/test/results/clientnegative/selectDistinctStarNeg_2.q.out
index b3322930d3..bafa21f083 100644
--- ql/src/test/results/clientnegative/selectDistinctStarNeg_2.q.out
+++ ql/src/test/results/clientnegative/selectDistinctStarNeg_2.q.out
@@ -1 +1 @@
-FAILED: SemanticException 3:36 SELECT DISTINCT and GROUP BY can not be in the same query. Error encountered near token 'key'
+FAILED: SemanticException 4:36 SELECT DISTINCT and GROUP BY can not be in the same query. Error encountered near token 'key'
diff --git ql/src/test/results/clientnegative/selectDistinctWithoutAggr.q.out ql/src/test/results/clientnegative/selectDistinctWithoutAggr.q.out
index 2f4bbde0f7..a6dbb6fef9 100644
--- ql/src/test/results/clientnegative/selectDistinctWithoutAggr.q.out
+++ ql/src/test/results/clientnegative/selectDistinctWithoutAggr.q.out
@@ -1 +1 @@
-FAILED: SemanticException 3:7 Distinct keyword is not support in current context. Error encountered near token 'key'
+FAILED: SemanticException 4:7 Distinct keyword is not support in current context. Error encountered near token 'key'
diff --git ql/src/test/results/clientnegative/select_star_suffix.q.out ql/src/test/results/clientnegative/select_star_suffix.q.out
index b873100d95..e750e07199 100644
--- ql/src/test/results/clientnegative/select_star_suffix.q.out
+++ ql/src/test/results/clientnegative/select_star_suffix.q.out
@@ -1 +1 @@
-FAILED: ParseException line 3:8 missing EOF at 'abcdef' near '*'
+FAILED: ParseException line 4:8 missing EOF at 'abcdef' near '*'
diff --git ql/src/test/results/clientnegative/semijoin1.q.out ql/src/test/results/clientnegative/semijoin1.q.out
index b7a3215c4d..8a7e0206ea 100644
--- ql/src/test/results/clientnegative/semijoin1.q.out
+++ ql/src/test/results/clientnegative/semijoin1.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10004]: Line 2:7 Invalid table alias or column reference 'b': (possible column names are: key, value)
+FAILED: SemanticException [Error 10004]: Line 3:7 Invalid table alias or column reference 'b': (possible column names are: key, value)
diff --git ql/src/test/results/clientnegative/semijoin2.q.out ql/src/test/results/clientnegative/semijoin2.q.out
index 731a39fbe3..002d68b6fd 100644
--- ql/src/test/results/clientnegative/semijoin2.q.out
+++ ql/src/test/results/clientnegative/semijoin2.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10004]: Line 2:70 Invalid table alias or column reference 'b': (possible column names are: key, value)
+FAILED: SemanticException [Error 10004]: Line 3:70 Invalid table alias or column reference 'b': (possible column names are: key, value)
diff --git ql/src/test/results/clientnegative/semijoin3.q.out ql/src/test/results/clientnegative/semijoin3.q.out
index 0e096f6238..6233cdb7a5 100644
--- ql/src/test/results/clientnegative/semijoin3.q.out
+++ ql/src/test/results/clientnegative/semijoin3.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10004]: Line 2:67 Invalid table alias or column reference 'b': (possible column names are: key, value)
+FAILED: SemanticException [Error 10004]: Line 3:67 Invalid table alias or column reference 'b': (possible column names are: key, value)
diff --git ql/src/test/results/clientnegative/semijoin4.q.out ql/src/test/results/clientnegative/semijoin4.q.out
index 75d9c8e11d..b1ef45e1f8 100644
--- ql/src/test/results/clientnegative/semijoin4.q.out
+++ ql/src/test/results/clientnegative/semijoin4.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10004]: Line 2:112 Invalid table alias or column reference 'b': (possible column names are: key, value)
+FAILED: SemanticException [Error 10004]: Line 3:112 Invalid table alias or column reference 'b': (possible column names are: key, value)
diff --git ql/src/test/results/clientnegative/subq_insert.q.out ql/src/test/results/clientnegative/subq_insert.q.out
index 620409b7fe..b69f42be9e 100644
--- ql/src/test/results/clientnegative/subq_insert.q.out
+++ ql/src/test/results/clientnegative/subq_insert.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10024]: Line 2:38 Cannot insert in a subquery. Inserting to table  'src1'
+FAILED: SemanticException [Error 10024]: Line 3:38 Cannot insert in a subquery. Inserting to table  'src1'
diff --git ql/src/test/results/clientnegative/subquery_corr_from.q.out ql/src/test/results/clientnegative/subquery_corr_from.q.out
index 663a8bb0ce..3af1a8a710 100644
--- ql/src/test/results/clientnegative/subquery_corr_from.q.out
+++ ql/src/test/results/clientnegative/subquery_corr_from.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10004]: Line 3:113 Invalid table alias or column reference 'po': (possible column names are: p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment)
+FAILED: SemanticException [Error 10004]: Line 4:113 Invalid table alias or column reference 'po': (possible column names are: p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment)
diff --git ql/src/test/results/clientnegative/subquery_corr_grandparent.q.out ql/src/test/results/clientnegative/subquery_corr_grandparent.q.out
index 4bc7c64ded..6f06fc71b0 100644
--- ql/src/test/results/clientnegative/subquery_corr_grandparent.q.out
+++ ql/src/test/results/clientnegative/subquery_corr_grandparent.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10004]: Line 4:95 Invalid table alias or column reference 'x': (possible column names are: p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment)
+FAILED: SemanticException [Error 10004]: Line 5:95 Invalid table alias or column reference 'x': (possible column names are: p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment)
diff --git ql/src/test/results/clientnegative/subquery_corr_select.q.out ql/src/test/results/clientnegative/subquery_corr_select.q.out
index 1f3dbb71f3..d95b9397cf 100644
--- ql/src/test/results/clientnegative/subquery_corr_select.q.out
+++ ql/src/test/results/clientnegative/subquery_corr_select.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10004]: Line 2:54 Invalid table alias or column reference 'po': (possible column names are: p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment)
+FAILED: SemanticException [Error 10004]: Line 3:54 Invalid table alias or column reference 'po': (possible column names are: p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment)
diff --git ql/src/test/results/clientnegative/subquery_exists_implicit_gby.q.out ql/src/test/results/clientnegative/subquery_exists_implicit_gby.q.out
index b650309c72..0d846bef23 100644
--- ql/src/test/results/clientnegative/subquery_exists_implicit_gby.q.out
+++ ql/src/test/results/clientnegative/subquery_exists_implicit_gby.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10250]: org.apache.hadoop.hive.ql.optimizer.calcite.CalciteSubquerySemanticException: Line 7:7 Invalid SubQuery expression ''val_9'': A predicate on EXISTS/NOT EXISTS SubQuery with implicit Aggregation(no Group By clause) cannot be rewritten.
+FAILED: SemanticException [Error 10250]: org.apache.hadoop.hive.ql.optimizer.calcite.CalciteSubquerySemanticException: Line 8:7 Invalid SubQuery expression ''val_9'': A predicate on EXISTS/NOT EXISTS SubQuery with implicit Aggregation(no Group By clause) cannot be rewritten.
diff --git ql/src/test/results/clientnegative/subquery_in_on.q.out ql/src/test/results/clientnegative/subquery_in_on.q.out
index 551f0ece7e..ee27eb908e 100644
--- ql/src/test/results/clientnegative/subquery_in_on.q.out
+++ ql/src/test/results/clientnegative/subquery_in_on.q.out
@@ -1 +1 @@
-FAILED: SemanticException org.apache.hadoop.hive.ql.optimizer.calcite.CalciteSubquerySemanticException: 2:77 Unsupported SubQuery Expression Currently SubQuery expressions are only allowed as Where and Having Clause predicates. Error encountered near token 'p2'
+FAILED: SemanticException org.apache.hadoop.hive.ql.optimizer.calcite.CalciteSubquerySemanticException: 3:77 Unsupported SubQuery Expression Currently SubQuery expressions are only allowed as Where and Having Clause predicates. Error encountered near token 'p2'
diff --git ql/src/test/results/clientnegative/subquery_notexists_implicit_gby.q.out ql/src/test/results/clientnegative/subquery_notexists_implicit_gby.q.out
index b650309c72..0d846bef23 100644
--- ql/src/test/results/clientnegative/subquery_notexists_implicit_gby.q.out
+++ ql/src/test/results/clientnegative/subquery_notexists_implicit_gby.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10250]: org.apache.hadoop.hive.ql.optimizer.calcite.CalciteSubquerySemanticException: Line 7:7 Invalid SubQuery expression ''val_9'': A predicate on EXISTS/NOT EXISTS SubQuery with implicit Aggregation(no Group By clause) cannot be rewritten.
+FAILED: SemanticException [Error 10250]: org.apache.hadoop.hive.ql.optimizer.calcite.CalciteSubquerySemanticException: Line 8:7 Invalid SubQuery expression ''val_9'': A predicate on EXISTS/NOT EXISTS SubQuery with implicit Aggregation(no Group By clause) cannot be rewritten.
diff --git ql/src/test/results/clientnegative/subquery_subquery_chain.q.out ql/src/test/results/clientnegative/subquery_subquery_chain.q.out
index e08b86cef0..45425089a4 100644
--- ql/src/test/results/clientnegative/subquery_subquery_chain.q.out
+++ ql/src/test/results/clientnegative/subquery_subquery_chain.q.out
@@ -1 +1 @@
-FAILED: ParseException line 5:39 missing EOF at 'in' near ')'
+FAILED: ParseException line 6:39 missing EOF at 'in' near ')'
diff --git ql/src/test/results/clientnegative/subquery_subquery_chain_exists.q.out ql/src/test/results/clientnegative/subquery_subquery_chain_exists.q.out
index 9b5212be98..9b957e61aa 100644
--- ql/src/test/results/clientnegative/subquery_subquery_chain_exists.q.out
+++ ql/src/test/results/clientnegative/subquery_subquery_chain_exists.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10249]: org.apache.hadoop.hive.ql.optimizer.calcite.CalciteSubquerySemanticException: Line 4:7 Unsupported SubQuery Expression 'key': IN/NOT IN subqueries are not allowed in LHS
+FAILED: SemanticException [Error 10249]: org.apache.hadoop.hive.ql.optimizer.calcite.CalciteSubquerySemanticException: Line 5:7 Unsupported SubQuery Expression 'key': IN/NOT IN subqueries are not allowed in LHS
diff --git ql/src/test/results/clientnegative/subquery_windowing_corr.q.out ql/src/test/results/clientnegative/subquery_windowing_corr.q.out
index daac4bb3c3..f42e064b32 100644
--- ql/src/test/results/clientnegative/subquery_windowing_corr.q.out
+++ ql/src/test/results/clientnegative/subquery_windowing_corr.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10249]: org.apache.hadoop.hive.ql.optimizer.calcite.CalciteSubquerySemanticException: Line 6:8 Unsupported SubQuery Expression 'p_brand': Correlated Sub Queries cannot contain Windowing clauses.
+FAILED: SemanticException [Error 10249]: org.apache.hadoop.hive.ql.optimizer.calcite.CalciteSubquerySemanticException: Line 7:8 Unsupported SubQuery Expression 'p_brand': Correlated Sub Queries cannot contain Windowing clauses.
diff --git ql/src/test/results/clientnegative/udaf_invalid_place.q.out ql/src/test/results/clientnegative/udaf_invalid_place.q.out
index 6727889eda..50880e5267 100644
--- ql/src/test/results/clientnegative/udaf_invalid_place.q.out
+++ ql/src/test/results/clientnegative/udaf_invalid_place.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10128]: Line 1:21 Not yet supported place for UDAF 'sum'
+FAILED: SemanticException [Error 10128]: Line 2:21 Not yet supported place for UDAF 'sum'
diff --git ql/src/test/results/clientnegative/udf_array_contains_wrong1.q.out ql/src/test/results/clientnegative/udf_array_contains_wrong1.q.out
index 00cb3ed275..ac37300613 100644
--- ql/src/test/results/clientnegative/udf_array_contains_wrong1.q.out
+++ ql/src/test/results/clientnegative/udf_array_contains_wrong1.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:22 Argument type mismatch '1': "array" expected at function ARRAY_CONTAINS, but "int" is found
+FAILED: SemanticException [Error 10016]: Line 3:22 Argument type mismatch '1': "array" expected at function ARRAY_CONTAINS, but "int" is found
diff --git ql/src/test/results/clientnegative/udf_array_contains_wrong2.q.out ql/src/test/results/clientnegative/udf_array_contains_wrong2.q.out
index 507d322d86..dafdd0ee27 100644
--- ql/src/test/results/clientnegative/udf_array_contains_wrong2.q.out
+++ ql/src/test/results/clientnegative/udf_array_contains_wrong2.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:38 Argument type mismatch ''2'': "int" expected at function ARRAY_CONTAINS, but "string" is found
+FAILED: SemanticException [Error 10016]: Line 3:38 Argument type mismatch ''2'': "int" expected at function ARRAY_CONTAINS, but "string" is found
diff --git ql/src/test/results/clientnegative/udf_coalesce.q.out ql/src/test/results/clientnegative/udf_coalesce.q.out
index 249a83dcfd..1adf1401a2 100644
--- ql/src/test/results/clientnegative/udf_coalesce.q.out
+++ ql/src/test/results/clientnegative/udf_coalesce.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 1:33 Argument type mismatch ''2.0'': The expressions after COALESCE should all have the same type: "array<string>" is expected but "string" is found
+FAILED: SemanticException [Error 10016]: Line 2:33 Argument type mismatch ''2.0'': The expressions after COALESCE should all have the same type: "array<string>" is expected but "string" is found
diff --git ql/src/test/results/clientnegative/udf_concat_ws_wrong1.q.out ql/src/test/results/clientnegative/udf_concat_ws_wrong1.q.out
index ea31b90826..fa6515cc01 100644
--- ql/src/test/results/clientnegative/udf_concat_ws_wrong1.q.out
+++ ql/src/test/results/clientnegative/udf_concat_ws_wrong1.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch ''-'': The function CONCAT_WS(separator,[string | array(string)]+) needs at least two arguments.
+FAILED: SemanticException [Error 10015]: Line 3:7 Arguments length mismatch ''-'': The function CONCAT_WS(separator,[string | array(string)]+) needs at least two arguments.
diff --git ql/src/test/results/clientnegative/udf_concat_ws_wrong2.q.out ql/src/test/results/clientnegative/udf_concat_ws_wrong2.q.out
index 24edb6a77e..394fca71af 100644
--- ql/src/test/results/clientnegative/udf_concat_ws_wrong2.q.out
+++ ql/src/test/results/clientnegative/udf_concat_ws_wrong2.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:23 Argument type mismatch '50': Argument 2 of function CONCAT_WS must be "string or array<string>", but "array<int>" was found.
+FAILED: SemanticException [Error 10016]: Line 3:23 Argument type mismatch '50': Argument 2 of function CONCAT_WS must be "string or array<string>", but "array<int>" was found.
diff --git ql/src/test/results/clientnegative/udf_concat_ws_wrong3.q.out ql/src/test/results/clientnegative/udf_concat_ws_wrong3.q.out
index 3c94167908..50e6454ef6 100644
--- ql/src/test/results/clientnegative/udf_concat_ws_wrong3.q.out
+++ ql/src/test/results/clientnegative/udf_concat_ws_wrong3.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:17 Argument type mismatch '1234': Argument 1 of function CONCAT_WS must be "string or array<string>", but "int" was found.
+FAILED: SemanticException [Error 10016]: Line 3:17 Argument type mismatch '1234': Argument 1 of function CONCAT_WS must be "string or array<string>", but "int" was found.
diff --git ql/src/test/results/clientnegative/udf_elt_wrong_args_len.q.out ql/src/test/results/clientnegative/udf_elt_wrong_args_len.q.out
index 53bb57956f..70b5b50218 100644
--- ql/src/test/results/clientnegative/udf_elt_wrong_args_len.q.out
+++ ql/src/test/results/clientnegative/udf_elt_wrong_args_len.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 1:7 Arguments length mismatch '3': The function ELT(N,str1,str2,str3,...) needs at least two arguments.
+FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch '3': The function ELT(N,str1,str2,str3,...) needs at least two arguments.
diff --git ql/src/test/results/clientnegative/udf_elt_wrong_type.q.out ql/src/test/results/clientnegative/udf_elt_wrong_type.q.out
index 33d7a53d76..c5164daa39 100644
--- ql/src/test/results/clientnegative/udf_elt_wrong_type.q.out
+++ ql/src/test/results/clientnegative/udf_elt_wrong_type.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:14 Argument type mismatch 'lintstring': The 2nd argument of function ELT is expected to a primitive type, but list is found
+FAILED: SemanticException [Error 10016]: Line 3:14 Argument type mismatch 'lintstring': The 2nd argument of function ELT is expected to a primitive type, but list is found
diff --git ql/src/test/results/clientnegative/udf_field_wrong_args_len.q.out ql/src/test/results/clientnegative/udf_field_wrong_args_len.q.out
index 5276b44552..81eef73d06 100644
--- ql/src/test/results/clientnegative/udf_field_wrong_args_len.q.out
+++ ql/src/test/results/clientnegative/udf_field_wrong_args_len.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10014]: Line 1:7 Wrong arguments '3': The function FIELD(str, str1, str2, ...) needs at least two arguments.
+FAILED: SemanticException [Error 10014]: Line 2:7 Wrong arguments '3': The function FIELD(str, str1, str2, ...) needs at least two arguments.
diff --git ql/src/test/results/clientnegative/udf_field_wrong_type.q.out ql/src/test/results/clientnegative/udf_field_wrong_type.q.out
index fa6533f848..f48574353f 100644
--- ql/src/test/results/clientnegative/udf_field_wrong_type.q.out
+++ ql/src/test/results/clientnegative/udf_field_wrong_type.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:16 Argument type mismatch 'lintstring': The 2nd argument of function FIELD is expected to a primitive type, but list is found
+FAILED: SemanticException [Error 10016]: Line 3:16 Argument type mismatch 'lintstring': The 2nd argument of function FIELD is expected to a primitive type, but list is found
diff --git ql/src/test/results/clientnegative/udf_format_number_wrong1.q.out ql/src/test/results/clientnegative/udf_format_number_wrong1.q.out
index 925c3c0916..ff68c7fadf 100644
--- ql/src/test/results/clientnegative/udf_format_number_wrong1.q.out
+++ ql/src/test/results/clientnegative/udf_format_number_wrong1.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch '12332.123456': The function FORMAT_NUMBER(X, D or F) needs two arguments.
+FAILED: SemanticException [Error 10015]: Line 3:7 Arguments length mismatch '12332.123456': The function FORMAT_NUMBER(X, D or F) needs two arguments.
diff --git ql/src/test/results/clientnegative/udf_format_number_wrong2.q.out ql/src/test/results/clientnegative/udf_format_number_wrong2.q.out
index d98854c18e..be49d434b3 100644
--- ql/src/test/results/clientnegative/udf_format_number_wrong2.q.out
+++ ql/src/test/results/clientnegative/udf_format_number_wrong2.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch '3': The function FORMAT_NUMBER(X, D or F) needs two arguments.
+FAILED: SemanticException [Error 10015]: Line 3:7 Arguments length mismatch '3': The function FORMAT_NUMBER(X, D or F) needs two arguments.
diff --git ql/src/test/results/clientnegative/udf_format_number_wrong3.q.out ql/src/test/results/clientnegative/udf_format_number_wrong3.q.out
index 25486e112f..d0f031c145 100644
--- ql/src/test/results/clientnegative/udf_format_number_wrong3.q.out
+++ ql/src/test/results/clientnegative/udf_format_number_wrong3.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10014]: Line 2:7 Wrong arguments '4': org.apache.hadoop.hive.ql.metadata.HiveException: Argument 2 of function FORMAT_NUMBER must be >= 0, but "-4" was found
+FAILED: SemanticException [Error 10014]: Line 3:7 Wrong arguments '4': org.apache.hadoop.hive.ql.metadata.HiveException: Argument 2 of function FORMAT_NUMBER must be >= 0, but "-4" was found
diff --git ql/src/test/results/clientnegative/udf_format_number_wrong4.q.out ql/src/test/results/clientnegative/udf_format_number_wrong4.q.out
index 1536041206..182686dbb6 100644
--- ql/src/test/results/clientnegative/udf_format_number_wrong4.q.out
+++ ql/src/test/results/clientnegative/udf_format_number_wrong4.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:35 Argument type mismatch '4.01': Argument 2 of function FORMAT_NUMBER must be "tinyint" or "smallint" or "int" or "bigint" or "string", but "decimal(3,2)" was found.
+FAILED: SemanticException [Error 10016]: Line 3:35 Argument type mismatch '4.01': Argument 2 of function FORMAT_NUMBER must be "tinyint" or "smallint" or "int" or "bigint" or "string", but "decimal(3,2)" was found.
diff --git ql/src/test/results/clientnegative/udf_format_number_wrong5.q.out ql/src/test/results/clientnegative/udf_format_number_wrong5.q.out
index 5db7248978..080dc15dae 100644
--- ql/src/test/results/clientnegative/udf_format_number_wrong5.q.out
+++ ql/src/test/results/clientnegative/udf_format_number_wrong5.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:21 Argument type mismatch '321.23': Argument 1 of function FORMAT_NUMBER must be "tinyint" or "smallint" or "int" or "bigint" or "double" or "float" or "decimal", but "array<decimal(11,6)>" was found.
+FAILED: SemanticException [Error 10016]: Line 3:21 Argument type mismatch '321.23': Argument 1 of function FORMAT_NUMBER must be "tinyint" or "smallint" or "int" or "bigint" or "double" or "float" or "decimal", but "array<decimal(11,6)>" was found.
diff --git ql/src/test/results/clientnegative/udf_format_number_wrong7.q.out ql/src/test/results/clientnegative/udf_format_number_wrong7.q.out
index 58704ace34..edc06a2e5c 100644
--- ql/src/test/results/clientnegative/udf_format_number_wrong7.q.out
+++ ql/src/test/results/clientnegative/udf_format_number_wrong7.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:21 Argument type mismatch '4': Argument 1 of function FORMAT_NUMBER must be "tinyint" or "smallint" or "int" or "bigint" or "double" or "float" or "decimal", but "string" was found.
+FAILED: SemanticException [Error 10016]: Line 3:21 Argument type mismatch '4': Argument 1 of function FORMAT_NUMBER must be "tinyint" or "smallint" or "int" or "bigint" or "double" or "float" or "decimal", but "string" was found.
diff --git ql/src/test/results/clientnegative/udf_greatest_error_1.q.out ql/src/test/results/clientnegative/udf_greatest_error_1.q.out
index 66a4476894..ce0faa87b3 100644
--- ql/src/test/results/clientnegative/udf_greatest_error_1.q.out
+++ ql/src/test/results/clientnegative/udf_greatest_error_1.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10014]: Line 1:7 Wrong arguments ''2.0'': greatest only takes primitive types, got array<string>
+FAILED: SemanticException [Error 10014]: Line 2:7 Wrong arguments ''2.0'': greatest only takes primitive types, got array<string>
diff --git ql/src/test/results/clientnegative/udf_greatest_error_2.q.out ql/src/test/results/clientnegative/udf_greatest_error_2.q.out
index 58b4c440e6..2418ecab49 100644
--- ql/src/test/results/clientnegative/udf_greatest_error_2.q.out
+++ ql/src/test/results/clientnegative/udf_greatest_error_2.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 1:7 Arguments length mismatch '1': greatest requires at least 2 arguments, got 1
+FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch '1': greatest requires at least 2 arguments, got 1
diff --git ql/src/test/results/clientnegative/udf_if_not_bool.q.out ql/src/test/results/clientnegative/udf_if_not_bool.q.out
index 6e3fafe3d9..1a0d6ae6e3 100644
--- ql/src/test/results/clientnegative/udf_if_not_bool.q.out
+++ ql/src/test/results/clientnegative/udf_if_not_bool.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 1:10 Argument type mismatch ''STRING'': The first argument of function IF should be "boolean", but "string" is found
+FAILED: SemanticException [Error 10016]: Line 2:10 Argument type mismatch ''STRING'': The first argument of function IF should be "boolean", but "string" is found
diff --git ql/src/test/results/clientnegative/udf_if_wrong_args_len.q.out ql/src/test/results/clientnegative/udf_if_wrong_args_len.q.out
index dfc6ff3460..463940b0c0 100644
--- ql/src/test/results/clientnegative/udf_if_wrong_args_len.q.out
+++ ql/src/test/results/clientnegative/udf_if_wrong_args_len.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 1:7 Arguments length mismatch '1': The function IF(expr1,expr2,expr3) accepts exactly 3 arguments.
+FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch '1': The function IF(expr1,expr2,expr3) accepts exactly 3 arguments.
diff --git ql/src/test/results/clientnegative/udf_instr_wrong_args_len.q.out ql/src/test/results/clientnegative/udf_instr_wrong_args_len.q.out
index 114746fe86..25df5a5de3 100644
--- ql/src/test/results/clientnegative/udf_instr_wrong_args_len.q.out
+++ ql/src/test/results/clientnegative/udf_instr_wrong_args_len.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 1:7 Arguments length mismatch ''abcd'': The function INSTR accepts exactly 2 arguments.
+FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch ''abcd'': The function INSTR accepts exactly 2 arguments.
diff --git ql/src/test/results/clientnegative/udf_instr_wrong_type.q.out ql/src/test/results/clientnegative/udf_instr_wrong_type.q.out
index 2b2f29fd65..9aa895b4eb 100644
--- ql/src/test/results/clientnegative/udf_instr_wrong_type.q.out
+++ ql/src/test/results/clientnegative/udf_instr_wrong_type.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:21 Argument type mismatch 'lintstring': The 2nd argument of function INSTR is expected to a primitive type, but list is found
+FAILED: SemanticException [Error 10016]: Line 3:21 Argument type mismatch 'lintstring': The 2nd argument of function INSTR is expected to a primitive type, but list is found
diff --git ql/src/test/results/clientnegative/udf_likeall_wrong1.q.out ql/src/test/results/clientnegative/udf_likeall_wrong1.q.out
index bf48229aed..a5af901dfd 100644
--- ql/src/test/results/clientnegative/udf_likeall_wrong1.q.out
+++ ql/src/test/results/clientnegative/udf_likeall_wrong1.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 1:7 Argument type mismatch '120': likeall only takes STRING_GROUP, VOID_GROUP types as 1st argument, got INT
+FAILED: SemanticException [Error 10016]: Line 2:7 Argument type mismatch '120': likeall only takes STRING_GROUP, VOID_GROUP types as 1st argument, got INT
diff --git ql/src/test/results/clientnegative/udf_likeany_wrong1.q.out ql/src/test/results/clientnegative/udf_likeany_wrong1.q.out
index 3b7f41de4e..82fa5e1ca6 100644
--- ql/src/test/results/clientnegative/udf_likeany_wrong1.q.out
+++ ql/src/test/results/clientnegative/udf_likeany_wrong1.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 1:7 Argument type mismatch '120': likeany only takes STRING_GROUP, VOID_GROUP types as 1st argument, got INT
+FAILED: SemanticException [Error 10016]: Line 2:7 Argument type mismatch '120': likeany only takes STRING_GROUP, VOID_GROUP types as 1st argument, got INT
diff --git ql/src/test/results/clientnegative/udf_locate_wrong_args_len.q.out ql/src/test/results/clientnegative/udf_locate_wrong_args_len.q.out
index b3e353b88c..356138035a 100644
--- ql/src/test/results/clientnegative/udf_locate_wrong_args_len.q.out
+++ ql/src/test/results/clientnegative/udf_locate_wrong_args_len.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 1:7 Arguments length mismatch '2': The function LOCATE accepts exactly 2 or 3 arguments.
+FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch '2': The function LOCATE accepts exactly 2 or 3 arguments.
diff --git ql/src/test/results/clientnegative/udf_locate_wrong_type.q.out ql/src/test/results/clientnegative/udf_locate_wrong_type.q.out
index eb724a576f..db41e2e534 100644
--- ql/src/test/results/clientnegative/udf_locate_wrong_type.q.out
+++ ql/src/test/results/clientnegative/udf_locate_wrong_type.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:22 Argument type mismatch 'lintstring': The 2nd argument of function LOCATE is expected to a primitive type, but list is found
+FAILED: SemanticException [Error 10016]: Line 3:22 Argument type mismatch 'lintstring': The 2nd argument of function LOCATE is expected to a primitive type, but list is found
diff --git ql/src/test/results/clientnegative/udf_map_keys_arg_num.q.out ql/src/test/results/clientnegative/udf_map_keys_arg_num.q.out
index 44fcc5807d..f551346923 100644
--- ql/src/test/results/clientnegative/udf_map_keys_arg_num.q.out
+++ ql/src/test/results/clientnegative/udf_map_keys_arg_num.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 1:7 Arguments length mismatch '"2"': The function MAP_KEYS only accepts one argument.
+FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch '"2"': The function MAP_KEYS only accepts one argument.
diff --git ql/src/test/results/clientnegative/udf_map_keys_arg_type.q.out ql/src/test/results/clientnegative/udf_map_keys_arg_type.q.out
index 5a190ce614..568aaf1c55 100644
--- ql/src/test/results/clientnegative/udf_map_keys_arg_type.q.out
+++ ql/src/test/results/clientnegative/udf_map_keys_arg_type.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 1:16 Argument type mismatch '3': "map" is expected at function MAP_KEYS, but "array<int>" is found
+FAILED: SemanticException [Error 10016]: Line 2:16 Argument type mismatch '3': "map" is expected at function MAP_KEYS, but "array<int>" is found
diff --git ql/src/test/results/clientnegative/udf_map_values_arg_num.q.out ql/src/test/results/clientnegative/udf_map_values_arg_num.q.out
index f5deee4d74..6320a2eed0 100644
--- ql/src/test/results/clientnegative/udf_map_values_arg_num.q.out
+++ ql/src/test/results/clientnegative/udf_map_values_arg_num.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 1:7 Arguments length mismatch '"2"': The function MAP_VALUES only accepts 1 argument.
+FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch '"2"': The function MAP_VALUES only accepts 1 argument.
diff --git ql/src/test/results/clientnegative/udf_map_values_arg_type.q.out ql/src/test/results/clientnegative/udf_map_values_arg_type.q.out
index affb070bab..0af2e65978 100644
--- ql/src/test/results/clientnegative/udf_map_values_arg_type.q.out
+++ ql/src/test/results/clientnegative/udf_map_values_arg_type.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 1:18 Argument type mismatch '4': "map" is expected at function MAP_VALUES, but "array<int>" is found
+FAILED: SemanticException [Error 10016]: Line 2:18 Argument type mismatch '4': "map" is expected at function MAP_VALUES, but "array<int>" is found
diff --git ql/src/test/results/clientnegative/udf_printf_wrong1.q.out ql/src/test/results/clientnegative/udf_printf_wrong1.q.out
index 41359d03f1..298b8a9e3a 100644
--- ql/src/test/results/clientnegative/udf_printf_wrong1.q.out
+++ ql/src/test/results/clientnegative/udf_printf_wrong1.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch 'printf': The function PRINTF(String format, Obj... args) needs at least one arguments.
+FAILED: SemanticException [Error 10015]: Line 3:7 Arguments length mismatch 'printf': The function PRINTF(String format, Obj... args) needs at least one arguments.
diff --git ql/src/test/results/clientnegative/udf_printf_wrong2.q.out ql/src/test/results/clientnegative/udf_printf_wrong2.q.out
index 6a7c8e6a9b..09e7b84f27 100644
--- ql/src/test/results/clientnegative/udf_printf_wrong2.q.out
+++ ql/src/test/results/clientnegative/udf_printf_wrong2.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:14 Argument type mismatch '100': Argument 1 of function PRINTF must be "string", but "int" was found.
+FAILED: SemanticException [Error 10016]: Line 3:14 Argument type mismatch '100': Argument 1 of function PRINTF must be "string", but "int" was found.
diff --git ql/src/test/results/clientnegative/udf_printf_wrong3.q.out ql/src/test/results/clientnegative/udf_printf_wrong3.q.out
index c020fda493..95063b922f 100644
--- ql/src/test/results/clientnegative/udf_printf_wrong3.q.out
+++ ql/src/test/results/clientnegative/udf_printf_wrong3.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:32 Argument type mismatch '"argument"': Argument 2 of function PRINTF must be "PRIMITIVE", but "array<string>" was found.
+FAILED: SemanticException [Error 10016]: Line 3:32 Argument type mismatch '"argument"': Argument 2 of function PRINTF must be "PRIMITIVE", but "array<string>" was found.
diff --git ql/src/test/results/clientnegative/udf_printf_wrong4.q.out ql/src/test/results/clientnegative/udf_printf_wrong4.q.out
index c020fda493..95063b922f 100644
--- ql/src/test/results/clientnegative/udf_printf_wrong4.q.out
+++ ql/src/test/results/clientnegative/udf_printf_wrong4.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:32 Argument type mismatch '"argument"': Argument 2 of function PRINTF must be "PRIMITIVE", but "array<string>" was found.
+FAILED: SemanticException [Error 10016]: Line 3:32 Argument type mismatch '"argument"': Argument 2 of function PRINTF must be "PRIMITIVE", but "array<string>" was found.
diff --git ql/src/test/results/clientnegative/udf_size_wrong_args_len.q.out ql/src/test/results/clientnegative/udf_size_wrong_args_len.q.out
index 45b41facab..805776e85e 100644
--- ql/src/test/results/clientnegative/udf_size_wrong_args_len.q.out
+++ ql/src/test/results/clientnegative/udf_size_wrong_args_len.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch 'lintstring': The function SIZE only accepts 1 argument.
+FAILED: SemanticException [Error 10015]: Line 3:7 Arguments length mismatch 'lintstring': The function SIZE only accepts 1 argument.
diff --git ql/src/test/results/clientnegative/udf_size_wrong_type.q.out ql/src/test/results/clientnegative/udf_size_wrong_type.q.out
index 41007013a2..a38ee31a8c 100644
--- ql/src/test/results/clientnegative/udf_size_wrong_type.q.out
+++ ql/src/test/results/clientnegative/udf_size_wrong_type.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 1:12 Argument type mismatch ''wrong type: string'': "map" or "list" is expected at function SIZE, but "string" is found
+FAILED: SemanticException [Error 10016]: Line 2:12 Argument type mismatch ''wrong type: string'': "map" or "list" is expected at function SIZE, but "string" is found
diff --git ql/src/test/results/clientnegative/udf_sort_array_by_wrong1.q.out ql/src/test/results/clientnegative/udf_sort_array_by_wrong1.q.out
index c7794d3215..5dd2eaecb5 100644
--- ql/src/test/results/clientnegative/udf_sort_array_by_wrong1.q.out
+++ ql/src/test/results/clientnegative/udf_sort_array_by_wrong1.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:21 Argument type mismatch '4': Element[s] of first argument array in function SORT_ARRAY_BY must be struct, but array<int> was found.
+FAILED: SemanticException [Error 10016]: Line 3:21 Argument type mismatch '4': Element[s] of first argument array in function SORT_ARRAY_BY must be struct, but array<int> was found.
diff --git ql/src/test/results/clientnegative/udf_sort_array_by_wrong2.q.out ql/src/test/results/clientnegative/udf_sort_array_by_wrong2.q.out
index 220ade5735..4ae738ed35 100644
--- ql/src/test/results/clientnegative/udf_sort_array_by_wrong2.q.out
+++ ql/src/test/results/clientnegative/udf_sort_array_by_wrong2.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch '70000': SORT_ARRAY_BY requires minimum 2 arguments, got 1
+FAILED: SemanticException [Error 10015]: Line 3:7 Arguments length mismatch '70000': SORT_ARRAY_BY requires minimum 2 arguments, got 1
diff --git ql/src/test/results/clientnegative/udf_sort_array_wrong1.q.out ql/src/test/results/clientnegative/udf_sort_array_wrong1.q.out
index 6d4b2abe69..883da96b21 100644
--- ql/src/test/results/clientnegative/udf_sort_array_wrong1.q.out
+++ ql/src/test/results/clientnegative/udf_sort_array_wrong1.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10015]: Line 2:7 Arguments length mismatch '3': sortarray requires 1 argument(s), got 2
+FAILED: SemanticException [Error 10015]: Line 3:7 Arguments length mismatch '3': sortarray requires 1 argument(s), got 2
diff --git ql/src/test/results/clientnegative/udf_sort_array_wrong2.q.out ql/src/test/results/clientnegative/udf_sort_array_wrong2.q.out
index 2123e2e272..39ebb0e757 100644
--- ql/src/test/results/clientnegative/udf_sort_array_wrong2.q.out
+++ ql/src/test/results/clientnegative/udf_sort_array_wrong2.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:18 Argument type mismatch '"Invalid"': Argument 1 of function SORT_ARRAY must be array, and element type should be either primitive, list, struct, or map, but string was found.
+FAILED: SemanticException [Error 10016]: Line 3:18 Argument type mismatch '"Invalid"': Argument 1 of function SORT_ARRAY must be array, and element type should be either primitive, list, struct, or map, but string was found.
diff --git ql/src/test/results/clientnegative/udf_sort_array_wrong3.q.out ql/src/test/results/clientnegative/udf_sort_array_wrong3.q.out
index 6745f4ff80..b78c645c0f 100644
--- ql/src/test/results/clientnegative/udf_sort_array_wrong3.q.out
+++ ql/src/test/results/clientnegative/udf_sort_array_wrong3.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 2:18 Argument type mismatch '"a"': Argument 1 of function SORT_ARRAY must be array, and element type should be either primitive, list, struct, or map, but array<uniontype<string>> was found.
+FAILED: SemanticException [Error 10016]: Line 3:18 Argument type mismatch '"a"': Argument 1 of function SORT_ARRAY must be array, and element type should be either primitive, list, struct, or map, but array<uniontype<string>> was found.
diff --git ql/src/test/results/clientnegative/udf_when_type_wrong.q.out ql/src/test/results/clientnegative/udf_when_type_wrong.q.out
index 7c7582d413..bc2851fead 100644
--- ql/src/test/results/clientnegative/udf_when_type_wrong.q.out
+++ ql/src/test/results/clientnegative/udf_when_type_wrong.q.out
@@ -1 +1 @@
-FAILED: SemanticException [Error 10016]: Line 3:13 Argument type mismatch ''1'': "boolean" is expected after WHEN, but "string" is found
+FAILED: SemanticException [Error 10016]: Line 4:13 Argument type mismatch ''1'': "boolean" is expected after WHEN, but "string" is found
diff --git ql/src/test/results/clientnegative/udtf_not_supported1.q.out ql/src/test/results/clientnegative/udtf_not_supported1.q.out
index 0dcb730045..c5ab5490c5 100644
--- ql/src/test/results/clientnegative/udtf_not_supported1.q.out
+++ ql/src/test/results/clientnegative/udtf_not_supported1.q.out
@@ -1 +1 @@
-FAILED: SemanticException 1:39 Only a single expression in the SELECT clause is supported with UDTF's. Error encountered near token 'key'
+FAILED: SemanticException 2:39 Only a single expression in the SELECT clause is supported with UDTF's. Error encountered near token 'key'
diff --git ql/src/test/results/clientnegative/unionClusterBy.q.out ql/src/test/results/clientnegative/unionClusterBy.q.out
index 7f014137dc..1f0dddcf2c 100644
--- ql/src/test/results/clientnegative/unionClusterBy.q.out
+++ ql/src/test/results/clientnegative/unionClusterBy.q.out
@@ -1 +1 @@
-FAILED: ParseException line 5:0 missing EOF at 'union' near 'key'
+FAILED: ParseException line 6:0 missing EOF at 'union' near 'key'
diff --git ql/src/test/results/clientnegative/unionDistributeBy.q.out ql/src/test/results/clientnegative/unionDistributeBy.q.out
index 7f014137dc..1f0dddcf2c 100644
--- ql/src/test/results/clientnegative/unionDistributeBy.q.out
+++ ql/src/test/results/clientnegative/unionDistributeBy.q.out
@@ -1 +1 @@
-FAILED: ParseException line 5:0 missing EOF at 'union' near 'key'
+FAILED: ParseException line 6:0 missing EOF at 'union' near 'key'
diff --git ql/src/test/results/clientnegative/unionLimit.q.out ql/src/test/results/clientnegative/unionLimit.q.out
index e8463b5288..61d91abe56 100644
--- ql/src/test/results/clientnegative/unionLimit.q.out
+++ ql/src/test/results/clientnegative/unionLimit.q.out
@@ -1 +1 @@
-FAILED: ParseException line 5:0 missing EOF at 'union' near '1'
+FAILED: ParseException line 6:0 missing EOF at 'union' near '1'
diff --git ql/src/test/results/clientnegative/unionOrderBy.q.out ql/src/test/results/clientnegative/unionOrderBy.q.out
index 7f014137dc..1f0dddcf2c 100644
--- ql/src/test/results/clientnegative/unionOrderBy.q.out
+++ ql/src/test/results/clientnegative/unionOrderBy.q.out
@@ -1 +1 @@
-FAILED: ParseException line 5:0 missing EOF at 'union' near 'key'
+FAILED: ParseException line 6:0 missing EOF at 'union' near 'key'
diff --git ql/src/test/results/clientnegative/unionSortBy.q.out ql/src/test/results/clientnegative/unionSortBy.q.out
index 7f014137dc..1f0dddcf2c 100644
--- ql/src/test/results/clientnegative/unionSortBy.q.out
+++ ql/src/test/results/clientnegative/unionSortBy.q.out
@@ -1 +1 @@
-FAILED: ParseException line 5:0 missing EOF at 'union' near 'key'
+FAILED: ParseException line 6:0 missing EOF at 'union' near 'key'
diff --git ql/src/test/results/clientnegative/uniquejoin.q.out ql/src/test/results/clientnegative/uniquejoin.q.out
index 57787704fe..f44b309e0f 100644
--- ql/src/test/results/clientnegative/uniquejoin.q.out
+++ ql/src/test/results/clientnegative/uniquejoin.q.out
@@ -1 +1 @@
-FAILED: ParseException line 1:16 cannot recognize input near '(' 'SELECT' 'src' in table name
+FAILED: ParseException line 2:16 cannot recognize input near '(' 'SELECT' 'src' in table name
diff --git ql/src/test/results/clientnegative/uniquejoin3.q.out ql/src/test/results/clientnegative/uniquejoin3.q.out
index e10a47bef2..319b0b3369 100644
--- ql/src/test/results/clientnegative/uniquejoin3.q.out
+++ ql/src/test/results/clientnegative/uniquejoin3.q.out
@@ -1 +1 @@
-FAILED: ParseException line 1:54 required (...)+ loop did not match anything at input 'JOIN' in statement
+FAILED: ParseException line 2:54 required (...)+ loop did not match anything at input 'JOIN' in statement
diff --git ql/src/test/results/clientpositive/add_part_exist.q.out ql/src/test/results/clientpositive/add_part_exist.q.out
index 78516643f8..e918ae23a9 100644
--- ql/src/test/results/clientpositive/add_part_exist.q.out
+++ ql/src/test/results/clientpositive/add_part_exist.q.out
@@ -78,28 +78,6 @@ POSTHOOK: query: DROP TABLE add_part_test
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@add_part_test
 POSTHOOK: Output: default@add_part_test
-PREHOOK: query: SHOW TABLES
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: CREATE DATABASE add_part_test_db
 PREHOOK: type: CREATEDATABASE
 PREHOOK: Output: database:add_part_test_db
diff --git ql/src/test/results/clientpositive/alter1.q.out ql/src/test/results/clientpositive/alter1.q.out
index 6c43860021..1fef592df4 100644
--- ql/src/test/results/clientpositive/alter1.q.out
+++ ql/src/test/results/clientpositive/alter1.q.out
@@ -185,28 +185,12 @@ POSTHOOK: query: DROP TABLE alter1
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@alter1
 POSTHOOK: Output: default@alter1
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "alter*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "alter*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: CREATE DATABASE alter1_db
 PREHOOK: type: CREATEDATABASE
 PREHOOK: Output: database:alter1_db
diff --git ql/src/test/results/clientpositive/alter2.q.out ql/src/test/results/clientpositive/alter2.q.out
index 4b94a058ff..b9d1b6170a 100644
--- ql/src/test/results/clientpositive/alter2.q.out
+++ ql/src/test/results/clientpositive/alter2.q.out
@@ -198,28 +198,12 @@ POSTHOOK: query: DROP TABLE alter2
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@alter2
 POSTHOOK: Output: default@alter2
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "alter*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "alter*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: CREATE DATABASE alter2_db
 PREHOOK: type: CREATEDATABASE
 PREHOOK: Output: database:alter2_db
@@ -232,10 +216,10 @@ PREHOOK: Input: database:alter2_db
 POSTHOOK: query: USE alter2_db
 POSTHOOK: type: SWITCHDATABASE
 POSTHOOK: Input: database:alter2_db
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "alter*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:alter2_db
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "alter*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:alter2_db
 PREHOOK: query: CREATE TABLE alter2(a int, b int) PARTITIONED BY (insertdate string)
diff --git ql/src/test/results/clientpositive/alter3.q.out ql/src/test/results/clientpositive/alter3.q.out
index 8395a79c94..7ceeb3af9c 100644
--- ql/src/test/results/clientpositive/alter3.q.out
+++ ql/src/test/results/clientpositive/alter3.q.out
@@ -174,28 +174,12 @@ POSTHOOK: query: DROP TABLE alter3_like_renamed
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@alter3_like_renamed
 POSTHOOK: Output: default@alter3_like_renamed
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "alter3_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "alter3_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: CREATE DATABASE alter3_db
 PREHOOK: type: CREATEDATABASE
 PREHOOK: Output: database:alter3_db
diff --git ql/src/test/results/clientpositive/alter4.q.out ql/src/test/results/clientpositive/alter4.q.out
index 292b26df2b..74e2dfb6b6 100644
--- ql/src/test/results/clientpositive/alter4.q.out
+++ ql/src/test/results/clientpositive/alter4.q.out
@@ -42,28 +42,12 @@ POSTHOOK: query: DROP TABLE set_bucketing_test
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@set_bucketing_test
 POSTHOOK: Output: default@set_bucketing_test
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "set_bucketing_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "set_bucketing_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: CREATE DATABASE alter4_db
 PREHOOK: type: CREATEDATABASE
 PREHOOK: Output: database:alter4_db
diff --git ql/src/test/results/clientpositive/alter5.q.out ql/src/test/results/clientpositive/alter5.q.out
index a0bafc7bcc..5874f9f55e 100644
--- ql/src/test/results/clientpositive/alter5.q.out
+++ ql/src/test/results/clientpositive/alter5.q.out
@@ -100,28 +100,12 @@ POSTHOOK: query: DROP TABLE alter5
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@alter5
 POSTHOOK: Output: default@alter5
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "alter*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "alter*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: CREATE DATABASE alter5_db
 PREHOOK: type: CREATEDATABASE
 PREHOOK: Output: database:alter5_db
diff --git ql/src/test/results/clientpositive/alter_rename_partition.q.out ql/src/test/results/clientpositive/alter_rename_partition.q.out
index df39ecc28e..fc7d750b3b 100644
--- ql/src/test/results/clientpositive/alter_rename_partition.q.out
+++ ql/src/test/results/clientpositive/alter_rename_partition.q.out
@@ -6,28 +6,6 @@ PREHOOK: query: DROP TABLE alter_rename_partition
 PREHOOK: type: DROPTABLE
 POSTHOOK: query: DROP TABLE alter_rename_partition
 POSTHOOK: type: DROPTABLE
-PREHOOK: query: SHOW TABLES
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: create table alter_rename_partition_src ( col1 string ) stored as textfile
 PREHOOK: type: CREATETABLE
 PREHOOK: Output: database:default
@@ -134,28 +112,6 @@ POSTHOOK: query: DROP TABLE alter_rename_partition
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@alter_rename_partition
 POSTHOOK: Output: default@alter_rename_partition
-PREHOOK: query: SHOW TABLES
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: CREATE DATABASE alter_rename_partition_db
 PREHOOK: type: CREATEDATABASE
 PREHOOK: Output: database:alter_rename_partition_db
diff --git ql/src/test/results/clientpositive/authorization_show_grant.q.out ql/src/test/results/clientpositive/authorization_show_grant.q.out
index b4dab7822f..37c6555618 100644
--- ql/src/test/results/clientpositive/authorization_show_grant.q.out
+++ ql/src/test/results/clientpositive/authorization_show_grant.q.out
@@ -103,70 +103,6 @@ PREHOOK: query: show grant
 PREHOOK: type: SHOW_GRANT
 POSTHOOK: query: show grant
 POSTHOOK: type: SHOW_GRANT
-default	alltypesorc			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	alltypesorc			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	alltypesorc			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	alltypesorc			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	alltypesparquet			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	alltypesparquet			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	alltypesparquet			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	alltypesparquet			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	cbo_t1			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	cbo_t1			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	cbo_t1			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	cbo_t1			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	cbo_t2			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	cbo_t2			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	cbo_t2			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	cbo_t2			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	cbo_t3			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	cbo_t3			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	cbo_t3			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	cbo_t3			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	lineitem			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	lineitem			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	lineitem			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	lineitem			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	part			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	part			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	part			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	part			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src1			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src1			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src1			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src1			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src_cbo			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src_cbo			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src_cbo			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src_cbo			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src_json			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src_json			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src_json			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src_json			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src_sequencefile			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src_sequencefile			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src_sequencefile			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src_sequencefile			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src_thrift			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src_thrift			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src_thrift			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src_thrift			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	srcbucket			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	srcbucket			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	srcbucket			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	srcbucket			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	srcbucket2			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	srcbucket2			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	srcbucket2			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	srcbucket2			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	srcpart			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	srcpart			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	srcpart			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	srcpart			hive_test_user	USER	UPDATE	true	-1	hive_test_user
 default	t1			rolea	ROLE	SELECT	false	-1	user1
 default	t1			user1	USER	DELETE	true	-1	hive_admin_user
 default	t1			user1	USER	INSERT	true	-1	hive_admin_user
diff --git ql/src/test/results/clientpositive/cte_5.q.out ql/src/test/results/clientpositive/cte_5.q.out
index e99f1e73c2..83d47c5de9 100644
--- ql/src/test/results/clientpositive/cte_5.q.out
+++ ql/src/test/results/clientpositive/cte_5.q.out
@@ -41,28 +41,6 @@ POSTHOOK: query: show tables in mydb
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:mydb
 q1
-PREHOOK: query: show tables
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: show tables
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 Warning: Shuffle Join JOIN[8][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product
 PREHOOK: query: explain
 with q1 as (select * from src where key= '5')
diff --git ql/src/test/results/clientpositive/cte_mat_4.q.out ql/src/test/results/clientpositive/cte_mat_4.q.out
index d2659a5ead..8900e27642 100644
--- ql/src/test/results/clientpositive/cte_mat_4.q.out
+++ ql/src/test/results/clientpositive/cte_mat_4.q.out
@@ -16,29 +16,13 @@ POSTHOOK: Input: _dummy_database@_dummy_table
 POSTHOOK: Output: default@q1
 POSTHOOK: Lineage: q1.a SCRIPT []
 POSTHOOK: Lineage: q1.b SCRIPT []
-PREHOOK: query: show tables
+PREHOOK: query: show tables like "q1"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: show tables
+POSTHOOK: query: show tables like "q1"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
 q1
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: explain
 with q1 as (select * from src where key= '5')
 select a.key
@@ -215,29 +199,13 @@ POSTHOOK: Output: default@q1
 5
 5
 5
-PREHOOK: query: show tables
+PREHOOK: query: show tables like "q1"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: show tables
+POSTHOOK: query: show tables like "q1"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
 q1
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: select * from q1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@q1
@@ -255,28 +223,12 @@ POSTHOOK: query: drop table q1
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@q1
 POSTHOOK: Output: default@q1
-PREHOOK: query: show tables
+PREHOOK: query: show tables like "q1"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: show tables
+POSTHOOK: query: show tables like "q1"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: explain
 with q1 as (select * from src where key= '5')
 select a.key
@@ -453,25 +405,9 @@ POSTHOOK: Output: default@q1
 5
 5
 5
-PREHOOK: query: show tables
+PREHOOK: query: show tables like "q1"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: show tables
+POSTHOOK: query: show tables like "q1"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
diff --git ql/src/test/results/clientpositive/cte_mat_5.q.out ql/src/test/results/clientpositive/cte_mat_5.q.out
index 09bd98a78f..09e8762764 100644
--- ql/src/test/results/clientpositive/cte_mat_5.q.out
+++ ql/src/test/results/clientpositive/cte_mat_5.q.out
@@ -41,28 +41,6 @@ POSTHOOK: query: show tables in mydb
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:mydb
 q1
-PREHOOK: query: show tables
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: show tables
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: explain
 with q1 as (select * from src where key= '5')
 select a.colnum
diff --git ql/src/test/results/clientpositive/describe_table_json.q.out ql/src/test/results/clientpositive/describe_table_json.q.out
index 3fc950f84a..3577529f48 100644
--- ql/src/test/results/clientpositive/describe_table_json.q.out
+++ ql/src/test/results/clientpositive/describe_table_json.q.out
@@ -6,23 +6,16 @@ POSTHOOK: query: CREATE TABLE IF NOT EXISTS jsontable (key INT, value STRING) CO
 POSTHOOK: type: CREATETABLE
 POSTHOOK: Output: database:default
 POSTHOOK: Output: default@jsontable
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE 'jsontab*'
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-{"tables":["alltypesorc","alltypesparquet","cbo_t1","cbo_t2","cbo_t3","jsontable","lineitem","part","src","src1","src_cbo","src_json","src_sequencefile","src_thrift","srcbucket","srcbucket2","srcpart"]}
-PREHOOK: query: SHOW TABLES LIKE 'json*'
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES LIKE 'json*'
+POSTHOOK: query: SHOW TABLES LIKE 'jsontab*'
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
 {"tables":["jsontable"]}
-PREHOOK: query: SHOW TABLE EXTENDED LIKE 'json*'
+PREHOOK: query: SHOW TABLE EXTENDED LIKE 'jsontab*'
 PREHOOK: type: SHOW_TABLESTATUS
-POSTHOOK: query: SHOW TABLE EXTENDED LIKE 'json*'
+POSTHOOK: query: SHOW TABLE EXTENDED LIKE 'jsontab*'
 POSTHOOK: type: SHOW_TABLESTATUS
 #### A masked pattern was here ####
 PREHOOK: query: ALTER TABLE jsontable SET TBLPROPERTIES ('id' = 'jsontable')
diff --git ql/src/test/results/clientpositive/encrypted/encryption_auto_purge_tables.q.out ql/src/test/results/clientpositive/encrypted/encryption_auto_purge_tables.q.out
index 129abc8d84..c802e1a6c8 100644
--- ql/src/test/results/clientpositive/encrypted/encryption_auto_purge_tables.q.out
+++ ql/src/test/results/clientpositive/encrypted/encryption_auto_purge_tables.q.out
@@ -18,14 +18,13 @@ POSTHOOK: Output: database:default
 POSTHOOK: Output: default@encrypted_table
 Encryption key created: 'key_128'
 Encryption zone created: '/build/ql/test/data/warehouse/default/encrypted_table' using key: 'key_128'
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "encrypted_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "encrypted_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
 encrypted_table
-src
 PREHOOK: query: ALTER TABLE encrypted_table SET TBLPROPERTIES("auto.purge"="true")
 PREHOOK: type: ALTERTABLE_PROPERTIES
 PREHOOK: Input: default@encrypted_table
@@ -140,13 +139,12 @@ POSTHOOK: query: DROP TABLE encrypted_ext_table
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@encrypted_ext_table
 POSTHOOK: Output: default@encrypted_ext_table
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "encrypted_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "encrypted_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-src
 PREHOOK: query: DROP TABLE IF EXISTS encrypted_table PURGE
 PREHOOK: type: DROPTABLE
 POSTHOOK: query: DROP TABLE IF EXISTS encrypted_table PURGE
diff --git ql/src/test/results/clientpositive/encrypted/encryption_drop_table.q.out ql/src/test/results/clientpositive/encrypted/encryption_drop_table.q.out
index 996c33a2f3..2de856aa2b 100644
--- ql/src/test/results/clientpositive/encrypted/encryption_drop_table.q.out
+++ ql/src/test/results/clientpositive/encrypted/encryption_drop_table.q.out
@@ -38,15 +38,14 @@ POSTHOOK: type: CREATETABLE
 POSTHOOK: Input: hdfs://### HDFS PATH ###
 POSTHOOK: Output: database:default
 POSTHOOK: Output: default@encrypted_ext_table
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "encrypted_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "encrypted_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
 encrypted_ext_table
 encrypted_table
-src
 PREHOOK: query: DROP TABLE default.encrypted_ext_table
 PREHOOK: type: DROPTABLE
 PREHOOK: Input: default@encrypted_ext_table
@@ -55,14 +54,13 @@ POSTHOOK: query: DROP TABLE default.encrypted_ext_table
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@encrypted_ext_table
 POSTHOOK: Output: default@encrypted_ext_table
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "encrypted_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "encrypted_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
 encrypted_table
-src
 PREHOOK: query: DROP TABLE default.encrypted_table
 PREHOOK: type: DROPTABLE
 PREHOOK: Input: default@encrypted_table
@@ -71,13 +69,12 @@ POSTHOOK: query: DROP TABLE default.encrypted_table
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@encrypted_table
 POSTHOOK: Output: default@encrypted_table
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "encrypted_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "encrypted_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-src
 PREHOOK: query: DROP TABLE IF EXISTS encrypted_table1
 PREHOOK: type: DROPTABLE
 POSTHOOK: query: DROP TABLE IF EXISTS encrypted_table1
@@ -145,22 +142,20 @@ POSTHOOK: query: DROP TABLE default.encrypted_table1
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@encrypted_table1
 POSTHOOK: Output: default@encrypted_table1
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "encrypted_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "encrypted_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-src
 FAILED: SemanticException [Error 10001]: Table not found encrypted_table1
 PREHOOK: query: DROP TABLE default.encrypted_table1
 PREHOOK: type: DROPTABLE
 POSTHOOK: query: DROP TABLE default.encrypted_table1
 POSTHOOK: type: DROPTABLE
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "encrypted_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "encrypted_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-src
diff --git ql/src/test/results/clientpositive/encrypted/encryption_move_tbl.q.out ql/src/test/results/clientpositive/encrypted/encryption_move_tbl.q.out
index 5af6d5d778..0f652b5795 100644
--- ql/src/test/results/clientpositive/encrypted/encryption_move_tbl.q.out
+++ ql/src/test/results/clientpositive/encrypted/encryption_move_tbl.q.out
@@ -38,14 +38,13 @@ POSTHOOK: Input: default@src
 POSTHOOK: Output: default@encrypted_table
 POSTHOOK: Lineage: encrypted_table.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
 POSTHOOK: Lineage: encrypted_table.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "encrypted_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "encrypted_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
 encrypted_table
-src
 PREHOOK: query: ANALYZE TABLE encrypted_table COMPUTE STATISTICS FOR COLUMNS
 PREHOOK: type: QUERY
 PREHOOK: Input: default@encrypted_table
diff --git ql/src/test/results/clientpositive/input2.q.out ql/src/test/results/clientpositive/input2.q.out
index 9693131230..a2702ee61c 100644
--- ql/src/test/results/clientpositive/input2.q.out
+++ ql/src/test/results/clientpositive/input2.q.out
@@ -39,28 +39,12 @@ POSTHOOK: Input: default@test2b
 a                   	array<int>          	                    
 b                   	double              	                    
 c                   	map<double,int>     	                    
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "TEST2*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "TEST2*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 test2a
 test2b
 PREHOOK: query: DROP TABLE TEST2a
@@ -71,28 +55,12 @@ POSTHOOK: query: DROP TABLE TEST2a
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@test2a
 POSTHOOK: Output: default@test2a
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "TEST2*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "TEST2*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 test2b
 PREHOOK: query: DROP TABLE TEST2b
 PREHOOK: type: DROPTABLE
@@ -103,10 +71,10 @@ POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@test2b
 POSTHOOK: Output: default@test2b
 PREHOOK: query: EXPLAIN
-SHOW TABLES
+SHOW TABLES LIKE "TEST2*"
 PREHOOK: type: SHOWTABLES
 POSTHOOK: query: EXPLAIN
-SHOW TABLES
+SHOW TABLES LIKE "TEST2*"
 POSTHOOK: type: SHOWTABLES
 STAGE DEPENDENCIES:
   Stage-0 is a root stage
@@ -117,6 +85,7 @@ STAGE PLANS:
       Show Table Operator:
         Show Tables
           database name: default
+          pattern: TEST2*
 
   Stage: Stage-1
     Fetch Operator
diff --git ql/src/test/results/clientpositive/input3.q.out ql/src/test/results/clientpositive/input3.q.out
index db30111775..b57717b08e 100644
--- ql/src/test/results/clientpositive/input3.q.out
+++ ql/src/test/results/clientpositive/input3.q.out
@@ -31,28 +31,12 @@ POSTHOOK: Input: default@test3b
 a                   	array<int>          	                    
 b                   	double              	                    
 c                   	map<double,int>     	                    
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "TEST3*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "TEST3*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 test3a
 test3b
 PREHOOK: query: EXPLAIN
@@ -126,28 +110,12 @@ a                   	array<int>
 b                   	double              	                    
 c                   	map<double,int>     	                    
 x                   	double              	                    
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "TEST3*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "TEST3*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 test3a
 test3c
 PREHOOK: query: EXPLAIN
diff --git ql/src/test/results/clientpositive/llap/cte_5.q.out ql/src/test/results/clientpositive/llap/cte_5.q.out
index 76ba82961f..a85fbeebce 100644
--- ql/src/test/results/clientpositive/llap/cte_5.q.out
+++ ql/src/test/results/clientpositive/llap/cte_5.q.out
@@ -41,28 +41,6 @@ POSTHOOK: query: show tables in mydb
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:mydb
 q1
-PREHOOK: query: show tables
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: show tables
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 Warning: Shuffle Join MERGEJOIN[13][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 with q1 as (select * from src where key= '5')
diff --git ql/src/test/results/clientpositive/llap/cte_mat_4.q.out ql/src/test/results/clientpositive/llap/cte_mat_4.q.out
index f3947ca6dd..087d9781bb 100644
--- ql/src/test/results/clientpositive/llap/cte_mat_4.q.out
+++ ql/src/test/results/clientpositive/llap/cte_mat_4.q.out
@@ -16,29 +16,13 @@ POSTHOOK: Input: _dummy_database@_dummy_table
 POSTHOOK: Output: default@q1
 POSTHOOK: Lineage: q1.a SCRIPT []
 POSTHOOK: Lineage: q1.b SCRIPT []
-PREHOOK: query: show tables
+PREHOOK: query: show tables like "q1"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: show tables
+POSTHOOK: query: show tables like "q1"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
 q1
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: explain
 with q1 as (select * from src where key= '5')
 select a.key
@@ -127,29 +111,13 @@ POSTHOOK: Output: default@q1
 5
 5
 5
-PREHOOK: query: show tables
+PREHOOK: query: show tables like "q1"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: show tables
+POSTHOOK: query: show tables like "q1"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
 q1
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: select * from q1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@q1
@@ -167,28 +135,12 @@ POSTHOOK: query: drop table q1
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@q1
 POSTHOOK: Output: default@q1
-PREHOOK: query: show tables
+PREHOOK: query: show tables like "q1"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: show tables
+POSTHOOK: query: show tables like "q1"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: explain
 with q1 as (select * from src where key= '5')
 select a.key
@@ -277,25 +229,9 @@ POSTHOOK: Output: default@q1
 5
 5
 5
-PREHOOK: query: show tables
+PREHOOK: query: show tables like "q1"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: show tables
+POSTHOOK: query: show tables like "q1"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
diff --git ql/src/test/results/clientpositive/llap/cte_mat_5.q.out ql/src/test/results/clientpositive/llap/cte_mat_5.q.out
index ccf73ac20d..7f0503bec7 100644
--- ql/src/test/results/clientpositive/llap/cte_mat_5.q.out
+++ ql/src/test/results/clientpositive/llap/cte_mat_5.q.out
@@ -41,28 +41,6 @@ POSTHOOK: query: show tables in mydb
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:mydb
 q1
-PREHOOK: query: show tables
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: show tables
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: explain
 with q1 as (select * from src where key= '5')
 select a.colnum
diff --git ql/src/test/results/clientpositive/llap/jdbc_handler.q.out ql/src/test/results/clientpositive/llap/jdbc_handler.q.out
index c5802742e5..58e0293b10 100644
--- ql/src/test/results/clientpositive/llap/jdbc_handler.q.out
+++ ql/src/test/results/clientpositive/llap/jdbc_handler.q.out
@@ -70,23 +70,8 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dbs
 POSTHOOK: Input: default@tables
 #### A masked pattern was here ####
-alltypesorc	default	MANAGED_TABLE
-alltypesparquet	default	MANAGED_TABLE
-cbo_t1	default	MANAGED_TABLE
-cbo_t2	default	MANAGED_TABLE
-cbo_t3	default	MANAGED_TABLE
 dbs	default	EXTERNAL_TABLE
-lineitem	default	MANAGED_TABLE
-part	default	MANAGED_TABLE
 src	default	MANAGED_TABLE
-src1	default	MANAGED_TABLE
-src_cbo	default	MANAGED_TABLE
-src_json	default	MANAGED_TABLE
-src_sequencefile	default	MANAGED_TABLE
-src_thrift	default	MANAGED_TABLE
-srcbucket	default	MANAGED_TABLE
-srcbucket2	default	MANAGED_TABLE
-srcpart	default	MANAGED_TABLE
 tables	default	EXTERNAL_TABLE
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
@@ -231,48 +216,9 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 POSTHOOK: Input: default@tables
 #### A masked pattern was here ####
-alltypesorc	2
-alltypesparquet	2
-cbo_t1	2
-cbo_t2	2
-cbo_t3	2
 dbs	2
-lineitem	2
-part	2
 src	2
-src1	2
-src_cbo	2
-src_json	2
-src_sequencefile	2
-src_thrift	2
-srcbucket	2
-srcbucket2	2
-srcpart	2
 tables	2
-PREHOOK: query: show tables
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: show tables
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-dbs
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
-tables
 PREHOOK: query: describe tables
 PREHOOK: type: DESCTABLE
 PREHOOK: Input: default@tables
diff --git ql/src/test/results/clientpositive/llap/resourceplan.q.out ql/src/test/results/clientpositive/llap/resourceplan.q.out
index 96ed8c67c5..68832e0b5d 100644
--- ql/src/test/results/clientpositive/llap/resourceplan.q.out
+++ ql/src/test/results/clientpositive/llap/resourceplan.q.out
@@ -2,70 +2,6 @@ PREHOOK: query: show grant user hive_test_user
 PREHOOK: type: SHOW_GRANT
 POSTHOOK: query: show grant user hive_test_user
 POSTHOOK: type: SHOW_GRANT
-default	alltypesorc			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	alltypesorc			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	alltypesorc			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	alltypesorc			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	alltypesparquet			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	alltypesparquet			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	alltypesparquet			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	alltypesparquet			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	cbo_t1			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	cbo_t1			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	cbo_t1			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	cbo_t1			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	cbo_t2			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	cbo_t2			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	cbo_t2			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	cbo_t2			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	cbo_t3			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	cbo_t3			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	cbo_t3			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	cbo_t3			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	lineitem			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	lineitem			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	lineitem			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	lineitem			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	part			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	part			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	part			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	part			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src1			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src1			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src1			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src1			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src_cbo			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src_cbo			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src_cbo			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src_cbo			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src_json			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src_json			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src_json			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src_json			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src_sequencefile			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src_sequencefile			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src_sequencefile			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src_sequencefile			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	src_thrift			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	src_thrift			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	src_thrift			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	src_thrift			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	srcbucket			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	srcbucket			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	srcbucket			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	srcbucket			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	srcbucket2			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	srcbucket2			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	srcbucket2			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	srcbucket2			hive_test_user	USER	UPDATE	true	-1	hive_test_user
-default	srcpart			hive_test_user	USER	DELETE	true	-1	hive_test_user
-default	srcpart			hive_test_user	USER	INSERT	true	-1	hive_test_user
-default	srcpart			hive_test_user	USER	SELECT	true	-1	hive_test_user
-default	srcpart			hive_test_user	USER	UPDATE	true	-1	hive_test_user
 PREHOOK: query: DROP DATABASE IF EXISTS SYS CASCADE
 PREHOOK: type: DROPDATABASE
 POSTHOOK: query: DROP DATABASE IF EXISTS SYS CASCADE
diff --git ql/src/test/results/clientpositive/llap/temp_table.q.out ql/src/test/results/clientpositive/llap/temp_table.q.out
index b04c643697..de0fef2aca 100644
--- ql/src/test/results/clientpositive/llap/temp_table.q.out
+++ ql/src/test/results/clientpositive/llap/temp_table.q.out
@@ -395,32 +395,6 @@ POSTHOOK: Input: default@bay
 103	val_103
 104	val_104
 104	val_104
-PREHOOK: query: SHOW TABLES
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-bar
-bay
-baz
-cbo_t1
-cbo_t2
-cbo_t3
-foo
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: CREATE DATABASE two
 PREHOOK: type: CREATEDATABASE
 PREHOOK: Output: database:two
diff --git ql/src/test/results/clientpositive/rename_column.q.out ql/src/test/results/clientpositive/rename_column.q.out
index 6418ce2d55..43abc7f72a 100644
--- ql/src/test/results/clientpositive/rename_column.q.out
+++ ql/src/test/results/clientpositive/rename_column.q.out
@@ -142,28 +142,12 @@ POSTHOOK: query: DROP TABLE kv_rename_test
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@kv_rename_test
 POSTHOOK: Output: default@kv_rename_test
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "kv_rename_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "kv_rename_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: CREATE DATABASE kv_rename_test_db
 PREHOOK: type: CREATEDATABASE
 PREHOOK: Output: database:kv_rename_test_db
@@ -320,9 +304,9 @@ POSTHOOK: query: DROP TABLE kv_rename_test
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: kv_rename_test_db@kv_rename_test
 POSTHOOK: Output: kv_rename_test_db@kv_rename_test
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "kv_rename_*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:kv_rename_test_db
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "kv_rename_*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:kv_rename_test_db
diff --git ql/src/test/results/clientpositive/show_tables.q.out ql/src/test/results/clientpositive/show_tables.q.out
index c498ab39dc..5cdecb58e0 100644
--- ql/src/test/results/clientpositive/show_tables.q.out
+++ ql/src/test/results/clientpositive/show_tables.q.out
@@ -127,30 +127,6 @@ POSTHOOK: Input: database:test_db
 bar
 baz
 foo
-PREHOOK: query: SHOW TABLES FROM default
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES FROM default
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-shtb_test1
-shtb_test2
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: SHOW TABLES IN test_db
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:test_db
@@ -160,30 +136,6 @@ POSTHOOK: Input: database:test_db
 bar
 baz
 foo
-PREHOOK: query: SHOW TABLES IN default
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES IN default
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-shtb_test1
-shtb_test2
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: SHOW TABLES IN test_db "test*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:test_db
diff --git ql/src/test/results/clientpositive/spark/temp_table.q.out ql/src/test/results/clientpositive/spark/temp_table.q.out
index 71fa11d9b8..ff0854691f 100644
--- ql/src/test/results/clientpositive/spark/temp_table.q.out
+++ ql/src/test/results/clientpositive/spark/temp_table.q.out
@@ -369,32 +369,6 @@ POSTHOOK: Input: default@bay
 103	val_103
 104	val_104
 104	val_104
-PREHOOK: query: SHOW TABLES
-PREHOOK: type: SHOWTABLES
-PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
-POSTHOOK: type: SHOWTABLES
-POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-bar
-bay
-baz
-cbo_t1
-cbo_t2
-cbo_t3
-foo
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 PREHOOK: query: CREATE DATABASE two
 PREHOOK: type: CREATEDATABASE
 PREHOOK: Output: database:two
diff --git ql/src/test/results/clientpositive/temp_table_truncate.q.out ql/src/test/results/clientpositive/temp_table_truncate.q.out
index 23084cc92a..eb491a43cd 100644
--- ql/src/test/results/clientpositive/temp_table_truncate.q.out
+++ ql/src/test/results/clientpositive/temp_table_truncate.q.out
@@ -44,28 +44,12 @@ key                 	string
 value               	string              	                    
 ds                  	string              	                    
 hr                  	string              	                    
-PREHOOK: query: SHOW TABLES
+PREHOOK: query: SHOW TABLES LIKE "tmp_src*"
 PREHOOK: type: SHOWTABLES
 PREHOOK: Input: database:default
-POSTHOOK: query: SHOW TABLES
+POSTHOOK: query: SHOW TABLES LIKE "tmp_src*"
 POSTHOOK: type: SHOWTABLES
 POSTHOOK: Input: database:default
-alltypesorc
-alltypesparquet
-cbo_t1
-cbo_t2
-cbo_t3
-lineitem
-part
-src
-src1
-src_cbo
-src_json
-src_sequencefile
-src_thrift
-srcbucket
-srcbucket2
-srcpart
 tmp_src
 tmp_srcpart
 PREHOOK: query: SELECT count(*) FROM tmp_src
diff --git ql/src/test/results/compiler/errors/duplicate_alias.q.out ql/src/test/results/compiler/errors/duplicate_alias.q.out
index c0ed623e3a..ea9de4b0de 100644
--- ql/src/test/results/compiler/errors/duplicate_alias.q.out
+++ ql/src/test/results/compiler/errors/duplicate_alias.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 1:20 Ambiguous table alias 'a'
\ No newline at end of file
+Line 2:20 Ambiguous table alias 'a'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/garbage.q.out ql/src/test/results/compiler/errors/garbage.q.out
index fdca829737..1f70a5f881 100644
--- ql/src/test/results/compiler/errors/garbage.q.out
+++ ql/src/test/results/compiler/errors/garbage.q.out
@@ -1 +1 @@
-Parse Error: line 1:0 cannot recognize input near 'this' 'is' 'totally'
\ No newline at end of file
+Parse Error: line 2:0 cannot recognize input near 'this' 'is' 'totally'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/insert_wrong_number_columns.q.out ql/src/test/results/compiler/errors/insert_wrong_number_columns.q.out
index 1bf1354bc1..e54bbb04fc 100644
--- ql/src/test/results/compiler/errors/insert_wrong_number_columns.q.out
+++ ql/src/test/results/compiler/errors/insert_wrong_number_columns.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:23 Cannot insert into target table because column number/types are different 'dest1': Table insclause-0 has 2 columns, but query has 3 columns.
\ No newline at end of file
+Line 3:23 Cannot insert into target table because column number/types are different 'dest1': Table insclause-0 has 2 columns, but query has 3 columns.
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/invalid_dot.q.out ql/src/test/results/compiler/errors/invalid_dot.q.out
index df24ac692f..e197d03a45 100644
--- ql/src/test/results/compiler/errors/invalid_dot.q.out
+++ ql/src/test/results/compiler/errors/invalid_dot.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:36 . Operator is only supported on struct or list of struct types 'member'
\ No newline at end of file
+Line 3:36 . Operator is only supported on struct or list of struct types 'member'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/invalid_function_param2.q.out ql/src/test/results/compiler/errors/invalid_function_param2.q.out
index 889b71c037..60606f7a67 100644
--- ql/src/test/results/compiler/errors/invalid_function_param2.q.out
+++ ql/src/test/results/compiler/errors/invalid_function_param2.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:36 Wrong arguments ''abc'': No matching method for class org.apache.hadoop.hive.ql.udf.UDFSubstr with (string, string). Possible choices: _FUNC_(binary, int)  _FUNC_(binary, int, int)  _FUNC_(string, int)  _FUNC_(string, int, int)  
\ No newline at end of file
+Line 3:36 Wrong arguments ''abc'': No matching method for class org.apache.hadoop.hive.ql.udf.UDFSubstr with (string, string). Possible choices: _FUNC_(binary, int)  _FUNC_(binary, int, int)  _FUNC_(string, int)  _FUNC_(string, int, int)  
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/invalid_index.q.out ql/src/test/results/compiler/errors/invalid_index.q.out
index e1909b94e7..983a531e62 100644
--- ql/src/test/results/compiler/errors/invalid_index.q.out
+++ ql/src/test/results/compiler/errors/invalid_index.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:36 [] not valid on non-collection types '0': string
\ No newline at end of file
+Line 3:36 [] not valid on non-collection types '0': string
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/invalid_select.q.out ql/src/test/results/compiler/errors/invalid_select.q.out
index 9e468d7bfd..31ee0944dd 100644
--- ql/src/test/results/compiler/errors/invalid_select.q.out
+++ ql/src/test/results/compiler/errors/invalid_select.q.out
@@ -1 +1 @@
-Parse Error: line 3:6 missing EOF at '(' near 'trim'
\ No newline at end of file
+Parse Error: line 4:6 missing EOF at '(' near 'trim'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/missing_overwrite.q.out ql/src/test/results/compiler/errors/missing_overwrite.q.out
index 7d3a201f11..361d4f9621 100644
--- ql/src/test/results/compiler/errors/missing_overwrite.q.out
+++ ql/src/test/results/compiler/errors/missing_overwrite.q.out
@@ -1 +1 @@
-Parse Error: line 2:7 cannot recognize input near 'INSERT' 'TABLE' 'dest1' in insert clause
\ No newline at end of file
+Parse Error: line 3:7 cannot recognize input near 'INSERT' 'TABLE' 'dest1' in insert clause
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/nonkey_groupby.q.out ql/src/test/results/compiler/errors/nonkey_groupby.q.out
index a13d45dc0b..d828f35008 100644
--- ql/src/test/results/compiler/errors/nonkey_groupby.q.out
+++ ql/src/test/results/compiler/errors/nonkey_groupby.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:44 Expression not in GROUP BY key 'value'
\ No newline at end of file
+Line 3:44 Expression not in GROUP BY key 'value'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/quoted_string.q.out ql/src/test/results/compiler/errors/quoted_string.q.out
index 421540bdcc..7e007c8268 100644
--- ql/src/test/results/compiler/errors/quoted_string.q.out
+++ ql/src/test/results/compiler/errors/quoted_string.q.out
@@ -1,2 +1,2 @@
-Parse Error: line 3:0 character '<EOF>' not supported here
-line 3:0 character '<EOF>' not supported here
\ No newline at end of file
+Parse Error: line 4:0 character '<EOF>' not supported here
+line 4:0 character '<EOF>' not supported here
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/unknown_column1.q.out ql/src/test/results/compiler/errors/unknown_column1.q.out
index 933f07954c..d0e94a59c2 100644
--- ql/src/test/results/compiler/errors/unknown_column1.q.out
+++ ql/src/test/results/compiler/errors/unknown_column1.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:48 Invalid column reference 'dummycol'
\ No newline at end of file
+Line 3:48 Invalid column reference 'dummycol'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/unknown_column2.q.out ql/src/test/results/compiler/errors/unknown_column2.q.out
index b598b879c6..2fe85ee0b1 100644
--- ql/src/test/results/compiler/errors/unknown_column2.q.out
+++ ql/src/test/results/compiler/errors/unknown_column2.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:64 Invalid column reference 'dummykey'
\ No newline at end of file
+Line 3:64 Invalid column reference 'dummykey'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/unknown_column3.q.out ql/src/test/results/compiler/errors/unknown_column3.q.out
index adbfdd9233..dbfc43e270 100644
--- ql/src/test/results/compiler/errors/unknown_column3.q.out
+++ ql/src/test/results/compiler/errors/unknown_column3.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:87 Invalid column reference 'dummycol'
\ No newline at end of file
+Line 3:87 Invalid column reference 'dummycol'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/unknown_column4.q.out ql/src/test/results/compiler/errors/unknown_column4.q.out
index 8ce128589e..88ca495f06 100644
--- ql/src/test/results/compiler/errors/unknown_column4.q.out
+++ ql/src/test/results/compiler/errors/unknown_column4.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:83 Invalid table alias or column reference 'dummysrc': (possible column names are: key, value)
\ No newline at end of file
+Line 3:83 Invalid table alias or column reference 'dummysrc': (possible column names are: key, value)
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/unknown_column5.q.out ql/src/test/results/compiler/errors/unknown_column5.q.out
index ea68e21fe8..26b1558326 100644
--- ql/src/test/results/compiler/errors/unknown_column5.q.out
+++ ql/src/test/results/compiler/errors/unknown_column5.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:60 Invalid table alias or column reference 'dummysrc': (possible column names are: key, value)
\ No newline at end of file
+Line 3:60 Invalid table alias or column reference 'dummysrc': (possible column names are: key, value)
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/unknown_column6.q.out ql/src/test/results/compiler/errors/unknown_column6.q.out
index a13d45dc0b..d828f35008 100644
--- ql/src/test/results/compiler/errors/unknown_column6.q.out
+++ ql/src/test/results/compiler/errors/unknown_column6.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:44 Expression not in GROUP BY key 'value'
\ No newline at end of file
+Line 3:44 Expression not in GROUP BY key 'value'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/unknown_function2.q.out ql/src/test/results/compiler/errors/unknown_function2.q.out
index 88b15ec5ca..1beddc4414 100644
--- ql/src/test/results/compiler/errors/unknown_function2.q.out
+++ ql/src/test/results/compiler/errors/unknown_function2.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:60 Invalid function 'anotherdummyfn'
\ No newline at end of file
+Line 3:60 Invalid function 'anotherdummyfn'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/unknown_function3.q.out ql/src/test/results/compiler/errors/unknown_function3.q.out
index 88b15ec5ca..1beddc4414 100644
--- ql/src/test/results/compiler/errors/unknown_function3.q.out
+++ ql/src/test/results/compiler/errors/unknown_function3.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:60 Invalid function 'anotherdummyfn'
\ No newline at end of file
+Line 3:60 Invalid function 'anotherdummyfn'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/unknown_table2.q.out ql/src/test/results/compiler/errors/unknown_table2.q.out
index d031fae3c6..88a48dd94b 100644
--- ql/src/test/results/compiler/errors/unknown_table2.q.out
+++ ql/src/test/results/compiler/errors/unknown_table2.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-Line 2:23 Table not found 'dummyDest'
\ No newline at end of file
+Line 3:23 Table not found 'dummyDest'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/wrong_distinct1.q.out ql/src/test/results/compiler/errors/wrong_distinct1.q.out
index 11f48a243b..de81b5bdec 100644
--- ql/src/test/results/compiler/errors/wrong_distinct1.q.out
+++ ql/src/test/results/compiler/errors/wrong_distinct1.q.out
@@ -1,2 +1,2 @@
 Semantic Exception: 
-2:88 SELECT DISTINCT and GROUP BY can not be in the same query. Error encountered near token 'key'
\ No newline at end of file
+3:88 SELECT DISTINCT and GROUP BY can not be in the same query. Error encountered near token 'key'
\ No newline at end of file
diff --git ql/src/test/results/compiler/errors/wrong_distinct2.q.out ql/src/test/results/compiler/errors/wrong_distinct2.q.out
index 6a492d2d3d..637ba721f4 100644
--- ql/src/test/results/compiler/errors/wrong_distinct2.q.out
+++ ql/src/test/results/compiler/errors/wrong_distinct2.q.out
@@ -1 +1 @@
-Parse Error: line 2:45 cannot recognize input near ',' 'DISTINCT' 'substr' in lateral view
\ No newline at end of file
+Parse Error: line 3:45 cannot recognize input near ',' 'DISTINCT' 'substr' in lateral view
\ No newline at end of file
